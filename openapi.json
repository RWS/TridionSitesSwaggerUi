{
  "swagger": "2.0",
  "info": {
    "version": "V1.0",
    "title": "Tridion CoreService Rest API",
    "x-swagger-net-version": "8.3.47.101"
  },
  "host": "localhost:81",
  "basePath": "/api",
  "schemes": [
    "http"
  ],
  "paths": {
    "/v{api-version}/items/{escapedItemId}/appData": {
      "get": {
        "tags": [
          "ApplicationData"
        ],
        "summary": "Gets application data for all applications related to a specified item.",
        "description": "This operation returns an instance of 'ApplicationData' type.\n\n",
        "operationId": "GetApplicationData",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "escapedItemId",
            "in": "path",
            "description": "The URI of an item with the colon escaped by replacing it with an underscore. E.g. \"tcm_0-1-1\".",
            "required": true,
            "type": "string"
          },
          {
            "name": "api-version",
            "in": "path",
            "description": "The version of the API you wish to use.",
            "required": true,
            "type": "string",
            "default": "1.0"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful.",
            "schema": {
              "items": {
                "$ref": "#/definitions/ApplicationData"
              },
              "xml": {
                "name": "ApplicationData",
                "wrapped": true
              },
              "type": "array"
            }
          },
          "400": {
            "description": "The request data is invalid."
          },
          "404": {
            "description": "The requested resource doesn't exist."
          },
          "500": {
            "description": "There was an unexpected error while handling the request."
          }
        }
      }
    },
    "/v{api-version}/batch/checkIn": {
      "post": {
        "tags": [
          "BatchOperations"
        ],
        "summary": "Checks in a batch of items.",
        "description": "This operation returns an instance of 'BatchOperationCreationResult' type.\n\n",
        "operationId": "BatchCheckIn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "requestModel",
            "in": "body",
            "description": "The model to use for the request.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BatchCheckInRequest"
            }
          },
          {
            "name": "api-version",
            "in": "path",
            "description": "The version of the API you wish to use.",
            "required": true,
            "type": "string",
            "default": "1.0"
          }
        ],
        "responses": {
          "202": {
            "description": "The request has been accepted for processing, but the processing has not been completed.",
            "schema": {
              "$ref": "#/definitions/BatchOperationCreationResult"
            }
          },
          "400": {
            "description": "The request data is invalid."
          },
          "403": {
            "description": "The server understood the request but refuses to authorize it."
          },
          "500": {
            "description": "There was an unexpected error while handling the request."
          }
        }
      }
    },
    "/v{api-version}/batch/checkOut": {
      "post": {
        "tags": [
          "BatchOperations"
        ],
        "summary": "Checks out a batch of items.",
        "description": "This operation returns an instance of 'BatchOperationCreationResult' type.\n\n",
        "operationId": "BatchCheckOut",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "requestModel",
            "in": "body",
            "description": "The model to use for the request.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BatchCheckOutRequest"
            }
          },
          {
            "name": "api-version",
            "in": "path",
            "description": "The version of the API you wish to use.",
            "required": true,
            "type": "string",
            "default": "1.0"
          }
        ],
        "responses": {
          "202": {
            "description": "The request has been accepted for processing, but the processing has not been completed.",
            "schema": {
              "$ref": "#/definitions/BatchOperationCreationResult"
            }
          },
          "400": {
            "description": "The request data is invalid."
          },
          "403": {
            "description": "The server understood the request but refuses to authorize it."
          },
          "500": {
            "description": "There was an unexpected error while handling the request."
          }
        }
      }
    },
    "/v{api-version}/batch/classify": {
      "post": {
        "tags": [
          "BatchOperations"
        ],
        "summary": "Classifies a batch of items.",
        "description": "This operation returns an instance of 'BatchOperationCreationResult' type.\n\n",
        "operationId": "BatchClassify",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "requestModel",
            "in": "body",
            "description": "The model to use for the request.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BatchClassifyOrUnClassifyRequest"
            }
          },
          {
            "name": "api-version",
            "in": "path",
            "description": "The version of the API you wish to use.",
            "required": true,
            "type": "string",
            "default": "1.0"
          }
        ],
        "responses": {
          "202": {
            "description": "The request has been accepted for processing, but the processing has not been completed.",
            "schema": {
              "$ref": "#/definitions/BatchOperationCreationResult"
            }
          },
          "400": {
            "description": "The request data is invalid."
          },
          "403": {
            "description": "The server understood the request but refuses to authorize it."
          },
          "500": {
            "description": "There was an unexpected error while handling the request."
          }
        }
      }
    },
    "/v{api-version}/batch/autoClassify": {
      "post": {
        "tags": [
          "BatchOperations"
        ],
        "summary": "Automatically classifies a batch of items.",
        "description": "This operation returns an instance of 'BatchOperationCreationResult' type.\n\n",
        "operationId": "BatchAutoClassify",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "requestModel",
            "in": "body",
            "description": "The model to use for the request.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BatchAutoClassifyRequest"
            }
          },
          {
            "name": "api-version",
            "in": "path",
            "description": "The version of the API you wish to use.",
            "required": true,
            "type": "string",
            "default": "1.0"
          }
        ],
        "responses": {
          "202": {
            "description": "The request has been accepted for processing, but the processing has not been completed.",
            "schema": {
              "$ref": "#/definitions/BatchOperationCreationResult"
            }
          },
          "400": {
            "description": "The request data is invalid."
          },
          "403": {
            "description": "The server understood the request but refuses to authorize it."
          },
          "500": {
            "description": "There was an unexpected error while handling the request."
          }
        }
      }
    },
    "/v{api-version}/batch/copy": {
      "post": {
        "tags": [
          "BatchOperations"
        ],
        "summary": "Copies a batch of items.",
        "description": "This operation returns an instance of 'BatchOperationCreationResult' type.\n\n",
        "operationId": "BatchCopy",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "requestModel",
            "in": "body",
            "description": "The model to use for the request.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BatchCopyRequest"
            }
          },
          {
            "name": "api-version",
            "in": "path",
            "description": "The version of the API you wish to use.",
            "required": true,
            "type": "string",
            "default": "1.0"
          }
        ],
        "responses": {
          "202": {
            "description": "The request has been accepted for processing, but the processing has not been completed.",
            "schema": {
              "$ref": "#/definitions/BatchOperationCreationResult"
            }
          },
          "400": {
            "description": "The request data is invalid."
          },
          "403": {
            "description": "The server understood the request but refuses to authorize it."
          },
          "500": {
            "description": "There was an unexpected error while handling the request."
          }
        }
      }
    },
    "/v{api-version}/batch/delete": {
      "post": {
        "tags": [
          "BatchOperations"
        ],
        "summary": "Deletes a batch of items.",
        "description": "This operation returns an instance of 'BatchOperationCreationResult' type.\n\n",
        "operationId": "BatchDelete",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "requestModel",
            "in": "body",
            "description": "The model to use for the request.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BatchOperationRequest"
            }
          },
          {
            "name": "api-version",
            "in": "path",
            "description": "The version of the API you wish to use.",
            "required": true,
            "type": "string",
            "default": "1.0"
          }
        ],
        "responses": {
          "202": {
            "description": "The request has been accepted for processing, but the processing has not been completed.",
            "schema": {
              "$ref": "#/definitions/BatchOperationCreationResult"
            }
          },
          "400": {
            "description": "The request data is invalid."
          },
          "403": {
            "description": "The server understood the request but refuses to authorize it."
          },
          "500": {
            "description": "There was an unexpected error while handling the request."
          }
        }
      }
    },
    "/v{api-version}/batch/demote": {
      "post": {
        "tags": [
          "BatchOperations"
        ],
        "summary": "Demotes a batch of items.",
        "description": "This operation returns an instance of 'BatchOperationCreationResult' type.\n\n",
        "operationId": "BatchDemote",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "requestModel",
            "in": "body",
            "description": "The model to use for the request.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BatchPromoteDemoteRequest"
            }
          },
          {
            "name": "api-version",
            "in": "path",
            "description": "The version of the API you wish to use.",
            "required": true,
            "type": "string",
            "default": "1.0"
          }
        ],
        "responses": {
          "202": {
            "description": "The request has been accepted for processing, but the processing has not been completed.",
            "schema": {
              "$ref": "#/definitions/BatchOperationCreationResult"
            }
          },
          "400": {
            "description": "The request data is invalid."
          },
          "403": {
            "description": "The server understood the request but refuses to authorize it."
          },
          "500": {
            "description": "There was an unexpected error while handling the request."
          }
        }
      }
    },
    "/v{api-version}/batch/localize": {
      "post": {
        "tags": [
          "BatchOperations"
        ],
        "summary": "Localizes a batch of items.",
        "description": "This operation returns an instance of 'BatchOperationCreationResult' type.\n\n",
        "operationId": "BatchLocalize",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "requestModel",
            "in": "body",
            "description": "The model to use for the request.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BatchOperationRequest"
            }
          },
          {
            "name": "api-version",
            "in": "path",
            "description": "The version of the API you wish to use.",
            "required": true,
            "type": "string",
            "default": "1.0"
          }
        ],
        "responses": {
          "202": {
            "description": "The request has been accepted for processing, but the processing has not been completed.",
            "schema": {
              "$ref": "#/definitions/BatchOperationCreationResult"
            }
          },
          "400": {
            "description": "The request data is invalid."
          },
          "403": {
            "description": "The server understood the request but refuses to authorize it."
          },
          "500": {
            "description": "There was an unexpected error while handling the request."
          }
        }
      }
    },
    "/v{api-version}/batch/move": {
      "post": {
        "tags": [
          "BatchOperations"
        ],
        "summary": "Moves a batch of items.",
        "description": "This operation returns an instance of 'BatchOperationCreationResult' type.\n\n",
        "operationId": "BatchMove",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "requestModel",
            "in": "body",
            "description": "The model to use for the request.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BatchCopyOrMoveRequest"
            }
          },
          {
            "name": "api-version",
            "in": "path",
            "description": "The version of the API you wish to use.",
            "required": true,
            "type": "string",
            "default": "1.0"
          }
        ],
        "responses": {
          "202": {
            "description": "The request has been accepted for processing, but the processing has not been completed.",
            "schema": {
              "$ref": "#/definitions/BatchOperationCreationResult"
            }
          },
          "400": {
            "description": "The request data is invalid."
          },
          "403": {
            "description": "The server understood the request but refuses to authorize it."
          },
          "500": {
            "description": "There was an unexpected error while handling the request."
          }
        }
      }
    },
    "/v{api-version}/batch/promote": {
      "post": {
        "tags": [
          "BatchOperations"
        ],
        "summary": "Promotes a batch of items.",
        "description": "This operation returns an instance of 'BatchOperationCreationResult' type.\n\n",
        "operationId": "BatchPromote",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "requestModel",
            "in": "body",
            "description": "The model to use for the request.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BatchPromoteDemoteRequest"
            }
          },
          {
            "name": "api-version",
            "in": "path",
            "description": "The version of the API you wish to use.",
            "required": true,
            "type": "string",
            "default": "1.0"
          }
        ],
        "responses": {
          "202": {
            "description": "The request has been accepted for processing, but the processing has not been completed.",
            "schema": {
              "$ref": "#/definitions/BatchOperationCreationResult"
            }
          },
          "400": {
            "description": "The request data is invalid."
          },
          "403": {
            "description": "The server understood the request but refuses to authorize it."
          },
          "500": {
            "description": "There was an unexpected error while handling the request."
          }
        }
      }
    },
    "/v{api-version}/batch/publish": {
      "post": {
        "tags": [
          "BatchOperations"
        ],
        "summary": "Publishes a batch of items.",
        "description": "This operation returns an instance of 'BatchOperationCreationResult' type.\n\n",
        "operationId": "BatchPublish",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "requestModel",
            "in": "body",
            "description": "The model to use for the request.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BatchPublishRequest"
            }
          },
          {
            "name": "api-version",
            "in": "path",
            "description": "The version of the API you wish to use.",
            "required": true,
            "type": "string",
            "default": "1.0"
          }
        ],
        "responses": {
          "202": {
            "description": "The request has been accepted for processing, but the processing has not been completed.",
            "schema": {
              "$ref": "#/definitions/BatchOperationCreationResult"
            }
          },
          "400": {
            "description": "The request data is invalid."
          },
          "403": {
            "description": "The server understood the request but refuses to authorize it."
          },
          "500": {
            "description": "There was an unexpected error while handling the request."
          }
        }
      }
    },
    "/v{api-version}/batch/unclassify": {
      "post": {
        "tags": [
          "BatchOperations"
        ],
        "summary": "Unclassifies a batch of items.",
        "description": "This operation returns an instance of 'BatchOperationCreationResult' type.\n\n",
        "operationId": "BatchUnclassify",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "requestModel",
            "in": "body",
            "description": "The model to use for the request.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BatchClassifyOrUnClassifyRequest"
            }
          },
          {
            "name": "api-version",
            "in": "path",
            "description": "The version of the API you wish to use.",
            "required": true,
            "type": "string",
            "default": "1.0"
          }
        ],
        "responses": {
          "202": {
            "description": "The request has been accepted for processing, but the processing has not been completed.",
            "schema": {
              "$ref": "#/definitions/BatchOperationCreationResult"
            }
          },
          "400": {
            "description": "The request data is invalid."
          },
          "403": {
            "description": "The server understood the request but refuses to authorize it."
          },
          "500": {
            "description": "There was an unexpected error while handling the request."
          }
        }
      }
    },
    "/v{api-version}/batch/undoCheckOut": {
      "post": {
        "tags": [
          "BatchOperations"
        ],
        "summary": "Undoes the checkout of a batch of items.",
        "description": "This operation returns an instance of 'BatchOperationCreationResult' type.\n\n",
        "operationId": "BatchUndoCheckOut",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "requestModel",
            "in": "body",
            "description": "The model to use for the request.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BatchUndoCheckOutRequest"
            }
          },
          {
            "name": "api-version",
            "in": "path",
            "description": "The version of the API you wish to use.",
            "required": true,
            "type": "string",
            "default": "1.0"
          }
        ],
        "responses": {
          "202": {
            "description": "The request has been accepted for processing, but the processing has not been completed.",
            "schema": {
              "$ref": "#/definitions/BatchOperationCreationResult"
            }
          },
          "400": {
            "description": "The request data is invalid."
          },
          "403": {
            "description": "The server understood the request but refuses to authorize it."
          },
          "500": {
            "description": "There was an unexpected error while handling the request."
          }
        }
      }
    },
    "/v{api-version}/batch/unlocalize": {
      "post": {
        "tags": [
          "BatchOperations"
        ],
        "summary": "Unlocalizes a batch of items.",
        "description": "This operation returns an instance of 'BatchOperationCreationResult' type.\n\n",
        "operationId": "BatchUnlocalize",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "requestModel",
            "in": "body",
            "description": "The model to use for the request.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BatchOperationRequest"
            }
          },
          {
            "name": "api-version",
            "in": "path",
            "description": "The version of the API you wish to use.",
            "required": true,
            "type": "string",
            "default": "1.0"
          }
        ],
        "responses": {
          "202": {
            "description": "The request has been accepted for processing, but the processing has not been completed.",
            "schema": {
              "$ref": "#/definitions/BatchOperationCreationResult"
            }
          },
          "400": {
            "description": "The request data is invalid."
          },
          "403": {
            "description": "The server understood the request but refuses to authorize it."
          },
          "500": {
            "description": "There was an unexpected error while handling the request."
          }
        }
      }
    },
    "/v{api-version}/batch/unpublish": {
      "post": {
        "tags": [
          "BatchOperations"
        ],
        "summary": "Unpublishes a batch of items.",
        "description": "This operation returns an instance of 'BatchOperationCreationResult' type.\n\n",
        "operationId": "BatchUnpublish",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "requestModel",
            "in": "body",
            "description": "The model to use for the request.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BatchUnPublishRequest"
            }
          },
          {
            "name": "api-version",
            "in": "path",
            "description": "The version of the API you wish to use.",
            "required": true,
            "type": "string",
            "default": "1.0"
          }
        ],
        "responses": {
          "202": {
            "description": "The request has been accepted for processing, but the processing has not been completed.",
            "schema": {
              "$ref": "#/definitions/BatchOperationCreationResult"
            }
          },
          "400": {
            "description": "The request data is invalid."
          },
          "403": {
            "description": "The server understood the request but refuses to authorize it."
          },
          "500": {
            "description": "There was an unexpected error while handling the request."
          }
        }
      }
    },
    "/v{api-version}/binary/upload": {
      "post": {
        "tags": [
          "Binaries"
        ],
        "summary": "Uploads a single binary file.",
        "description": "This operation returns an instance of 'BinaryUploadResponse' type.\n\n",
        "operationId": "Upload",
        "consumes": [
          "application/json",
          "application/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "file",
            "in": "formData",
            "description": "File for uploading",
            "required": true,
            "type": "file"
          },
          {
            "name": "api-version",
            "in": "path",
            "description": "The version of the API you wish to use.",
            "required": true,
            "type": "string",
            "default": "1.0"
          }
        ],
        "responses": {
          "202": {
            "description": "The request has been accepted for processing, but the processing has not been completed.",
            "schema": {
              "$ref": "#/definitions/BinaryUploadResponse"
            }
          },
          "400": {
            "description": "The request data is invalid."
          },
          "403": {
            "description": "The server understood the request but refuses to authorize it."
          },
          "500": {
            "description": "There was an unexpected error while handling the request."
          }
        }
      }
    },
    "/v{api-version}/binary/thumbnail": {
      "get": {
        "tags": [
          "Binaries"
        ],
        "summary": "Gets the thumbnail image of an uploaded binary file (or the multimedia type icon when no thumbnail is available).",
        "description": "\n\n",
        "operationId": "GetFileThumbnail",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "tempFileId",
            "in": "query",
            "description": "The temporary ID of a binary file that was previously uploaded with an upload request. The ID can be found in the model returned by the request.",
            "required": true,
            "type": "string"
          },
          {
            "name": "fileExtension",
            "in": "query",
            "description": "The extension of the uploaded binary file (excluding the leading dot).",
            "required": true,
            "type": "string"
          },
          {
            "name": "width",
            "in": "query",
            "description": "Resize an image binary to the specified width in pixels. Default value is 0.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          {
            "name": "height",
            "in": "query",
            "description": "Resize an image binary to the specified height in pixels. Default value is 0.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          {
            "name": "api-version",
            "in": "path",
            "description": "The version of the API you wish to use.",
            "required": true,
            "type": "string",
            "default": "1.0"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful.",
            "schema": {
              "type": "object"
            }
          },
          "304": {
            "description": "The requested content was not modified."
          },
          "400": {
            "description": "The request data is invalid."
          },
          "403": {
            "description": "The server understood the request but refuses to authorize it."
          },
          "500": {
            "description": "There was an unexpected error while handling the request."
          }
        }
      }
    },
    "/v{api-version}/binary/download": {
      "get": {
        "tags": [
          "Binaries"
        ],
        "summary": "Downloads the temporary file for a binary file that was previously uploaded.",
        "description": "\n\n",
        "operationId": "DownloadFile",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "tempFileId",
            "in": "query",
            "description": "The temporary ID of a binary file that was previously uploaded with an upload request. The ID can be found in the model returned by the request.",
            "required": true,
            "type": "string"
          },
          {
            "name": "filename",
            "in": "query",
            "description": "The name to give to the download file.",
            "required": true,
            "type": "string"
          },
          {
            "name": "api-version",
            "in": "path",
            "description": "The version of the API you wish to use.",
            "required": true,
            "type": "string",
            "default": "1.0"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful.",
            "schema": {
              "type": "object"
            }
          },
          "304": {
            "description": "The requested content was not modified."
          },
          "400": {
            "description": "The request data is invalid."
          },
          "403": {
            "description": "The server understood the request but refuses to authorize it."
          },
          "500": {
            "description": "There was an unexpected error while handling the request."
          }
        }
      }
    },
    "/v{api-version}/items/{escapedItemId}/binary/thumbnail": {
      "get": {
        "tags": [
          "Binaries"
        ],
        "summary": "Gets the thumbnail image for the binary content contained in a specified Multimedia Component.",
        "description": "\n\n",
        "operationId": "GetItemBinaryThumbnail",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "escapedItemId",
            "in": "path",
            "description": "The URI of an item with the colon escaped by replacing it with an underscore. E.g. \"tcm_0-1-1\".",
            "required": true,
            "type": "string"
          },
          {
            "name": "width",
            "in": "query",
            "description": "Resize an image binary to the specified width in pixels.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          {
            "name": "height",
            "in": "query",
            "description": "Resize an image binary to the specified height in pixels.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          {
            "name": "api-version",
            "in": "path",
            "description": "The version of the API you wish to use.",
            "required": true,
            "type": "string",
            "default": "1.0"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful.",
            "schema": {
              "type": "object"
            }
          },
          "304": {
            "description": "The requested content was not modified."
          },
          "400": {
            "description": "The request data is invalid."
          },
          "403": {
            "description": "The server understood the request but refuses to authorize it."
          },
          "404": {
            "description": "The requested resource doesn't exist."
          },
          "500": {
            "description": "There was an unexpected error while handling the request."
          }
        }
      }
    },
    "/v{api-version}/items/{escapedItemId}/binary/download": {
      "get": {
        "tags": [
          "Binaries"
        ],
        "summary": "Downloads the binary content of a Multimedia Component as a file.",
        "description": "\n\n",
        "operationId": "DownloadItemBinary",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "escapedItemId",
            "in": "path",
            "description": "The URI of an item with the colon escaped by replacing it with an underscore. E.g. \"tcm_0-1-1\".",
            "required": true,
            "type": "string"
          },
          {
            "name": "api-version",
            "in": "path",
            "description": "The version of the API you wish to use.",
            "required": true,
            "type": "string",
            "default": "1.0"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful.",
            "schema": {
              "type": "object"
            }
          },
          "400": {
            "description": "The request data is invalid."
          },
          "403": {
            "description": "The server understood the request but refuses to authorize it."
          },
          "404": {
            "description": "The requested resource doesn't exist."
          },
          "500": {
            "description": "There was an unexpected error while handling the request."
          }
        }
      }
    },
    "/v{api-version}/items/{escapedItemId}/bluePrintHierarchy": {
      "get": {
        "tags": [
          "BluePrinting"
        ],
        "summary": "Gets the context of an item in the BluePrint hierarchy.",
        "description": "This operation returns an instance of 'BlueprintHierarchyResponse' type.\n\n",
        "operationId": "GetBluePrintHierarchy",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "escapedItemId",
            "in": "path",
            "description": "The URI of an item with the colon escaped by replacing it with an underscore. E.g. \"tcm_0-1-1\".",
            "required": true,
            "type": "string"
          },
          {
            "name": "api-version",
            "in": "path",
            "description": "The version of the API you wish to use.",
            "required": true,
            "type": "string",
            "default": "1.0"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful.",
            "schema": {
              "$ref": "#/definitions/BlueprintHierarchyResponse"
            }
          },
          "400": {
            "description": "The request data is invalid."
          },
          "404": {
            "description": "The requested resource doesn't exist."
          },
          "500": {
            "description": "There was an unexpected error while handling the request."
          }
        }
      }
    },
    "/v{api-version}/items/{escapedItemId}/demote": {
      "post": {
        "tags": [
          "BluePrinting"
        ],
        "summary": "Demotes an item in the BluePrint hierarchy.",
        "description": "This operation returns an instance of 'OperationResult' type.\n\n",
        "operationId": "Demote",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "escapedItemId",
            "in": "path",
            "description": "The URI of an item with the colon escaped by replacing it with an underscore. E.g. \"tcm_0-1-1\".",
            "required": true,
            "type": "string"
          },
          {
            "name": "requestModel",
            "in": "body",
            "description": "The model to use for the request.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PromoteDemoteRequest"
            }
          },
          {
            "name": "api-version",
            "in": "path",
            "description": "The version of the API you wish to use.",
            "required": true,
            "type": "string",
            "default": "1.0"
          }
        ],
        "responses": {
          "201": {
            "description": "The request has completed and has resulted in one or more new resources being created.",
            "schema": {
              "$ref": "#/definitions/OperationResult"
            }
          },
          "400": {
            "description": "The request data is invalid."
          },
          "403": {
            "description": "The server understood the request but refuses to authorize it."
          },
          "404": {
            "description": "The requested resource doesn't exist."
          },
          "500": {
            "description": "There was an unexpected error while handling the request."
          }
        }
      }
    },
    "/v{api-version}/items/{escapedItemId}/promote": {
      "post": {
        "tags": [
          "BluePrinting"
        ],
        "summary": "Promotes an item in the BluePrint hierarchy.",
        "description": "This operation returns an instance of 'OperationResult' type.\n\n",
        "operationId": "Promote",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "escapedItemId",
            "in": "path",
            "description": "The URI of an item with the colon escaped by replacing it with an underscore. E.g. \"tcm_0-1-1\".",
            "required": true,
            "type": "string"
          },
          {
            "name": "requestModel",
            "in": "body",
            "description": "The model to use for the request.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PromoteDemoteRequest"
            }
          },
          {
            "name": "api-version",
            "in": "path",
            "description": "The version of the API you wish to use.",
            "required": true,
            "type": "string",
            "default": "1.0"
          }
        ],
        "responses": {
          "201": {
            "description": "The request has completed and has resulted in one or more new resources being created.",
            "schema": {
              "$ref": "#/definitions/OperationResult"
            }
          },
          "400": {
            "description": "The request data is invalid."
          },
          "403": {
            "description": "The server understood the request but refuses to authorize it."
          },
          "404": {
            "description": "The requested resource doesn't exist."
          },
          "500": {
            "description": "There was an unexpected error while handling the request."
          }
        }
      }
    },
    "/v{api-version}/items/{escapedItemId}/localize": {
      "post": {
        "tags": [
          "BluePrinting"
        ],
        "summary": "Localizes a shared item in the BluePrint to create a local copy that can then be modified locally.",
        "description": "This operation returns an instance of 'RepositoryLocalObject' type, as implemented by one of the following:<ul class=\"model-list\"><li><span>Bundle</span></li><li><span>BusinessProcessType</span></li><li><span>Category</span></li><li><span>Component</span></li><li><span>ComponentTemplate</span></li><li><span>ExternalCategory</span></li><li><span>ExternalComponent</span></li><li><span>ExternalContainer</span></li><li><span>ExternalKeyword</span></li><li><span>Folder</span></li><li><span>Keyword</span></li><li><span>Page</span></li><li><span>PageTemplate</span></li><li><span>ResolvedBundle</span></li><li><span>Schema</span></li><li><span>SearchFolder</span></li><li><span>StructureGroup</span></li><li><span>TargetGroup</span></li><li><span>TemplateBuildingBlock</span></li><li><span>TridionProcessDefinition</span></li></ul>\n\n",
        "operationId": "Localize",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "escapedItemId",
            "in": "path",
            "description": "The URI of an item with the colon escaped by replacing it with an underscore. E.g. \"tcm_0-1-1\".",
            "required": true,
            "type": "string"
          },
          {
            "name": "api-version",
            "in": "path",
            "description": "The version of the API you wish to use.",
            "required": true,
            "type": "string",
            "default": "1.0"
          }
        ],
        "responses": {
          "201": {
            "description": "The request has completed and has resulted in one or more new resources being created.",
            "schema": {
              "$ref": "#/definitions/RepositoryLocalObject"
            }
          },
          "400": {
            "description": "The request data is invalid."
          },
          "403": {
            "description": "The server understood the request but refuses to authorize it."
          },
          "404": {
            "description": "The requested resource doesn't exist."
          },
          "500": {
            "description": "There was an unexpected error while handling the request."
          }
        }
      }
    },
    "/v{api-version}/items/{escapedItemId}/unlocalize": {
      "post": {
        "tags": [
          "BluePrinting"
        ],
        "summary": "Unlocalizes an item in the BluePrint.",
        "description": "This operation returns an instance of 'RepositoryLocalObject' type, as implemented by one of the following:<ul class=\"model-list\"><li><span>Bundle</span></li><li><span>BusinessProcessType</span></li><li><span>Category</span></li><li><span>Component</span></li><li><span>ComponentTemplate</span></li><li><span>ExternalCategory</span></li><li><span>ExternalComponent</span></li><li><span>ExternalContainer</span></li><li><span>ExternalKeyword</span></li><li><span>Folder</span></li><li><span>Keyword</span></li><li><span>Page</span></li><li><span>PageTemplate</span></li><li><span>ResolvedBundle</span></li><li><span>Schema</span></li><li><span>SearchFolder</span></li><li><span>StructureGroup</span></li><li><span>TargetGroup</span></li><li><span>TemplateBuildingBlock</span></li><li><span>TridionProcessDefinition</span></li></ul>\n\n",
        "operationId": "Unlocalize",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "escapedItemId",
            "in": "path",
            "description": "The URI of an item with the colon escaped by replacing it with an underscore. E.g. \"tcm_0-1-1\".",
            "required": true,
            "type": "string"
          },
          {
            "name": "useDynamicVersion",
            "in": "query",
            "description": "Loads a dynamic version (if available for the current user)",
            "required": false,
            "type": "boolean",
            "default": true
          },
          {
            "name": "api-version",
            "in": "path",
            "description": "The version of the API you wish to use.",
            "required": true,
            "type": "string",
            "default": "1.0"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful.",
            "schema": {
              "$ref": "#/definitions/RepositoryLocalObject"
            }
          },
          "400": {
            "description": "The request data is invalid."
          },
          "403": {
            "description": "The server understood the request but refuses to authorize it."
          },
          "404": {
            "description": "The requested resource doesn't exist."
          },
          "500": {
            "description": "There was an unexpected error while handling the request."
          }
        }
      }
    },
    "/v{api-version}/items/{escapedItemId}/autoClassify": {
      "post": {
        "tags": [
          "Classification"
        ],
        "summary": "Automatically classifies the specified item with Keywords (internal taxonomy) or concepts (external taxonomy) based on the current content and metadata of the item.",
        "description": "This operation returns an instance of 'ClassificationInfo' type.\n\n",
        "operationId": "AutoClassify",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "escapedItemId",
            "in": "path",
            "description": "The URI of an item with the colon escaped by replacing it with an underscore. E.g. \"tcm_0-1-1\".",
            "required": true,
            "type": "string"
          },
          {
            "name": "api-version",
            "in": "path",
            "description": "The version of the API you wish to use.",
            "required": true,
            "type": "string",
            "default": "1.0"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful.",
            "schema": {
              "$ref": "#/definitions/ClassificationInfo"
            }
          },
          "400": {
            "description": "The request data is invalid."
          },
          "403": {
            "description": "The server understood the request but refuses to authorize it."
          },
          "404": {
            "description": "The requested resource doesn't exist."
          },
          "500": {
            "description": "There was an unexpected error while handling the request."
          }
        }
      }
    },
    "/v{api-version}/items/{escapedKeywordId}/classifiedItems": {
      "get": {
        "tags": [
          "Classification"
        ],
        "summary": "Gets a list of all items that are classified with a specified Keyword (internal) or Concept (external).",
        "description": "This operation returns an instance of 'RepositoryLocalObject' type, as implemented by one of the following:<ul class=\"model-list\"><li><span>Bundle</span></li><li><span>BusinessProcessType</span></li><li><span>Category</span></li><li><span>Component</span></li><li><span>ComponentTemplate</span></li><li><span>ExternalCategory</span></li><li><span>ExternalComponent</span></li><li><span>ExternalContainer</span></li><li><span>ExternalKeyword</span></li><li><span>Folder</span></li><li><span>Keyword</span></li><li><span>Page</span></li><li><span>PageTemplate</span></li><li><span>ResolvedBundle</span></li><li><span>Schema</span></li><li><span>SearchFolder</span></li><li><span>StructureGroup</span></li><li><span>TargetGroup</span></li><li><span>TemplateBuildingBlock</span></li></ul>\n\n",
        "operationId": "GetClassifiedItems",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "escapedKeywordId",
            "in": "path",
            "description": "The URI of a Keyword or Concept with the colon escaped by replacing it with an underscore. E.g. \"tcm_1-1-1024\"",
            "required": true,
            "type": "string"
          },
          {
            "name": "useDynamicVersion",
            "in": "query",
            "description": "Loads a dynamic version (if available for the current user)",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "rloItemTypes",
            "in": "query",
            "description": "The item types of all repository-local objects that you want to include in the response.",
            "required": false,
            "items": {
              "$ref": "#/definitions/RLOItemType",
              "type": "string"
            },
            "collectionFormat": "multi",
            "type": "array"
          },
          {
            "name": "resolveDescendantKeywords",
            "in": "query",
            "description": "A boolean value to indicate whether to include descendant keywords in the results.",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "resultLimit",
            "in": "query",
            "description": "An integer value to limit the number of items returned in the list. Specify a positive value as the limit or -1 for no limit. Setting the value to zero will return an empty list.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "default": 100
          },
          {
            "name": "api-version",
            "in": "path",
            "description": "The version of the API you wish to use.",
            "required": true,
            "type": "string",
            "default": "1.0"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful.",
            "schema": {
              "items": {
                "$ref": "#/definitions/RepositoryLocalObject"
              },
              "xml": {
                "name": "RepositoryLocalObject",
                "wrapped": true
              },
              "type": "array"
            }
          },
          "400": {
            "description": "The request data is invalid."
          },
          "403": {
            "description": "The server understood the request but refuses to authorize it."
          },
          "404": {
            "description": "The requested resource doesn't exist."
          },
          "500": {
            "description": "There was an unexpected error while handling the request."
          }
        }
      }
    },
    "/v{api-version}/item/suggestKeywords": {
      "post": {
        "tags": [
          "Classification"
        ],
        "summary": "Get suggestions for classifying an item with concepts from an external taxonomy. Suggestions are based on the content and metadata of the source item.",
        "description": "This operation returns an instance of 'KeywordSuggestions' type.\n\n",
        "operationId": "GetKeywordSuggestions",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "sourceObject",
            "in": "body",
            "description": "The source item to request the keywords for.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/IdentifiableObject"
            }
          },
          {
            "name": "categoryId",
            "in": "query",
            "description": "The Category identifier (ECL URI), if provided, the suggestions are given based on this category only, and rest of the specified categories (if any) in the sourceObject are ignored.",
            "required": false,
            "type": "string"
          },
          {
            "name": "api-version",
            "in": "path",
            "description": "The version of the API you wish to use.",
            "required": true,
            "type": "string",
            "default": "1.0"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful.",
            "schema": {
              "additionalProperties": {
                "items": {
                  "$ref": "#/definitions/KeywordSuggestion"
                },
                "xml": {
                  "name": "KeywordSuggestion",
                  "wrapped": true
                },
                "type": "array"
              },
              "type": "object"
            }
          },
          "400": {
            "description": "The request data is invalid."
          },
          "403": {
            "description": "The server understood the request but refuses to authorize it."
          },
          "404": {
            "description": "The requested resource doesn't exist."
          },
          "500": {
            "description": "There was an unexpected error while handling the request."
          }
        }
      }
    },
    "/v{api-version}/items/{escapedItemId}": {
      "get": {
        "tags": [
          "Item"
        ],
        "summary": "Gets a single item by specifying the item URI.",
        "description": "This operation returns an instance of 'IdentifiableObject' type, as implemented by one of the following:<ul class=\"model-list\"><li><span>ActivityHistory</span></li><li><span>ActivityInstance</span></li><li><span>ApprovalStatus</span></li><li><span>Batch</span></li><li><span>Bundle</span></li><li><span>BusinessProcessType</span></li><li><span>Category</span></li><li><span>Component</span></li><li><span>ComponentTemplate</span></li><li><span>ExternalCategory</span></li><li><span>ExternalComponent</span></li><li><span>ExternalContainer</span></li><li><span>ExternalKeyword</span></li><li><span>Folder</span></li><li><span>Group</span></li><li><span>Keyword</span></li><li><span>MultimediaType</span></li><li><span>Page</span></li><li><span>PageTemplate</span></li><li><span>ProcessHistory</span></li><li><span>ProcessInstance</span></li><li><span>Publication</span></li><li><span>PublishTransaction</span></li><li><span>Schema</span></li><li><span>SearchFolder</span></li><li><span>StructureGroup</span></li><li><span>TargetGroup</span></li><li><span>TargetType</span></li><li><span>TemplateBuildingBlock</span></li><li><span>TridionActivityDefinition</span></li><li><span>TridionProcessDefinition</span></li><li><span>User</span></li><li><span>WorkItem</span></li></ul>\n\n",
        "operationId": "GetItem",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "escapedItemId",
            "in": "path",
            "description": "The URI of an item with the colon escaped by replacing it with an underscore. E.g. \"tcm_0-1-1\".",
            "required": true,
            "type": "string"
          },
          {
            "name": "useDynamicVersion",
            "in": "query",
            "description": "Loads a dynamic version (if available for the current user)",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "api-version",
            "in": "path",
            "description": "The version of the API you wish to use.",
            "required": true,
            "type": "string",
            "default": "1.0"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful.",
            "schema": {
              "$ref": "#/definitions/IdentifiableObject"
            }
          },
          "400": {
            "description": "The request data is invalid."
          },
          "403": {
            "description": "The server understood the request but refuses to authorize it."
          },
          "404": {
            "description": "The requested resource doesn't exist."
          },
          "500": {
            "description": "There was an unexpected error while handling the request."
          }
        }
      },
      "put": {
        "tags": [
          "Item"
        ],
        "summary": "Updates an existing item with the specified item URI.",
        "description": "This operation returns an instance of 'IdentifiableObject' type, as implemented by one of the following:<ul class=\"model-list\"><li><span>ActivityHistory</span></li><li><span>ActivityInstance</span></li><li><span>ApprovalStatus</span></li><li><span>Batch</span></li><li><span>Bundle</span></li><li><span>BusinessProcessType</span></li><li><span>Category</span></li><li><span>Component</span></li><li><span>ComponentTemplate</span></li><li><span>ExternalCategory</span></li><li><span>ExternalComponent</span></li><li><span>ExternalContainer</span></li><li><span>ExternalKeyword</span></li><li><span>Folder</span></li><li><span>Group</span></li><li><span>Keyword</span></li><li><span>MultimediaType</span></li><li><span>Page</span></li><li><span>PageTemplate</span></li><li><span>ProcessHistory</span></li><li><span>ProcessInstance</span></li><li><span>Publication</span></li><li><span>PublishTransaction</span></li><li><span>Schema</span></li><li><span>SearchFolder</span></li><li><span>StructureGroup</span></li><li><span>TargetGroup</span></li><li><span>TargetType</span></li><li><span>TemplateBuildingBlock</span></li><li><span>TridionActivityDefinition</span></li><li><span>TridionProcessDefinition</span></li><li><span>User</span></li><li><span>WorkItem</span></li></ul>\n\n",
        "operationId": "Update",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "escapedItemId",
            "in": "path",
            "description": "The URI of an item with the colon escaped by replacing it with an underscore. E.g. \"tcm_0-1-1\".",
            "required": true,
            "type": "string"
          },
          {
            "name": "requestModel",
            "in": "body",
            "description": "The model to use for the request.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/IdentifiableObject"
            }
          },
          {
            "name": "api-version",
            "in": "path",
            "description": "The version of the API you wish to use.",
            "required": true,
            "type": "string",
            "default": "1.0"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful.",
            "schema": {
              "$ref": "#/definitions/IdentifiableObject"
            }
          },
          "400": {
            "description": "The request data is invalid."
          },
          "403": {
            "description": "The server understood the request but refuses to authorize it."
          },
          "404": {
            "description": "The requested resource doesn't exist."
          },
          "500": {
            "description": "There was an unexpected error while handling the request."
          }
        }
      },
      "delete": {
        "tags": [
          "Item"
        ],
        "summary": "Permanently deletes an item from the system. You can delete all versions of the item or only a specified version of the item.",
        "description": "\n\n",
        "operationId": "Delete",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "escapedItemId",
            "in": "path",
            "description": "The URI of an item with the colon escaped by replacing it with an underscore. E.g. \"tcm_1-1-1\".\r\nTo delete only a specific version of the item, include the item's version in the TCM URI. E.g. \"tcm_1-15-v5\"",
            "required": true,
            "type": "string"
          },
          {
            "name": "api-version",
            "in": "path",
            "description": "The version of the API you wish to use.",
            "required": true,
            "type": "string",
            "default": "1.0"
          }
        ],
        "responses": {
          "204": {
            "description": "The request was successful and there is no content in the body of the response."
          },
          "400": {
            "description": "The request data is invalid."
          },
          "403": {
            "description": "The server understood the request but refuses to authorize it."
          },
          "404": {
            "description": "The requested resource doesn't exist."
          },
          "409": {
            "description": "The request could not be completed due to a conflict with the current state of the target resource."
          },
          "500": {
            "description": "There was an unexpected error while handling the request."
          }
        }
      },
      "head": {
        "tags": [
          "Item"
        ],
        "summary": "Checks whether an item exists in the system based on its URI.",
        "description": "\n\n",
        "operationId": "ItemExists",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "escapedItemId",
            "in": "path",
            "description": "The URI of an item with the colon escaped by replacing it with an underscore. E.g. \"tcm_0-1-1\".",
            "required": true,
            "type": "string"
          },
          {
            "name": "api-version",
            "in": "path",
            "description": "The version of the API you wish to use.",
            "required": true,
            "type": "string",
            "default": "1.0"
          }
        ],
        "responses": {
          "204": {
            "description": "The request was successful and there is no content in the body of the response."
          },
          "400": {
            "description": "The request data is invalid."
          },
          "404": {
            "description": "The requested resource doesn't exist."
          },
          "500": {
            "description": "There was an unexpected error while handling the request."
          }
        }
      }
    },
    "/v{api-version}/items/bulkRead": {
      "get": {
        "tags": [
          "Item"
        ],
        "summary": "Gets multiple items by specifying a list of item URIs.",
        "description": "This operation returns an instance of 'IdentifiableObjectDictionary' type.\n\n",
        "operationId": "GetItems",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "itemIds",
            "in": "query",
            "description": "A list of item URIs.",
            "required": true,
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "type": "array"
          },
          {
            "name": "useDynamicVersion",
            "in": "query",
            "description": "Loads a dynamic version (if available for the current user)",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "loadFullItems",
            "in": "query",
            "description": "Determines whether full items or partially loaded items are returned.",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "api-version",
            "in": "path",
            "description": "The version of the API you wish to use.",
            "required": true,
            "type": "string",
            "default": "1.0"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful.",
            "schema": {
              "additionalProperties": {
                "$ref": "#/definitions/IdentifiableObject"
              },
              "type": "object"
            }
          },
          "400": {
            "description": "The request data is invalid."
          },
          "403": {
            "description": "The server understood the request but refuses to authorize it."
          },
          "500": {
            "description": "There was an unexpected error while handling the request."
          }
        }
      },
      "post": {
        "tags": [
          "Item"
        ],
        "summary": "Gets a large number of items by specifying a list of item URIs in the body of the request.",
        "description": "This operation returns an instance of 'IdentifiableObjectDictionary' type.\n\n",
        "operationId": "GetItemsExtended",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "itemIds",
            "in": "body",
            "description": "A list of item URIs.",
            "required": true,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          {
            "name": "useDynamicVersion",
            "in": "query",
            "description": "Loads a dynamic version (if available for the current user)",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "loadFullItems",
            "in": "query",
            "description": "Determines whether full items or partially loaded items are returned.",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "api-version",
            "in": "path",
            "description": "The version of the API you wish to use.",
            "required": true,
            "type": "string",
            "default": "1.0"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful.",
            "schema": {
              "additionalProperties": {
                "$ref": "#/definitions/IdentifiableObject"
              },
              "type": "object"
            }
          },
          "400": {
            "description": "The request data is invalid."
          },
          "403": {
            "description": "The server understood the request but refuses to authorize it."
          },
          "500": {
            "description": "There was an unexpected error while handling the request."
          }
        }
      }
    },
    "/v{api-version}/item/validatePage": {
      "post": {
        "tags": [
          "Item"
        ],
        "summary": "Validates a Page according to the Page Schema that is used.",
        "description": "This operation returns an instance of 'ValidationError' type.\n\n",
        "operationId": "ValidatePage",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "pageModel",
            "in": "body",
            "description": "The Page model.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Page"
            }
          },
          {
            "name": "api-version",
            "in": "path",
            "description": "The version of the API you wish to use.",
            "required": true,
            "type": "string",
            "default": "1.0"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful.",
            "schema": {
              "items": {
                "$ref": "#/definitions/ValidationError"
              },
              "xml": {
                "name": "ValidationError",
                "wrapped": true
              },
              "type": "array"
            }
          },
          "400": {
            "description": "The request data is invalid."
          },
          "403": {
            "description": "The server understood the request but refuses to authorize it."
          },
          "500": {
            "description": "There was an unexpected error while handling the request."
          }
        }
      }
    },
    "/v{api-version}/items": {
      "post": {
        "tags": [
          "Item"
        ],
        "summary": "Creates an object based on a specified request model and saves it to the database. For versioned items, a check-in is performed by default.",
        "description": "This operation returns an instance of 'IdentifiableObject' type, as implemented by one of the following:<ul class=\"model-list\"><li><span>ApprovalStatus</span></li><li><span>Bundle</span></li><li><span>BusinessProcessType</span></li><li><span>Category</span></li><li><span>Component</span></li><li><span>ComponentTemplate</span></li><li><span>Folder</span></li><li><span>Group</span></li><li><span>Keyword</span></li><li><span>MultimediaType</span></li><li><span>Page</span></li><li><span>PageTemplate</span></li><li><span>Publication</span></li><li><span>Schema</span></li><li><span>SearchFolder</span></li><li><span>StructureGroup</span></li><li><span>TargetGroup</span></li><li><span>TargetType</span></li><li><span>TemplateBuildingBlock</span></li><li><span>TridionProcessDefinition</span></li><li><span>User</span></li></ul>\n\n",
        "operationId": "Create",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "requestModel",
            "in": "body",
            "description": "The model to use for the request.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/IdentifiableObject"
            }
          },
          {
            "name": "autoCheckIn",
            "in": "query",
            "description": "Indicates whether to check in the created item.",
            "required": false,
            "type": "boolean",
            "default": true
          },
          {
            "name": "api-version",
            "in": "path",
            "description": "The version of the API you wish to use.",
            "required": true,
            "type": "string",
            "default": "1.0"
          }
        ],
        "responses": {
          "201": {
            "description": "The request has completed and has resulted in one or more new resources being created.",
            "schema": {
              "$ref": "#/definitions/IdentifiableObject"
            }
          },
          "400": {
            "description": "The request data is invalid."
          },
          "403": {
            "description": "The server understood the request but refuses to authorize it."
          },
          "409": {
            "description": "The request could not be completed due to a conflict with the current state of the target resource."
          },
          "500": {
            "description": "There was an unexpected error while handling the request."
          }
        }
      }
    },
    "/v{api-version}/item/defaultModel/{modelType}": {
      "get": {
        "tags": [
          "Item"
        ],
        "summary": "Gets a default model for the specified model type. The returned model can be used for item creation.",
        "description": "This operation returns an instance of 'IdentifiableObject' type, as implemented by one of the following:<ul class=\"model-list\"><li><span>ApprovalStatus</span></li><li><span>Bundle</span></li><li><span>BusinessProcessType</span></li><li><span>Category</span></li><li><span>Component</span></li><li><span>ComponentTemplate</span></li><li><span>Folder</span></li><li><span>Group</span></li><li><span>Keyword</span></li><li><span>MultimediaType</span></li><li><span>Page</span></li><li><span>PageTemplate</span></li><li><span>Publication</span></li><li><span>Schema</span></li><li><span>SearchFolder</span></li><li><span>StructureGroup</span></li><li><span>TargetGroup</span></li><li><span>TargetType</span></li><li><span>TemplateBuildingBlock</span></li><li><span>TridionProcessDefinition</span></li><li><span>User</span></li></ul>\n\n",
        "operationId": "GetDefaultModel",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "modelType",
            "in": "path",
            "description": "The type of data model that will be created.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ModelType"
            },
            "type": "string",
            "enum": [
              "Bundle",
              "SearchFolder",
              "Schema",
              "Page",
              "PageTemplate",
              "Component",
              "ComponentTemplate",
              "Folder",
              "Keyword",
              "StructureGroup",
              "TemplateBuildingBlock",
              "Publication",
              "Category",
              "Group",
              "ProcessDefinition",
              "BusinessProcessType",
              "MultimediaType",
              "TargetType",
              "User",
              "TargetGroup",
              "ApprovalStatus"
            ]
          },
          {
            "name": "containerId",
            "in": "query",
            "description": "The TCM URI of the organizational item to use as a container for the specified Model Type.\r\nA container ID is required for all types except the following: Batch, Publication, PublicationTarget, PublishTransaction, TargetType, MultimediaType, WorkflowType, User, Group, and ApprovalStatus.",
            "required": false,
            "type": "string"
          },
          {
            "name": "api-version",
            "in": "path",
            "description": "The version of the API you wish to use.",
            "required": true,
            "type": "string",
            "default": "1.0"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful.",
            "schema": {
              "$ref": "#/definitions/IdentifiableObject"
            }
          },
          "400": {
            "description": "The request data is invalid."
          },
          "403": {
            "description": "The server understood the request but refuses to authorize it."
          },
          "500": {
            "description": "There was an unexpected error while handling the request."
          }
        }
      }
    },
    "/v{api-version}/items/{escapedItemId}/copy/{escapedDestinationId}": {
      "post": {
        "tags": [
          "Item"
        ],
        "summary": "Copies a RepositoryLocalObject to the specified destination.",
        "description": "This operation returns an instance of 'RepositoryLocalObject' type, as implemented by one of the following:<ul class=\"model-list\"><li><span>Bundle</span></li><li><span>BusinessProcessType</span></li><li><span>Category</span></li><li><span>Component</span></li><li><span>ComponentTemplate</span></li><li><span>ExternalCategory</span></li><li><span>ExternalComponent</span></li><li><span>ExternalContainer</span></li><li><span>ExternalKeyword</span></li><li><span>Folder</span></li><li><span>Keyword</span></li><li><span>Page</span></li><li><span>PageTemplate</span></li><li><span>ResolvedBundle</span></li><li><span>Schema</span></li><li><span>SearchFolder</span></li><li><span>StructureGroup</span></li><li><span>TargetGroup</span></li><li><span>TemplateBuildingBlock</span></li><li><span>TridionProcessDefinition</span></li></ul>\n\n",
        "operationId": "Copy",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "escapedItemId",
            "in": "path",
            "description": "The URI of an item with the colon escaped by replacing it with an underscore. E.g. \"tcm_0-1-1\".",
            "required": true,
            "type": "string"
          },
          {
            "name": "escapedDestinationId",
            "in": "path",
            "description": "The TCM URI of the destination, which can be either an organizational item or a Keyword. Escape the colon by replacing it with an underscore. E.g. \"tcm_1-1-2\"",
            "required": true,
            "type": "string"
          },
          {
            "name": "makeUnique",
            "in": "query",
            "description": "Specifies whether a unique title should be generated if an item with the same title already exists in the destination.",
            "required": false,
            "type": "boolean",
            "default": true
          },
          {
            "name": "api-version",
            "in": "path",
            "description": "The version of the API you wish to use.",
            "required": true,
            "type": "string",
            "default": "1.0"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful.",
            "schema": {
              "$ref": "#/definitions/RepositoryLocalObject"
            }
          },
          "204": {
            "description": "The request was successful and there is no content in the body of the response."
          },
          "400": {
            "description": "The request data is invalid."
          },
          "403": {
            "description": "The server understood the request but refuses to authorize it."
          },
          "409": {
            "description": "The request could not be completed due to a conflict with the current state of the target resource."
          },
          "500": {
            "description": "There was an unexpected error while handling the request."
          }
        }
      }
    },
    "/v{api-version}/items/{escapedItemId}/move/{escapedDestinationId}": {
      "post": {
        "tags": [
          "Item"
        ],
        "summary": "Moves a RepositoryLocalObject from its current location to a new destination.",
        "description": "This operation returns an instance of 'RepositoryLocalObject' type, as implemented by one of the following:<ul class=\"model-list\"><li><span>Bundle</span></li><li><span>BusinessProcessType</span></li><li><span>Category</span></li><li><span>Component</span></li><li><span>ComponentTemplate</span></li><li><span>ExternalCategory</span></li><li><span>ExternalComponent</span></li><li><span>ExternalContainer</span></li><li><span>ExternalKeyword</span></li><li><span>Folder</span></li><li><span>Keyword</span></li><li><span>Page</span></li><li><span>PageTemplate</span></li><li><span>ResolvedBundle</span></li><li><span>Schema</span></li><li><span>SearchFolder</span></li><li><span>StructureGroup</span></li><li><span>TargetGroup</span></li><li><span>TemplateBuildingBlock</span></li><li><span>TridionProcessDefinition</span></li></ul>\n\n",
        "operationId": "Move",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "escapedItemId",
            "in": "path",
            "description": "The URI of an item with the colon escaped by replacing it with an underscore. E.g. \"tcm_0-1-1\".",
            "required": true,
            "type": "string"
          },
          {
            "name": "escapedDestinationId",
            "in": "path",
            "description": "The TCM URI of the destination, which can be either an organizational item or a Keyword. Escape the colon by replacing it with an underscore. E.g. \"tcm_1-1-2\"",
            "required": true,
            "type": "string"
          },
          {
            "name": "api-version",
            "in": "path",
            "description": "The version of the API you wish to use.",
            "required": true,
            "type": "string",
            "default": "1.0"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful.",
            "schema": {
              "$ref": "#/definitions/RepositoryLocalObject"
            }
          },
          "204": {
            "description": "The request was successful and there is no content in the body of the response."
          },
          "400": {
            "description": "The request data is invalid."
          },
          "403": {
            "description": "The server understood the request but refuses to authorize it."
          },
          "409": {
            "description": "The request could not be completed due to a conflict with the current state of the target resource."
          },
          "500": {
            "description": "There was an unexpected error while handling the request."
          }
        }
      }
    },
    "/v{api-version}/item/synchronizeWithSchema": {
      "post": {
        "tags": [
          "Schemas"
        ],
        "summary": "Validates the content and metadata of an item against its current Schema, and as needed, updates the item to synchronize it with the Schema.\r\nThe operation returns the updated item and a list of all actions that were applied to it.",
        "description": "This operation returns an instance of 'SynchronizationResult' type.\n\nUsing this operation will not persist the changes made through synchronization.",
        "operationId": "SynchronizeWithSchema",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "requestModel",
            "in": "body",
            "description": "The model to use for the request.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/IdentifiableObject"
            }
          },
          {
            "name": "api-version",
            "in": "path",
            "description": "The version of the API you wish to use.",
            "required": true,
            "type": "string",
            "default": "1.0"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful.",
            "schema": {
              "$ref": "#/definitions/SynchronizationResult"
            }
          },
          "403": {
            "description": "The server understood the request but refuses to authorize it."
          },
          "500": {
            "description": "There was an unexpected error while handling the request."
          }
        }
      }
    },
    "/v{api-version}/item/convertWebDavUrl": {
      "get": {
        "tags": [
          "Item"
        ],
        "summary": "Constructs an item URI from a WebDav URL, plus optionally, a Context Repository URI and version number.",
        "description": "\n\n",
        "operationId": "ConvertWebDavUrl",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "webDavUrl",
            "in": "query",
            "description": "The WebDavUrl of the item.",
            "required": true,
            "type": "string"
          },
          {
            "name": "contextRepositoryUri",
            "in": "query",
            "description": "The URI of the Publication you want to use instead of the one used in the webDavUrl. Include this if you want the constructed URI to refer to a different context Publication.",
            "required": false,
            "type": "string"
          },
          {
            "name": "version",
            "in": "query",
            "description": "The version of the item.",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "api-version",
            "in": "path",
            "description": "The version of the API you wish to use.",
            "required": true,
            "type": "string",
            "default": "1.0"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful.",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "The request data is invalid."
          },
          "404": {
            "description": "The requested resource doesn't exist."
          },
          "500": {
            "description": "There was an unexpected error while handling the request."
          }
        }
      }
    },
    "/v{api-version}/items/search": {
      "get": {
        "tags": [
          "Item"
        ],
        "summary": "Searches the system for a specified text string.",
        "description": "This operation returns an instance of 'IdentifiableObject' type, as implemented by one of the following:<ul class=\"model-list\"><li><span>ActivityHistory</span></li><li><span>ActivityInstance</span></li><li><span>ApprovalStatus</span></li><li><span>Batch</span></li><li><span>Bundle</span></li><li><span>BusinessProcessType</span></li><li><span>Category</span></li><li><span>Component</span></li><li><span>ComponentTemplate</span></li><li><span>ExternalCategory</span></li><li><span>ExternalComponent</span></li><li><span>ExternalContainer</span></li><li><span>ExternalKeyword</span></li><li><span>Folder</span></li><li><span>Group</span></li><li><span>Keyword</span></li><li><span>MultimediaType</span></li><li><span>Page</span></li><li><span>PageTemplate</span></li><li><span>ProcessHistory</span></li><li><span>ProcessInstance</span></li><li><span>Publication</span></li><li><span>PublishTransaction</span></li><li><span>Schema</span></li><li><span>SearchFolder</span></li><li><span>StructureGroup</span></li><li><span>TargetGroup</span></li><li><span>TargetType</span></li><li><span>TemplateBuildingBlock</span></li><li><span>TridionActivityDefinition</span></li><li><span>TridionProcessDefinition</span></li><li><span>User</span></li><li><span>WorkItem</span></li></ul>\n\n",
        "operationId": "SystemSearch",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "fullTextQuery",
            "in": "query",
            "description": "Input for the full-text query.\r\nThe following characters have special meaning in the query syntax: + - &amp;&amp; || ! ( ) { } [ ] ^ \" ~ * ? : \\\\\r\nTo use any of these characters without their syntactical meaning, to escape them by preceding  the character with a \\\\.",
            "required": false,
            "type": "string"
          },
          {
            "name": "resultLimit",
            "in": "query",
            "description": "The maximum number of search results.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "default": 1000
          },
          {
            "name": "usedKeywordsIds",
            "in": "query",
            "description": "Limits the search results to only items that are classified with the specified keyword IDs.",
            "required": false,
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "type": "array"
          },
          {
            "name": "api-version",
            "in": "path",
            "description": "The version of the API you wish to use.",
            "required": true,
            "type": "string",
            "default": "1.0"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful.",
            "schema": {
              "items": {
                "$ref": "#/definitions/IdentifiableObject"
              },
              "xml": {
                "name": "IdentifiableObject",
                "wrapped": true
              },
              "type": "array"
            }
          },
          "400": {
            "description": "The request data is invalid."
          },
          "500": {
            "description": "There was an unexpected error while handling the request."
          }
        }
      }
    },
    "/v{api-version}/items/{escapedItemId}/search": {
      "get": {
        "tags": [
          "Item"
        ],
        "summary": "Searches within an individual item for a specified text string.",
        "description": "This operation returns an instance of 'IdentifiableObject' type, as implemented by one of the following:<ul class=\"model-list\"><li><span>ActivityHistory</span></li><li><span>ActivityInstance</span></li><li><span>ApprovalStatus</span></li><li><span>Batch</span></li><li><span>Bundle</span></li><li><span>BusinessProcessType</span></li><li><span>Category</span></li><li><span>Component</span></li><li><span>ComponentTemplate</span></li><li><span>ExternalCategory</span></li><li><span>ExternalComponent</span></li><li><span>ExternalContainer</span></li><li><span>ExternalKeyword</span></li><li><span>Folder</span></li><li><span>Group</span></li><li><span>Keyword</span></li><li><span>MultimediaType</span></li><li><span>Page</span></li><li><span>PageTemplate</span></li><li><span>ProcessHistory</span></li><li><span>ProcessInstance</span></li><li><span>Publication</span></li><li><span>PublishTransaction</span></li><li><span>Schema</span></li><li><span>SearchFolder</span></li><li><span>StructureGroup</span></li><li><span>TargetGroup</span></li><li><span>TargetType</span></li><li><span>TemplateBuildingBlock</span></li><li><span>TridionActivityDefinition</span></li><li><span>TridionProcessDefinition</span></li><li><span>User</span></li><li><span>WorkItem</span></li></ul>\n\n",
        "operationId": "SearchInContainer",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "escapedItemId",
            "in": "path",
            "description": "The URI of an item with the colon escaped by replacing it with an underscore. E.g. \"tcm_0-1-1\".",
            "required": true,
            "type": "string"
          },
          {
            "name": "fullTextQuery",
            "in": "query",
            "description": "Input for the full-text query.\r\nThe following characters have special meaning in the query syntax: + - &amp;&amp; || ! ( ) { } [ ] ^ \" ~ * ? : \\\\\r\nTo use any of these characters without their syntactical meaning, to escape them by preceding  the character with a \\\\.",
            "required": false,
            "type": "string"
          },
          {
            "name": "resultLimit",
            "in": "query",
            "description": "The maximum number of search results.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "default": 1000
          },
          {
            "name": "api-version",
            "in": "path",
            "description": "The version of the API you wish to use.",
            "required": true,
            "type": "string",
            "default": "1.0"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful.",
            "schema": {
              "items": {
                "$ref": "#/definitions/IdentifiableObject"
              },
              "xml": {
                "name": "IdentifiableObject",
                "wrapped": true
              },
              "type": "array"
            }
          },
          "400": {
            "description": "The request data is invalid."
          },
          "404": {
            "description": "The requested resource doesn't exist."
          },
          "500": {
            "description": "There was an unexpected error while handling the request."
          }
        }
      }
    },
    "/v{api-version}/publicationTypes": {
      "get": {
        "tags": [
          "Lists"
        ],
        "summary": "Gets a list of Publication Types.",
        "description": "This operation returns an instance of 'PublicationType' type.\n\n",
        "operationId": "GetPublicationTypes",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "api-version",
            "in": "path",
            "description": "The version of the API you wish to use.",
            "required": true,
            "type": "string",
            "default": "1.0"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful.",
            "schema": {
              "items": {
                "$ref": "#/definitions/PublicationType"
              },
              "xml": {
                "name": "PublicationType",
                "wrapped": true
              },
              "type": "array"
            }
          },
          "500": {
            "description": "There was an unexpected error while handling the request."
          }
        }
      }
    },
    "/v{api-version}/items/{escapedPublicationId}/categories": {
      "get": {
        "tags": [
          "Lists"
        ],
        "summary": "Gets a list of Categories related to the specified Publication.",
        "description": "This operation returns an instance of 'Category' type or one of the following inherited types:<ul class=\"model-list\"><li><span>ExternalCategory</span></li></ul>\n\n",
        "operationId": "GetCategories",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "escapedPublicationId",
            "in": "path",
            "description": "The TCM URI of a Publication with the colon escaped by replacing it with an underscore. E.g. \"tcm_0-1-1\".",
            "required": true,
            "type": "string"
          },
          {
            "name": "api-version",
            "in": "path",
            "description": "The version of the API you wish to use.",
            "required": true,
            "type": "string",
            "default": "1.0"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful.",
            "schema": {
              "items": {
                "$ref": "#/definitions/Category"
              },
              "xml": {
                "name": "Category",
                "wrapped": true
              },
              "type": "array"
            }
          },
          "400": {
            "description": "The request data is invalid."
          },
          "403": {
            "description": "The server understood the request but refuses to authorize it."
          },
          "404": {
            "description": "The requested resource doesn't exist."
          },
          "500": {
            "description": "There was an unexpected error while handling the request."
          }
        }
      }
    },
    "/v{api-version}/items/{escapedItemId}/keywords": {
      "get": {
        "tags": [
          "Lists"
        ],
        "summary": "Gets a list of Keywords contained in the specified Category or parent Keyword.",
        "description": "This operation returns an instance of 'Keyword' type or one of the following inherited types:<ul class=\"model-list\"><li><span>ExternalKeyword</span></li></ul>\n\n",
        "operationId": "GetKeywords",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "escapedItemId",
            "in": "path",
            "description": "The URI of an item with the colon escaped by replacing it with an underscore. E.g. \"tcm_0-1-1\".",
            "required": true,
            "type": "string"
          },
          {
            "name": "api-version",
            "in": "path",
            "description": "The version of the API you wish to use.",
            "required": true,
            "type": "string",
            "default": "1.0"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful.",
            "schema": {
              "items": {
                "$ref": "#/definitions/Keyword"
              },
              "xml": {
                "name": "Keyword",
                "wrapped": true
              },
              "type": "array"
            }
          },
          "400": {
            "description": "The request data is invalid."
          },
          "403": {
            "description": "The server understood the request but refuses to authorize it."
          },
          "404": {
            "description": "The requested resource doesn't exist."
          },
          "500": {
            "description": "There was an unexpected error while handling the request."
          }
        }
      }
    },
    "/v{api-version}/items/{escapedCategoryId}/taxonomy": {
      "get": {
        "tags": [
          "Lists"
        ],
        "summary": "Gets a full taxonomy for a specified Category.",
        "description": "This operation returns an instance of 'TaxonomyNode' type.\n\n",
        "operationId": "GetTaxonomy",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "escapedCategoryId",
            "in": "path",
            "description": "The URI of a Category where the URI can be either a TCM URI or an ECL URI (for an external taxonomy).\r\nEscape the colon by replacing it with an underscore. E.g. \"tcm_1-1-512\"",
            "required": true,
            "type": "string"
          },
          {
            "name": "includeAlternativeLabels",
            "in": "query",
            "description": "Where the Category represents an external taxonomy, set to \"True\" to include alternative labels for taxonomy concepts.",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "maxNodes",
            "in": "query",
            "description": "The maximum number of nodes the tree is allowed to contain. If the tree contains more, an HTTP 400 error will be returned. Defaults to a configured value (maxTaxonomyNodes).",
            "required": false,
            "type": "integer",
            "format": "int32",
            "default": 0
          },
          {
            "name": "api-version",
            "in": "path",
            "description": "The version of the API you wish to use.",
            "required": true,
            "type": "string",
            "default": "1.0"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful.",
            "schema": {
              "$ref": "#/definitions/TaxonomyNode"
            }
          },
          "400": {
            "description": "The request data is invalid."
          },
          "403": {
            "description": "The server understood the request but refuses to authorize it."
          },
          "404": {
            "description": "The requested resource doesn't exist."
          },
          "500": {
            "description": "There was an unexpected error while handling the request."
          }
        }
      }
    },
    "/v{api-version}/items/{escapedItemId}/uses": {
      "get": {
        "tags": [
          "Lists"
        ],
        "summary": "Gets a list of items that are used by a specified item.",
        "description": "This operation returns an instance of 'IdentifiableObject' type, as implemented by one of the following:<ul class=\"model-list\"><li><span>ActivityHistory</span></li><li><span>ApprovalStatus</span></li><li><span>Bundle</span></li><li><span>BusinessProcessType</span></li><li><span>Category</span></li><li><span>Component</span></li><li><span>ComponentTemplate</span></li><li><span>ExternalCategory</span></li><li><span>ExternalComponent</span></li><li><span>ExternalKeyword</span></li><li><span>Folder</span></li><li><span>Keyword</span></li><li><span>MultimediaType</span></li><li><span>Page</span></li><li><span>PageTemplate</span></li><li><span>Publication</span></li><li><span>Schema</span></li><li><span>SearchFolder</span></li><li><span>StructureGroup</span></li><li><span>TargetGroup</span></li><li><span>TargetType</span></li><li><span>TemplateBuildingBlock</span></li><li><span>TridionProcessDefinition</span></li></ul>\n\n",
        "operationId": "GetUses",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "escapedItemId",
            "in": "path",
            "description": "The URI of an item with the colon escaped by replacing it with an underscore. E.g. \"tcm_0-1-1\".",
            "required": true,
            "type": "string"
          },
          {
            "name": "includeBlueprintParentItem",
            "in": "query",
            "description": "Set to true to include the parent item of the specified item or false to exclude the parent.",
            "required": false,
            "type": "boolean",
            "default": true
          },
          {
            "name": "useDynamicVersion",
            "in": "query",
            "description": "Loads a dynamic version (if available for the current user)",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "api-version",
            "in": "path",
            "description": "The version of the API you wish to use.",
            "required": true,
            "type": "string",
            "default": "1.0"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful.",
            "schema": {
              "items": {
                "$ref": "#/definitions/IdentifiableObject"
              },
              "xml": {
                "name": "IdentifiableObject",
                "wrapped": true
              },
              "type": "array"
            }
          },
          "400": {
            "description": "The request data is invalid."
          },
          "403": {
            "description": "The server understood the request but refuses to authorize it."
          },
          "404": {
            "description": "The requested resource doesn't exist."
          },
          "500": {
            "description": "There was an unexpected error while handling the request."
          }
        }
      }
    },
    "/v{api-version}/items/{escapedItemId}/usedBy": {
      "get": {
        "tags": [
          "Lists"
        ],
        "summary": "Gets a list of items that use a specified item.",
        "description": "This operation returns an instance of 'IdentifiableObject' type, as implemented by one of the following:<ul class=\"model-list\"><li><span>ActivityHistory</span></li><li><span>ApprovalStatus</span></li><li><span>Bundle</span></li><li><span>BusinessProcessType</span></li><li><span>Category</span></li><li><span>Component</span></li><li><span>ComponentTemplate</span></li><li><span>ExternalCategory</span></li><li><span>ExternalComponent</span></li><li><span>ExternalKeyword</span></li><li><span>Folder</span></li><li><span>Keyword</span></li><li><span>MultimediaType</span></li><li><span>Page</span></li><li><span>PageTemplate</span></li><li><span>Publication</span></li><li><span>Schema</span></li><li><span>SearchFolder</span></li><li><span>StructureGroup</span></li><li><span>TargetGroup</span></li><li><span>TargetType</span></li><li><span>TemplateBuildingBlock</span></li><li><span>TridionProcessDefinition</span></li></ul>\n\n",
        "operationId": "GetUsedBy",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "escapedItemId",
            "in": "path",
            "description": "The URI of an item with the colon escaped by replacing it with an underscore. E.g. \"tcm_0-1-1\".",
            "required": true,
            "type": "string"
          },
          {
            "name": "onlyLatestVersions",
            "in": "query",
            "description": "Set to true to include only the latest versions of the returned items or to false to include all versions.",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "useDynamicVersion",
            "in": "query",
            "description": "Loads a dynamic version (if available for the current user)",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "api-version",
            "in": "path",
            "description": "The version of the API you wish to use.",
            "required": true,
            "type": "string",
            "default": "1.0"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful.",
            "schema": {
              "items": {
                "$ref": "#/definitions/IdentifiableObject"
              },
              "xml": {
                "name": "IdentifiableObject",
                "wrapped": true
              },
              "type": "array"
            }
          },
          "400": {
            "description": "The request data is invalid."
          },
          "403": {
            "description": "The server understood the request but refuses to authorize it."
          },
          "404": {
            "description": "The requested resource doesn't exist."
          },
          "500": {
            "description": "There was an unexpected error while handling the request."
          }
        }
      }
    },
    "/v{api-version}/items/{escapedPublicationId}/processDefinitions": {
      "get": {
        "tags": [
          "Workflow"
        ],
        "summary": "Gets a list of Process Definitions for a specific context Repository.",
        "description": "This operation returns an instance of 'ProcessDefinition' type, as implemented by one of the following:<ul class=\"model-list\"><li><span>TridionProcessDefinition</span></li></ul>\n\n",
        "operationId": "GetProcessDefinitions",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "escapedPublicationId",
            "in": "path",
            "description": "The TCM URI of a Publication with the colon escaped by replacing it with an underscore. E.g. \"tcm_0-1-1\".",
            "required": true,
            "type": "string"
          },
          {
            "name": "api-version",
            "in": "path",
            "description": "The version of the API you wish to use.",
            "required": true,
            "type": "string",
            "default": "1.0"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful.",
            "schema": {
              "items": {
                "$ref": "#/definitions/ProcessDefinition"
              },
              "xml": {
                "name": "ProcessDefinition",
                "wrapped": true
              },
              "type": "array"
            }
          },
          "400": {
            "description": "The request data is invalid."
          },
          "403": {
            "description": "The server understood the request but refuses to authorize it."
          },
          "404": {
            "description": "The requested resource doesn't exist."
          },
          "500": {
            "description": "There was an unexpected error while handling the request."
          }
        }
      }
    },
    "/v{api-version}/publications": {
      "get": {
        "tags": [
          "Lists"
        ],
        "summary": "Gets a list of all Publications.",
        "description": "This operation returns an instance of 'Publication' type.\n\nThis operation returns a limited set of properties compared to other list operations. To get a full set of properties, read each Publication separately.",
        "operationId": "GetPublications",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "api-version",
            "in": "path",
            "description": "The version of the API you wish to use.",
            "required": true,
            "type": "string",
            "default": "1.0"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful.",
            "schema": {
              "items": {
                "$ref": "#/definitions/Publication"
              },
              "xml": {
                "name": "Publication",
                "wrapped": true
              },
              "type": "array"
            }
          },
          "500": {
            "description": "There was an unexpected error while handling the request."
          }
        }
      }
    },
    "/v{api-version}/items/{escapedPublicationId}/publishableChildPublications": {
      "get": {
        "tags": [
          "Lists"
        ],
        "summary": "Gets a list of all child Publications of the specified Parent publication, where the Business Process Type settings are the same as those of the parent Publication.",
        "description": "This operation returns an instance of 'Publication' type.\n\n",
        "operationId": "GetPublishableChildPublications",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "escapedPublicationId",
            "in": "path",
            "description": "The TCM URI of a Publication with the colon escaped by replacing it with an underscore. E.g. \"tcm_0-1-1\".",
            "required": true,
            "type": "string"
          },
          {
            "name": "api-version",
            "in": "path",
            "description": "The version of the API you wish to use.",
            "required": true,
            "type": "string",
            "default": "1.0"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful.",
            "schema": {
              "items": {
                "$ref": "#/definitions/Publication"
              },
              "xml": {
                "name": "Publication",
                "wrapped": true
              },
              "type": "array"
            }
          },
          "400": {
            "description": "The request data is invalid."
          },
          "403": {
            "description": "The server understood the request but refuses to authorize it."
          },
          "404": {
            "description": "The requested resource doesn't exist."
          },
          "500": {
            "description": "There was an unexpected error while handling the request."
          }
        }
      }
    },
    "/v{api-version}/checkedOutItems": {
      "get": {
        "tags": [
          "Lists"
        ],
        "summary": "Gets a list of items that are checked out.",
        "description": "This operation returns an instance of 'VersionedItem' type, as implemented by one of the following:<ul class=\"model-list\"><li><span>Component</span></li><li><span>ComponentTemplate</span></li><li><span>ExternalComponent</span></li><li><span>Page</span></li><li><span>PageTemplate</span></li><li><span>Schema</span></li><li><span>TemplateBuildingBlock</span></li></ul>\n\n",
        "operationId": "GetCheckedOutItems",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "description": "The TCM URI of a User.\r\nSpecify to get only items checked out by a specific user. If not specified, the operation will get all items that are checked out.\r\nNote that Administrators can get items checked out by all users. Other users, however, can typically retrieve only the items that are checked out by themselves.",
            "required": false,
            "type": "string"
          },
          {
            "name": "maxResults",
            "in": "query",
            "description": "An integer value to limit the number of items returned in the list. Specify a positive value as the limit or -1 for no limit. Setting the value to zero will return an empty list.",
            "required": false,
            "type": "integer",
            "format": "int32",
            "default": 500
          },
          {
            "name": "api-version",
            "in": "path",
            "description": "The version of the API you wish to use.",
            "required": true,
            "type": "string",
            "default": "1.0"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful.",
            "schema": {
              "items": {
                "$ref": "#/definitions/VersionedItem"
              },
              "xml": {
                "name": "VersionedItem",
                "wrapped": true
              },
              "type": "array"
            }
          },
          "400": {
            "description": "The request data is invalid."
          },
          "404": {
            "description": "The requested resource doesn't exist."
          },
          "500": {
            "description": "There was an unexpected error while handling the request."
          }
        }
      }
    },
    "/v{api-version}/items/{escapedItemId}/organizationalStructureTree": {
      "get": {
        "tags": [
          "Lists"
        ],
        "summary": "Gets an (expanded) tree representation of all the items in the path of a RepositoryLocalObject.",
        "description": "This operation returns an instance of 'TreeNode' type.\n\n",
        "operationId": "GetOrganizationalStructureTree",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "escapedItemId",
            "in": "path",
            "description": "The URI of an item with the colon escaped by replacing it with an underscore. E.g. \"tcm_0-1-1\".",
            "required": true,
            "type": "string"
          },
          {
            "name": "includeAllPublications",
            "in": "query",
            "description": "Include all publications (and not just the context publication).",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "includeChildrenOnEveryLevel",
            "in": "query",
            "description": "Include children of all items in the path.",
            "required": false,
            "type": "boolean",
            "default": true
          },
          {
            "name": "groupCategoriesAndKeywords",
            "in": "query",
            "description": "Group categories and keywords in a single treenode.",
            "required": false,
            "type": "boolean",
            "default": true
          },
          {
            "name": "groupBusinessProcessTypes",
            "in": "query",
            "description": "Group all business process types in a single treenode.",
            "required": false,
            "type": "boolean",
            "default": true
          },
          {
            "name": "useDynamicVersion",
            "in": "query",
            "description": "Loads a dynamic version (if available for the current user)",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "api-version",
            "in": "path",
            "description": "The version of the API you wish to use.",
            "required": true,
            "type": "string",
            "default": "1.0"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful.",
            "schema": {
              "$ref": "#/definitions/TreeNode"
            }
          },
          "400": {
            "description": "The request data is invalid."
          },
          "403": {
            "description": "The server understood the request but refuses to authorize it."
          },
          "404": {
            "description": "The requested resource doesn't exist."
          },
          "500": {
            "description": "There was an unexpected error while handling the request."
          }
        },
        "deprecated": true
      }
    },
    "/v{api-version}/items/{escapedBusinessProcessTypeId}/publishableTargetTypes": {
      "get": {
        "tags": [
          "Lists"
        ],
        "summary": "Gets a list of Target Types for a specified Business Process Type.",
        "description": "This operation returns an instance of 'TargetType' type.\n\n",
        "operationId": "GetPublishableTargetTypes",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "escapedBusinessProcessTypeId",
            "in": "path",
            "description": "The TCM URI of a Business Process Type with the colon escaped by replacing it with an underscore. E.g. \"tcm_1-1-4096\"",
            "required": true,
            "type": "string"
          },
          {
            "name": "api-version",
            "in": "path",
            "description": "The version of the API you wish to use.",
            "required": true,
            "type": "string",
            "default": "1.0"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful.",
            "schema": {
              "items": {
                "$ref": "#/definitions/TargetType"
              },
              "xml": {
                "name": "TargetType",
                "wrapped": true
              },
              "type": "array"
            }
          },
          "400": {
            "description": "The request data is invalid."
          },
          "403": {
            "description": "The server understood the request but refuses to authorize it."
          },
          "404": {
            "description": "The requested resource doesn't exist."
          },
          "500": {
            "description": "There was an unexpected error while handling the request."
          }
        }
      }
    },
    "/v{api-version}/items/{escapedOrgItemId}/items": {
      "get": {
        "tags": [
          "OrganizationalItems"
        ],
        "summary": "Gets a list of child items of a specified organizational item.",
        "description": "This operation returns an instance of 'RepositoryLocalObject' type, as implemented by one of the following:<ul class=\"model-list\"><li><span>Bundle</span></li><li><span>BusinessProcessType</span></li><li><span>Category</span></li><li><span>Component</span></li><li><span>ComponentTemplate</span></li><li><span>ExternalCategory</span></li><li><span>ExternalComponent</span></li><li><span>ExternalContainer</span></li><li><span>ExternalKeyword</span></li><li><span>Folder</span></li><li><span>Keyword</span></li><li><span>Page</span></li><li><span>PageTemplate</span></li><li><span>ResolvedBundle</span></li><li><span>Schema</span></li><li><span>SearchFolder</span></li><li><span>StructureGroup</span></li><li><span>TargetGroup</span></li><li><span>TemplateBuildingBlock</span></li></ul>\n\n",
        "operationId": "GetItemsFromContainer",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "escapedOrgItemId",
            "in": "path",
            "description": "The TCM URI of an organizational item, such as a Bundle, Category, Folder, Virtual folder, or Structure Group. Escape the colon by replacing it with an underscore. E.g. \"tcm_1-1-2\"",
            "required": true,
            "type": "string"
          },
          {
            "name": "useDynamicVersion",
            "in": "query",
            "description": "Loads a dynamic version (if available for the current user)",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "rloItemTypes",
            "in": "query",
            "description": "The item types of all repository-local objects that you want to include in the response.",
            "required": false,
            "items": {
              "$ref": "#/definitions/RLOItemType",
              "type": "string"
            },
            "collectionFormat": "multi",
            "type": "array"
          },
          {
            "name": "api-version",
            "in": "path",
            "description": "The version of the API you wish to use.",
            "required": true,
            "type": "string",
            "default": "1.0"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful.",
            "schema": {
              "items": {
                "$ref": "#/definitions/RepositoryLocalObject"
              },
              "xml": {
                "name": "RepositoryLocalObject",
                "wrapped": true
              },
              "type": "array"
            }
          },
          "400": {
            "description": "The request data is invalid."
          },
          "403": {
            "description": "The server understood the request but refuses to authorize it."
          },
          "404": {
            "description": "The requested resource doesn't exist."
          },
          "500": {
            "description": "There was an unexpected error while handling the request."
          }
        }
      }
    },
    "/v{api-version}/items/{escapedItemId}/inBundles": {
      "get": {
        "tags": [
          "OrganizationalItems"
        ],
        "summary": "Gets a list of Bundles that contain a specified item.",
        "description": "This operation returns an instance of 'Bundle' type.\n\n",
        "operationId": "GetInBundles",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "escapedItemId",
            "in": "path",
            "description": "The URI of an item with the colon escaped by replacing it with an underscore. E.g. \"tcm_0-1-1\".",
            "required": true,
            "type": "string"
          },
          {
            "name": "onlySpecifiedBluePrintVariant",
            "in": "query",
            "description": "Set to true to limit results to Bundles that contain only the specified variant of the item (same exact URI) and no other variants from the BluePrint. By default, a value of false will include Bundles that contain any variant of the specified item.",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "suppressLocalCopies",
            "in": "query",
            "description": "Set to true to exclude from the results any Bundle that is a local copy in the BluePrint. By default, a value of false will include all Bundle variants that contain the specified item.",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "api-version",
            "in": "path",
            "description": "The version of the API you wish to use.",
            "required": true,
            "type": "string",
            "default": "1.0"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful.",
            "schema": {
              "items": {
                "$ref": "#/definitions/Bundle"
              },
              "xml": {
                "name": "Bundle",
                "wrapped": true
              },
              "type": "array"
            }
          },
          "400": {
            "description": "The request data is invalid."
          },
          "403": {
            "description": "The server understood the request but refuses to authorize it."
          },
          "404": {
            "description": "The requested resource doesn't exist."
          },
          "500": {
            "description": "There was an unexpected error while handling the request."
          }
        }
      }
    },
    "/v{api-version}/items/{escapedPublicationId}/pageTemplateLinks": {
      "get": {
        "tags": [
          "Publication"
        ],
        "summary": "Gets a list of all Page Template links contained within a specified Publication.",
        "description": "This operation returns an instance of 'Link' type.\n\n",
        "operationId": "GetPageTemplateLinks",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "escapedPublicationId",
            "in": "path",
            "description": "The TCM URI of a Publication with the colon escaped by replacing it with an underscore. E.g. \"tcm_0-1-1\".",
            "required": true,
            "type": "string"
          },
          {
            "name": "api-version",
            "in": "path",
            "description": "The version of the API you wish to use.",
            "required": true,
            "type": "string",
            "default": "1.0"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful.",
            "schema": {
              "items": {
                "$ref": "#/definitions/Link"
              },
              "xml": {
                "name": "Link",
                "wrapped": true
              },
              "type": "array"
            }
          },
          "400": {
            "description": "The request data is invalid."
          },
          "403": {
            "description": "The server understood the request but refuses to authorize it."
          },
          "404": {
            "description": "The requested resource doesn't exist."
          },
          "500": {
            "description": "There was an unexpected error while handling the request."
          }
        }
      }
    },
    "/v{api-version}/items/{escapedPublicationId}/schemaLinks": {
      "get": {
        "tags": [
          "Publication"
        ],
        "summary": "Gets a list of all Schema links contained within a specified Publication.",
        "description": "This operation returns an instance of 'Link' type.\n\n",
        "operationId": "GetSchemaLinks",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "escapedPublicationId",
            "in": "path",
            "description": "The TCM URI of a Publication with the colon escaped by replacing it with an underscore. E.g. \"tcm_0-1-1\".",
            "required": true,
            "type": "string"
          },
          {
            "name": "schemaPurpose",
            "in": "query",
            "description": "The types of Schemas to include in the results list. You must select at least one.",
            "required": true,
            "items": {
              "$ref": "#/definitions/SchemaPurpose",
              "type": "string"
            },
            "collectionFormat": "multi",
            "type": "array"
          },
          {
            "name": "api-version",
            "in": "path",
            "description": "The version of the API you wish to use.",
            "required": true,
            "type": "string",
            "default": "1.0"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful.",
            "schema": {
              "items": {
                "$ref": "#/definitions/Link"
              },
              "xml": {
                "name": "Link",
                "wrapped": true
              },
              "type": "array"
            }
          },
          "400": {
            "description": "The request data is invalid."
          },
          "403": {
            "description": "The server understood the request but refuses to authorize it."
          },
          "404": {
            "description": "The requested resource doesn't exist."
          },
          "500": {
            "description": "There was an unexpected error while handling the request."
          }
        }
      }
    },
    "/v{api-version}/items/publish": {
      "post": {
        "tags": [
          "Publishing"
        ],
        "summary": "Publishes items according to the specified instructions.",
        "description": "This operation returns an instance of 'PublishTransactionsCreationResult' type.\n\n",
        "operationId": "Publish",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "requestModel",
            "in": "body",
            "description": "The model to use for the request.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PublishRequest"
            }
          },
          {
            "name": "api-version",
            "in": "path",
            "description": "The version of the API you wish to use.",
            "required": true,
            "type": "string",
            "default": "1.0"
          }
        ],
        "responses": {
          "202": {
            "description": "The request has been accepted for processing, but the processing has not been completed.",
            "schema": {
              "$ref": "#/definitions/PublishTransactionsCreationResult"
            }
          },
          "400": {
            "description": "The request data is invalid."
          },
          "403": {
            "description": "The server understood the request but refuses to authorize it."
          },
          "404": {
            "description": "The requested resource doesn't exist."
          },
          "500": {
            "description": "There was an unexpected error while handling the request."
          }
        }
      }
    },
    "/v{api-version}/items/unpublish": {
      "post": {
        "tags": [
          "Publishing"
        ],
        "summary": "Unpublishes items according to the specified instructions.",
        "description": "This operation returns an instance of 'PublishTransactionsCreationResult' type.\n\n",
        "operationId": "Unpublish",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "requestModel",
            "in": "body",
            "description": "The model to use for the request.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UnPublishRequest"
            }
          },
          {
            "name": "api-version",
            "in": "path",
            "description": "The version of the API you wish to use.",
            "required": true,
            "type": "string",
            "default": "1.0"
          }
        ],
        "responses": {
          "202": {
            "description": "The request has been accepted for processing, but the processing has not been completed.",
            "schema": {
              "$ref": "#/definitions/PublishTransactionsCreationResult"
            }
          },
          "400": {
            "description": "The request data is invalid."
          },
          "403": {
            "description": "The server understood the request but refuses to authorize it."
          },
          "404": {
            "description": "The requested resource doesn't exist."
          },
          "500": {
            "description": "There was an unexpected error while handling the request."
          }
        }
      }
    },
    "/v{api-version}/items/itemsToPublish": {
      "post": {
        "tags": [
          "Publishing"
        ],
        "summary": "Gets a list of items that will be published when executing the specified instructions.",
        "description": "This operation returns an instance of 'ResolvedItem' type.\n\n",
        "operationId": "GetItemsToPublish",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "requestModel",
            "in": "body",
            "description": "The model to use for the request.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PublishRequest"
            }
          },
          {
            "name": "api-version",
            "in": "path",
            "description": "The version of the API you wish to use.",
            "required": true,
            "type": "string",
            "default": "1.0"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful.",
            "schema": {
              "items": {
                "$ref": "#/definitions/ResolvedItem"
              },
              "xml": {
                "name": "ResolvedItem",
                "wrapped": true
              },
              "type": "array"
            }
          },
          "400": {
            "description": "The request data is invalid."
          },
          "404": {
            "description": "The requested resource doesn't exist."
          },
          "500": {
            "description": "There was an unexpected error while handling the request."
          }
        }
      }
    },
    "/v{api-version}/items/itemsToUnpublish": {
      "post": {
        "tags": [
          "Publishing"
        ],
        "summary": "Gets a list of items that will be unpublished when executing the specified instructions.",
        "description": "This operation returns an instance of 'ResolvedItem' type.\n\n",
        "operationId": "GetItemsToUnpublish",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "requestModel",
            "in": "body",
            "description": "The model to use for the request.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UnPublishRequest"
            }
          },
          {
            "name": "api-version",
            "in": "path",
            "description": "The version of the API you wish to use.",
            "required": true,
            "type": "string",
            "default": "1.0"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful.",
            "schema": {
              "items": {
                "$ref": "#/definitions/ResolvedItem"
              },
              "xml": {
                "name": "ResolvedItem",
                "wrapped": true
              },
              "type": "array"
            }
          },
          "400": {
            "description": "The request data is invalid."
          },
          "404": {
            "description": "The requested resource doesn't exist."
          },
          "500": {
            "description": "There was an unexpected error while handling the request."
          }
        }
      }
    },
    "/v{api-version}/items/{escapedItemId}/publishedTo": {
      "get": {
        "tags": [
          "Publishing"
        ],
        "summary": "Gets a summary of all publishing targets for a specified item.",
        "description": "This operation returns an instance of 'PublishInfo' type.\n\n",
        "operationId": "GetPublishedTo",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "escapedItemId",
            "in": "path",
            "description": "The URI of an item with the colon escaped by replacing it with an underscore. E.g. \"tcm_0-1-1\".",
            "required": true,
            "type": "string"
          },
          {
            "name": "api-version",
            "in": "path",
            "description": "The version of the API you wish to use.",
            "required": true,
            "type": "string",
            "default": "1.0"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful.",
            "schema": {
              "items": {
                "$ref": "#/definitions/PublishInfo"
              },
              "xml": {
                "name": "PublishInfo",
                "wrapped": true
              },
              "type": "array"
            }
          },
          "400": {
            "description": "The request data is invalid."
          },
          "403": {
            "description": "The server understood the request but refuses to authorize it."
          },
          "404": {
            "description": "The requested resource doesn't exist."
          },
          "500": {
            "description": "There was an unexpected error while handling the request."
          }
        }
      }
    },
    "/v{api-version}/items/{escapedItemId}/isPublished": {
      "get": {
        "tags": [
          "Publishing"
        ],
        "summary": "Indicates whether a specified item is published (true) or not (false).",
        "description": "\n\n",
        "operationId": "IsPublished",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "escapedItemId",
            "in": "path",
            "description": "The URI of an item with the colon escaped by replacing it with an underscore. E.g. \"tcm_0-1-1\".",
            "required": true,
            "type": "string"
          },
          {
            "name": "isPublishedInContext",
            "in": "query",
            "description": "Controls whether to return \"true\" (item is published) when the item is published in the context Publication only. Set to \"true\" to consider only publishing within the context Publication or to \"false\" to consider publishing within any Publication.",
            "required": true,
            "type": "boolean"
          },
          {
            "name": "targetIdOrPurpose",
            "in": "query",
            "description": "Indicates a Target Type or Purpose as a limit for the query. If you enter a value, the query will return \"true\" only if the item is published at least once to that specific Target Type or Purpose. If you leave it blank, the query will return \"true\" if the item is published to at least one target regardless of the Target Type or Purpose.",
            "required": false,
            "type": "string"
          },
          {
            "name": "api-version",
            "in": "path",
            "description": "The version of the API you wish to use.",
            "required": true,
            "type": "string",
            "default": "1.0"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully published",
            "schema": {
              "type": "boolean"
            }
          },
          "400": {
            "description": "The request data is invalid."
          },
          "403": {
            "description": "The server understood the request but refuses to authorize it."
          },
          "404": {
            "description": "The requested resource doesn't exist."
          },
          "500": {
            "description": "There was an unexpected error while handling the request."
          }
        }
      }
    },
    "/v{api-version}/publishing/transactions": {
      "get": {
        "tags": [
          "Publishing"
        ],
        "summary": "Gets a list of all publishing transactions.",
        "description": "This operation returns an instance of 'PublishTransaction' type.\n\n",
        "operationId": "GetPublishTransactions",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "description": "The TCM URI of the user who initiated the translation.",
            "required": false,
            "type": "string"
          },
          {
            "name": "publicationId",
            "in": "query",
            "description": "The TCM URI of a Publication.",
            "required": false,
            "type": "string"
          },
          {
            "name": "targetTypeId",
            "in": "query",
            "description": "The TCM URI of a publishing Target Type.",
            "required": false,
            "type": "string"
          },
          {
            "name": "startDate",
            "in": "query",
            "description": "A specific start date and time (in ISO 8601 format) for publishing transactions to include in the list.",
            "required": false,
            "x-example": "1970-01-01T00:00:00Z",
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "A specific end date and time (in ISO 8601 format) for publishing transactions to include in the list.",
            "required": false,
            "x-example": "1970-01-01T00:00:00Z",
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "api-version",
            "in": "path",
            "description": "The version of the API you wish to use.",
            "required": true,
            "type": "string",
            "default": "1.0"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful.",
            "schema": {
              "items": {
                "$ref": "#/definitions/PublishTransaction"
              },
              "xml": {
                "name": "PublishTransaction",
                "wrapped": true
              },
              "type": "array"
            }
          },
          "400": {
            "description": "The request data is invalid."
          },
          "403": {
            "description": "The server understood the request but refuses to authorize it."
          },
          "500": {
            "description": "There was an unexpected error while handling the request."
          }
        }
      }
    },
    "/v{api-version}/items/{escapedPageId}/publishUrls": {
      "get": {
        "tags": [
          "Publishing"
        ],
        "summary": "Gets the URL where an item is published.",
        "description": "This operation returns an instance of 'PublishUrlInfo' type.\n\n",
        "operationId": "GetPublishUrls",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "escapedPageId",
            "in": "path",
            "description": "The TCM URI of a Page with the colon escaped by replacing it with an underscore. E.g. \"tcm_1-1-7\".",
            "required": true,
            "type": "string"
          },
          {
            "name": "api-version",
            "in": "path",
            "description": "The version of the API you wish to use.",
            "required": true,
            "type": "string",
            "default": "1.0"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful.",
            "schema": {
              "items": {
                "$ref": "#/definitions/PublishUrlInfo"
              },
              "xml": {
                "name": "PublishUrlInfo",
                "wrapped": true
              },
              "type": "array"
            }
          },
          "400": {
            "description": "The request data is invalid."
          },
          "403": {
            "description": "The server understood the request but refuses to authorize it."
          },
          "404": {
            "description": "The requested resource doesn't exist."
          },
          "500": {
            "description": "There was an unexpected error while handling the request."
          }
        }
      }
    },
    "/v{api-version}/businessProcessTypes": {
      "get": {
        "tags": [
          "Publishing"
        ],
        "summary": "Gets a list of Business Process Types linked to a specified Topology Type.",
        "description": "This operation returns an instance of 'Link' type.\n\n",
        "operationId": "GetBusinessProcessTypes",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "topologyTypeId",
            "in": "query",
            "description": "The ID of the Topology Type.",
            "required": true,
            "type": "string"
          },
          {
            "name": "api-version",
            "in": "path",
            "description": "The version of the API you wish to use.",
            "required": true,
            "type": "string",
            "default": "1.0"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful.",
            "schema": {
              "items": {
                "$ref": "#/definitions/Link"
              },
              "xml": {
                "name": "Link",
                "wrapped": true
              },
              "type": "array"
            }
          },
          "400": {
            "description": "The request data is invalid."
          },
          "500": {
            "description": "There was an unexpected error while handling the request."
          }
        }
      }
    },
    "/v{api-version}/system/publishSourceByUrl": {
      "get": {
        "tags": [
          "Publishing"
        ],
        "summary": "Gets information about the source from which content was published using the published URL.",
        "description": "This operation returns an instance of 'PublishSource' type.\n\n",
        "operationId": "GetPublishSourceByUrl",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "url",
            "in": "query",
            "description": "The URL to which content was published.",
            "required": true,
            "type": "string"
          },
          {
            "name": "api-version",
            "in": "path",
            "description": "The version of the API you wish to use.",
            "required": true,
            "type": "string",
            "default": "1.0"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful.",
            "schema": {
              "$ref": "#/definitions/PublishSource"
            }
          },
          "400": {
            "description": "The request data is invalid."
          },
          "403": {
            "description": "The server understood the request but refuses to authorize it."
          },
          "500": {
            "description": "There was an unexpected error while handling the request."
          }
        }
      }
    },
    "/v{api-version}/items/{escapedComponentId}/publishedPages": {
      "get": {
        "tags": [
          "Publishing"
        ],
        "summary": "Gets a list of published Pages that use a specified Component.",
        "description": "This operation returns an instance of 'Page' type.\n\n",
        "operationId": "GetPublishedPages",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "escapedComponentId",
            "in": "path",
            "description": "The TCM URI of a Component with the colon escaped by replacing it with an underscore. E.g. \"tcm_1-1-5\"",
            "required": true,
            "type": "string"
          },
          {
            "name": "api-version",
            "in": "path",
            "description": "The version of the API you wish to use.",
            "required": true,
            "type": "string",
            "default": "1.0"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful.",
            "schema": {
              "items": {
                "$ref": "#/definitions/Page"
              },
              "xml": {
                "name": "Page",
                "wrapped": true
              },
              "type": "array"
            }
          },
          "400": {
            "description": "The request data is invalid."
          },
          "403": {
            "description": "The server understood the request but refuses to authorize it."
          },
          "404": {
            "description": "The requested resource doesn't exist."
          },
          "500": {
            "description": "There was an unexpected error while handling the request."
          }
        }
      }
    },
    "/v{api-version}/items/{escapedSchemaId}/instanceData": {
      "get": {
        "tags": [
          "Schemas"
        ],
        "summary": "Gets instance data of a specified Schema including default field values.",
        "description": "This operation returns an instance of 'SchemaInstance' type.\n\n",
        "operationId": "GetSchemaInstanceData",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "escapedSchemaId",
            "in": "path",
            "description": "The TCM URI of a Schema with the colon escaped by replacing it with an underscore. E.g. \"tcm_1-1-8\"",
            "required": true,
            "type": "string"
          },
          {
            "name": "api-version",
            "in": "path",
            "description": "The version of the API you wish to use.",
            "required": true,
            "type": "string",
            "default": "1.0"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful.",
            "schema": {
              "$ref": "#/definitions/SchemaInstance"
            }
          },
          "400": {
            "description": "The request data is invalid."
          },
          "403": {
            "description": "The server understood the request but refuses to authorize it."
          },
          "404": {
            "description": "The requested resource doesn't exist."
          },
          "500": {
            "description": "There was an unexpected error while handling the request."
          }
        }
      }
    },
    "/v{api-version}/items/{escapedSchemaId}/componentTemplateLinks": {
      "get": {
        "tags": [
          "Schemas"
        ],
        "summary": "Gets a list of all Component Template links that can render Components based on the specified Schema.",
        "description": "This operation returns an instance of 'Link' type.\n\n",
        "operationId": "GetAssociatedComponentTemplateLinks",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "escapedSchemaId",
            "in": "path",
            "description": "The TCM URI of a Schema with the colon escaped by replacing it with an underscore. E.g. \"tcm_1-1-8\"",
            "required": true,
            "type": "string"
          },
          {
            "name": "api-version",
            "in": "path",
            "description": "The version of the API you wish to use.",
            "required": true,
            "type": "string",
            "default": "1.0"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful.",
            "schema": {
              "items": {
                "$ref": "#/definitions/Link"
              },
              "xml": {
                "name": "Link",
                "wrapped": true
              },
              "type": "array"
            }
          },
          "400": {
            "description": "The request data is invalid."
          },
          "403": {
            "description": "The server understood the request but refuses to authorize it."
          },
          "404": {
            "description": "The requested resource doesn't exist."
          },
          "500": {
            "description": "There was an unexpected error while handling the request."
          }
        }
      }
    },
    "/v{api-version}/healthCheck": {
      "get": {
        "tags": [
          "System"
        ],
        "summary": "Checks and displays the health status of the API.",
        "description": "This operation returns an instance of 'ApiStatus' type.\n\n",
        "operationId": "HealthCheck",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "api-version",
            "in": "path",
            "description": "The version of the API you wish to use.",
            "required": true,
            "type": "string",
            "default": "1.0"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful.",
            "schema": {
              "$ref": "#/definitions/ApiStatus"
            }
          },
          "500": {
            "description": "There was an unexpected error while handling the request."
          }
        }
      }
    },
    "/v{api-version}/system/capabilities": {
      "get": {
        "tags": [
          "System"
        ],
        "summary": "Lists all available capabilities and features.",
        "description": "This operation returns an instance of 'Capabilities' type.\n\n",
        "operationId": "capabilities",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "api-version",
            "in": "path",
            "description": "The version of the API you wish to use.",
            "required": true,
            "type": "string",
            "default": "1.0"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful.",
            "schema": {
              "$ref": "#/definitions/Capabilities"
            }
          },
          "500": {
            "description": "There was an unexpected error while handling the request."
          }
        }
      }
    },
    "/v{api-version}/items/{escapedUserId}/profile": {
      "get": {
        "tags": [
          "UserProfile"
        ],
        "summary": "Beta version. Gets the user profile of a user.",
        "description": "This operation returns an instance of 'UserProfile' type.\n\n",
        "operationId": "GetUserProfile",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "escapedUserId",
            "in": "path",
            "description": "The TCM URI of the user with the colon escaped by replacing it with an underscore. E.g. \"tcm_1-1-17\".",
            "required": true,
            "type": "string"
          },
          {
            "name": "api-version",
            "in": "path",
            "description": "The version of the API you wish to use.",
            "required": true,
            "type": "string",
            "default": "1.0"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful.",
            "schema": {
              "$ref": "#/definitions/UserProfile"
            }
          },
          "400": {
            "description": "The request data is invalid."
          },
          "403": {
            "description": "The server understood the request but refuses to authorize it."
          },
          "404": {
            "description": "The requested resource doesn't exist."
          },
          "500": {
            "description": "There was an unexpected error while handling the request."
          }
        }
      },
      "put": {
        "tags": [
          "UserProfile"
        ],
        "summary": "Beta version. Updates certain properties in a user's profile.",
        "description": "This operation returns an instance of 'UserProfile' type.\n\nOnly 'Preferences.Favorites' property can be updated through this operation.",
        "operationId": "UpdateUserProfile",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "escapedUserId",
            "in": "path",
            "description": "The TCM URI of the user with the colon escaped by replacing it with an underscore. E.g. \"tcm_1-1-17\".",
            "required": true,
            "type": "string"
          },
          {
            "name": "userProfile",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserProfile"
            }
          },
          {
            "name": "api-version",
            "in": "path",
            "description": "The version of the API you wish to use.",
            "required": true,
            "type": "string",
            "default": "1.0"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful.",
            "schema": {
              "$ref": "#/definitions/UserProfile"
            }
          },
          "400": {
            "description": "The request data is invalid."
          },
          "403": {
            "description": "The server understood the request but refuses to authorize it."
          },
          "404": {
            "description": "The requested resource doesn't exist."
          },
          "500": {
            "description": "There was an unexpected error while handling the request."
          }
        }
      }
    },
    "/v{api-version}/whoAmI": {
      "get": {
        "tags": [
          "UserProfile"
        ],
        "summary": "Beta version. Get the user profile of the currently logged-in user.",
        "description": "This operation returns an instance of 'UserProfile' type.\n\n",
        "operationId": "GetOwnUserProfile",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "api-version",
            "in": "path",
            "description": "The version of the API you wish to use.",
            "required": true,
            "type": "string",
            "default": "1.0"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful.",
            "schema": {
              "$ref": "#/definitions/UserProfile"
            }
          },
          "404": {
            "description": "The requested resource doesn't exist."
          },
          "500": {
            "description": "There was an unexpected error while handling the request."
          }
        }
      }
    },
    "/v{api-version}/items/{escapedUserId}/avatar": {
      "get": {
        "tags": [
          "UserProfile"
        ],
        "summary": "Beta version. Gets the avatar (profile picture) of a user.",
        "description": "\n\n",
        "operationId": "GetUserAvatar",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "escapedUserId",
            "in": "path",
            "description": "The TCM URI of the user with the colon escaped by replacing it with an underscore. E.g. \"tcm_1-1-17\".",
            "required": true,
            "type": "string"
          },
          {
            "name": "api-version",
            "in": "path",
            "description": "The version of the API you wish to use.",
            "required": true,
            "type": "string",
            "default": "1.0"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful.",
            "schema": {
              "type": "string",
              "format": "byte"
            }
          },
          "304": {
            "description": "The requested content was not modified."
          },
          "400": {
            "description": "The request data is invalid."
          },
          "404": {
            "description": "The requested resource doesn't exist."
          },
          "500": {
            "description": "There was an unexpected error while handling the request."
          }
        }
      }
    },
    "/v{api-version}/items/{escapedVersionedItemId}/checkOut": {
      "post": {
        "tags": [
          "Versioning"
        ],
        "summary": "Checks out a versioned item to create a new, editable version of the item. The new version is locked for editing by the user who performed the checkout. No other user can edit the item while it is checked out.",
        "description": "This operation returns an instance of 'VersionedItem' type, as implemented by one of the following:<ul class=\"model-list\"><li><span>Component</span></li><li><span>ComponentTemplate</span></li><li><span>ExternalComponent</span></li><li><span>Page</span></li><li><span>PageTemplate</span></li><li><span>Schema</span></li><li><span>TemplateBuildingBlock</span></li></ul>\n\n",
        "operationId": "CheckOut",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "escapedVersionedItemId",
            "in": "path",
            "description": "The URI of a versioned item (no version specified). Escape the colon by replacing it with an underscore. E.g. \"tcm_1-1-8\"",
            "required": true,
            "type": "string"
          },
          {
            "name": "requestModel",
            "in": "body",
            "description": "The model to use for the request.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CheckOutRequest"
            }
          },
          {
            "name": "api-version",
            "in": "path",
            "description": "The version of the API you wish to use.",
            "required": true,
            "type": "string",
            "default": "1.0"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful.",
            "schema": {
              "$ref": "#/definitions/VersionedItem"
            }
          },
          "400": {
            "description": "The request data is invalid."
          },
          "403": {
            "description": "The server understood the request but refuses to authorize it."
          },
          "404": {
            "description": "The requested resource doesn't exist."
          },
          "500": {
            "description": "There was an unexpected error while handling the request."
          }
        }
      }
    },
    "/v{api-version}/items/{escapedVersionedItemId}/checkIn": {
      "post": {
        "tags": [
          "Versioning"
        ],
        "summary": "Checks in a versioned item that was checked out for editing. The operation converts the editable version into a new latest version of the item and removes the lock from the item.",
        "description": "This operation returns an instance of 'VersionedItem' type, as implemented by one of the following:<ul class=\"model-list\"><li><span>Component</span></li><li><span>ComponentTemplate</span></li><li><span>ExternalComponent</span></li><li><span>Page</span></li><li><span>PageTemplate</span></li><li><span>Schema</span></li><li><span>TemplateBuildingBlock</span></li></ul>\n\n",
        "operationId": "CheckIn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "escapedVersionedItemId",
            "in": "path",
            "description": "The URI of a versioned item (no version specified). Escape the colon by replacing it with an underscore. E.g. \"tcm_1-1-8\"",
            "required": true,
            "type": "string"
          },
          {
            "name": "requestModel",
            "in": "body",
            "description": "The model to use for the request.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CheckInRequest"
            }
          },
          {
            "name": "api-version",
            "in": "path",
            "description": "The version of the API you wish to use.",
            "required": true,
            "type": "string",
            "default": "1.0"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful.",
            "schema": {
              "$ref": "#/definitions/VersionedItem"
            }
          },
          "400": {
            "description": "The request data is invalid."
          },
          "403": {
            "description": "The server understood the request but refuses to authorize it."
          },
          "404": {
            "description": "The requested resource doesn't exist."
          },
          "500": {
            "description": "There was an unexpected error while handling the request."
          }
        }
      }
    },
    "/v{api-version}/items/{escapedVersionedItemId}/undoCheckOut": {
      "post": {
        "tags": [
          "Versioning"
        ],
        "summary": "Reverts the check-out of a versioned item. The operation removes the editable version without saving any changes and also removes the lock from the item.",
        "description": "This operation returns an instance of 'VersionedItem' type, as implemented by one of the following:<ul class=\"model-list\"><li><span>Component</span></li><li><span>ComponentTemplate</span></li><li><span>ExternalComponent</span></li><li><span>Page</span></li><li><span>PageTemplate</span></li><li><span>Schema</span></li><li><span>TemplateBuildingBlock</span></li></ul>\n\n",
        "operationId": "UndoCheckOut",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "escapedVersionedItemId",
            "in": "path",
            "description": "The URI of a versioned item (no version specified). Escape the colon by replacing it with an underscore. E.g. \"tcm_1-1-8\"",
            "required": true,
            "type": "string"
          },
          {
            "name": "requestModel",
            "in": "body",
            "description": "The model to use for the request.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UndoCheckOutRequest"
            }
          },
          {
            "name": "api-version",
            "in": "path",
            "description": "The version of the API you wish to use.",
            "required": true,
            "type": "string",
            "default": "1.0"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful.",
            "schema": {
              "$ref": "#/definitions/VersionedItem"
            }
          },
          "204": {
            "description": "The request was successful and there is no content in the body of the response."
          },
          "400": {
            "description": "The request data is invalid."
          },
          "403": {
            "description": "The server understood the request but refuses to authorize it."
          },
          "404": {
            "description": "The requested resource doesn't exist."
          },
          "500": {
            "description": "There was an unexpected error while handling the request."
          }
        }
      }
    },
    "/v{api-version}/items/{escapedVersionedItemIdWithVersion}/rollback": {
      "post": {
        "tags": [
          "Versioning"
        ],
        "summary": "Rolls back all changes that have been made to an item since a specified version.",
        "description": "This operation returns an instance of 'VersionedItem' type, as implemented by one of the following:<ul class=\"model-list\"><li><span>Component</span></li><li><span>ComponentTemplate</span></li><li><span>ExternalComponent</span></li><li><span>Page</span></li><li><span>PageTemplate</span></li><li><span>Schema</span></li><li><span>TemplateBuildingBlock</span></li></ul>\n\n",
        "operationId": "Rollback",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "escapedVersionedItemIdWithVersion",
            "in": "path",
            "description": "The URI of a versioned item including the version ID and with the colon escaped by replacing it with an underscore. E.g. \"tcm_1-1-8-v5\"",
            "required": true,
            "type": "string"
          },
          {
            "name": "requestModel",
            "in": "body",
            "description": "The model to use for the request.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RollBackRequest"
            }
          },
          {
            "name": "api-version",
            "in": "path",
            "description": "The version of the API you wish to use.",
            "required": true,
            "type": "string",
            "default": "1.0"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful.",
            "schema": {
              "$ref": "#/definitions/VersionedItem"
            }
          },
          "400": {
            "description": "The request data is invalid."
          },
          "403": {
            "description": "The server understood the request but refuses to authorize it."
          },
          "404": {
            "description": "The requested resource doesn't exist."
          },
          "500": {
            "description": "There was an unexpected error while handling the request."
          }
        }
      }
    },
    "/v{api-version}/items/{escapedVersionedItemId}/history": {
      "get": {
        "tags": [
          "Versioning"
        ],
        "summary": "Gets all major versions of a specified versioned item.",
        "description": "This operation returns an instance of 'VersionedItem' type, as implemented by one of the following:<ul class=\"model-list\"><li><span>Component</span></li><li><span>ComponentTemplate</span></li><li><span>ExternalComponent</span></li><li><span>Page</span></li><li><span>PageTemplate</span></li><li><span>Schema</span></li><li><span>TemplateBuildingBlock</span></li></ul>\n\n",
        "operationId": "GetHistory",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "escapedVersionedItemId",
            "in": "path",
            "description": "The URI of a versioned item (no version specified). Escape the colon by replacing it with an underscore. E.g. \"tcm_1-1-8\"",
            "required": true,
            "type": "string"
          },
          {
            "name": "api-version",
            "in": "path",
            "description": "The version of the API you wish to use.",
            "required": true,
            "type": "string",
            "default": "1.0"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful.",
            "schema": {
              "items": {
                "$ref": "#/definitions/VersionedItem"
              },
              "xml": {
                "name": "VersionedItem",
                "wrapped": true
              },
              "type": "array"
            }
          },
          "400": {
            "description": "The request data is invalid."
          },
          "403": {
            "description": "The server understood the request but refuses to authorize it."
          },
          "404": {
            "description": "The requested resource doesn't exist."
          },
          "500": {
            "description": "There was an unexpected error while handling the request."
          }
        }
      }
    },
    "/v{api-version}/items/{escapedPublicationId}/startWorkflow": {
      "post": {
        "tags": [
          "Workflow"
        ],
        "summary": "Starts the Workflow process for a Publication.",
        "description": "This operation returns an instance of 'ProcessInstance' type.\n\n",
        "operationId": "StartWorkflow",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "escapedPublicationId",
            "in": "path",
            "description": "The TCM URI of a Publication with the colon escaped by replacing it with an underscore. E.g. \"tcm_0-1-1\".",
            "required": true,
            "type": "string"
          },
          {
            "name": "requestModel",
            "in": "body",
            "description": "The model to use for the request.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StartWorkflowInstruction"
            }
          },
          {
            "name": "api-version",
            "in": "path",
            "description": "The version of the API you wish to use.",
            "required": true,
            "type": "string",
            "default": "1.0"
          }
        ],
        "responses": {
          "201": {
            "description": "The request has completed and has resulted in one or more new resources being created.",
            "schema": {
              "$ref": "#/definitions/ProcessInstance"
            }
          },
          "400": {
            "description": "The request data is invalid."
          },
          "403": {
            "description": "The server understood the request but refuses to authorize it."
          },
          "404": {
            "description": "The requested resource doesn't exist."
          },
          "500": {
            "description": "There was an unexpected error while handling the request."
          }
        }
      }
    },
    "/v{api-version}/items/{escapedActivityInstanceId}/startActivity": {
      "post": {
        "tags": [
          "Workflow"
        ],
        "summary": "Starts a Workflow activity.",
        "description": "This operation returns an instance of 'ActivityInstance' type.\n\n",
        "operationId": "StartActivity",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "escapedActivityInstanceId",
            "in": "path",
            "description": "The URI of a Workflow activity instance with the colon escaped by replacing it with an underscore. E.g. \"tcm_1-1-131104\"",
            "required": true,
            "type": "string"
          },
          {
            "name": "api-version",
            "in": "path",
            "description": "The version of the API you wish to use.",
            "required": true,
            "type": "string",
            "default": "1.0"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful.",
            "schema": {
              "$ref": "#/definitions/ActivityInstance"
            }
          },
          "400": {
            "description": "The request data is invalid."
          },
          "403": {
            "description": "The server understood the request but refuses to authorize it."
          },
          "404": {
            "description": "The requested resource doesn't exist."
          },
          "500": {
            "description": "There was an unexpected error while handling the request."
          }
        }
      }
    },
    "/v{api-version}/items/{escapedActivityInstanceId}/finishActivity": {
      "post": {
        "tags": [
          "Workflow"
        ],
        "summary": "Finishes a Workflow activity.",
        "description": "This operation returns an instance of 'ActivityInstance' type.\n\n",
        "operationId": "FinishActivity",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "escapedActivityInstanceId",
            "in": "path",
            "description": "The URI of a Workflow activity instance with the colon escaped by replacing it with an underscore. E.g. \"tcm_1-1-131104\"",
            "required": true,
            "type": "string"
          },
          {
            "name": "activityFinishRequestModel",
            "in": "body",
            "description": "The model to use for the finish activity request.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ActivityFinishRequest"
            }
          },
          {
            "name": "api-version",
            "in": "path",
            "description": "The version of the API you wish to use.",
            "required": true,
            "type": "string",
            "default": "1.0"
          }
        ],
        "responses": {
          "200": {
            "description": "The request was successful.",
            "schema": {
              "$ref": "#/definitions/ActivityInstance"
            }
          },
          "400": {
            "description": "The request data is invalid."
          },
          "403": {
            "description": "The server understood the request but refuses to authorize it."
          },
          "404": {
            "description": "The requested resource doesn't exist."
          },
          "500": {
            "description": "There was an unexpected error while handling the request."
          }
        }
      }
    }
  },
  "definitions": {
    "AbstractBatchPublishRequest": {
      "description": "Represents the abstract request for the publish/un-publish batch operations.",
      "allOf": [
        {
          "$ref": "#/definitions/BatchOperationRequest"
        },
        {
          "properties": {
            "Priority": {
              "$ref": "#/definitions/PublishPriority",
              "description": "Gets or sets the priority of the publish action. Passing null will use the priority from the Publication Target."
            },
            "TargetIdsOrPurposes": {
              "description": "Gets or sets the collection of identifiers representing Publication Targets, Target Types or purposes of the \"TargetType\" to publish to. This cannot contain a combination of them.",
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "type": "object"
        }
      ],
      "xml": {
        "name": "AbstractBatchPublishRequest"
      },
      "type": "object"
    },
    "AccessControlEntry": {
      "description": "Represents an entry in an Access Control List, which is used to restrict access to containers.",
      "properties": {
        "$type": {
          "description": "Set to the name of concrete class, such as 'AccessControlEntry' (or a class name that inherits from this class)",
          "example": "AccessControlEntry",
          "type": "string"
        },
        "AllowedPermissions": {
          "description": "Gets or sets the Permissions that the \"Trustee\" is allowed to have.",
          "items": {
            "$ref": "#/definitions/Permissions"
          },
          "xml": {
            "name": "Permissions",
            "wrapped": true
          },
          "type": "array"
        },
        "AllowedRights": {
          "description": "Gets or sets the Rights that the \"Trustee\" is allowed to have.",
          "items": {
            "$ref": "#/definitions/Rights"
          },
          "xml": {
            "name": "Rights",
            "wrapped": true
          },
          "type": "array"
        },
        "DeniedPermissions": {
          "description": "Gets or sets the Permissions that the \"Trustee\" is denied to have.",
          "items": {
            "$ref": "#/definitions/Permissions"
          },
          "xml": {
            "name": "Permissions",
            "wrapped": true
          },
          "type": "array"
        },
        "DeniedRights": {
          "description": "Gets or sets the Rights that the \"Trustee\" is denied to have.",
          "items": {
            "$ref": "#/definitions/Rights"
          },
          "xml": {
            "name": "Rights",
            "wrapped": true
          },
          "type": "array"
        },
        "Trustee": {
          "$ref": "#/definitions/Link",
          "description": "Gets the Trustee (User or Group) which the Access Control Entry applies to."
        }
      },
      "discriminator": "$type",
      "xml": {
        "name": "AccessControlEntry"
      },
      "type": "object"
    },
    "AccessControlList": {
      "description": "Represents an Access Control List which is used to restrict access to a container.",
      "properties": {
        "$type": {
          "description": "Set to the name of concrete class, such as 'AccessControlList' (or a class name that inherits from this class)",
          "example": "AccessControlList",
          "type": "string"
        },
        "AccessControlEntries": {
          "description": "Gets access to Access Control Entries which the Access Control List contains.",
          "items": {
            "$ref": "#/definitions/AccessControlEntry"
          },
          "xml": {
            "name": "AccessControlEntry",
            "wrapped": true
          },
          "type": "array"
        }
      },
      "discriminator": "$type",
      "xml": {
        "name": "AccessControlList"
      },
      "type": "object"
    },
    "AccessToken": {
      "description": "Represents read-only access token data.",
      "required": [
        "Id"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/User"
        },
        {
          "required": [
            "Id"
          ],
          "properties": {
            "ExpiresAt": {
              "description": "Gets the expiration date and time in UTC format for this token.",
              "example": "1970-01-01T00:00:00Z",
              "type": "string",
              "format": "date-time"
            },
            "InheritedSystemPrivileges": {
              "$ref": "#/definitions/SystemPrivilegesDictionary"
            },
            "Signature": {
              "description": "Gets a signature value for this token to prevent modifying any of its properties outside of the CM system.",
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "xml": {
        "name": "AccessToken"
      },
      "type": "object"
    },
    "Activity": {
      "description": "Abstract base class for the data of Activities.",
      "required": [
        "Id"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/WorkflowObject"
        },
        {
          "required": [
            "Id"
          ],
          "properties": {
            "Assignee": {
              "$ref": "#/definitions/Link"
            },
            "AssignmentDate": {
              "description": "Gets the most recent assigned/re-assigned date and time in UTC of the Activity.",
              "example": "1970-01-01T00:00:00Z",
              "type": "string",
              "format": "date-time"
            },
            "DueDate": {
              "description": "Gets or sets the due date and time in UTC for finishing activity.",
              "example": "1970-01-01T00:00:00Z",
              "type": "string",
              "format": "date-time"
            },
            "FinishDate": {
              "description": "Gets the date and time in UTC at which the Activity has been finished.",
              "example": "1970-01-01T00:00:00Z",
              "type": "string",
              "format": "date-time"
            },
            "FinishMessage": {
              "description": "Gets the message provided by the User who finished the Activity.",
              "type": "string"
            },
            "Owner": {
              "$ref": "#/definitions/Link"
            },
            "Performers": {
              "description": "Gets the Users that are performing or have performed the Activity.",
              "items": {
                "$ref": "#/definitions/Link"
              },
              "xml": {
                "name": "Link",
                "wrapped": true
              },
              "type": "array"
            },
            "Position": {
              "description": "Gets the position of the current Activity within the Process.",
              "type": "integer",
              "format": "int32"
            },
            "Process": {
              "$ref": "#/definitions/Link"
            },
            "StartDate": {
              "description": "Gets the date and time in UTC at which the Activity was started (for the first time).",
              "example": "1970-01-01T00:00:00Z",
              "type": "string",
              "format": "date-time"
            },
            "SuspendDate": {
              "description": "Gets the date and time in UTC at which the automated Activity was suspended or failed (the last time).",
              "example": "1970-01-01T00:00:00Z",
              "type": "string",
              "format": "date-time"
            },
            "WorkItems": {
              "description": "Gets the Work Items involved in the Activity.",
              "items": {
                "$ref": "#/definitions/WorkItem"
              },
              "xml": {
                "name": "WorkItem",
                "wrapped": true
              },
              "type": "array"
            }
          },
          "type": "object"
        }
      ],
      "xml": {
        "name": "Activity"
      },
      "type": "object"
    },
    "ActivityConstraints": {
      "description": "Defines the constraints of an Activity Instance.\r\n\r\nMembers:\r\n* `None` - Does not have any constraints.\r\n* `DenyBundleMetadataEditing` - Denies editing Metadata of a Bundle in workflow.\r\n* `DenySubjectEditing` - Denies editing Subject in workflow.\r\n* `DenyAddRemoveWorkItem` - Denies adding/removing work items to/from the Activity.\r\n",
      "type": "string",
      "enum": [
        "None",
        "DenyBundleMetadataEditing",
        "DenySubjectEditing",
        "DenyAddRemoveWorkItem"
      ]
    },
    "ActivityDefinition": {
      "description": "Abstract base class for the data of the Activity Definitions. Part of the Process Definition.",
      "required": [
        "Id"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/WorkflowObject"
        },
        {
          "required": [
            "Id"
          ],
          "properties": {
            "ActivityConstraints": {
              "$ref": "#/definitions/ActivityConstraints",
              "description": "Gets or sets the constraints of an activity."
            },
            "Assignee": {
              "$ref": "#/definitions/Link"
            },
            "Description": {
              "description": "Gets or sets the description of the Activity Definition.",
              "type": "string"
            },
            "ProcessDefinition": {
              "$ref": "#/definitions/Link"
            }
          },
          "type": "object"
        }
      ],
      "xml": {
        "name": "ActivityDefinition"
      },
      "type": "object"
    },
    "ActivityFinishInfo": {
      "description": "Represents the data required for finishing an Activity.",
      "properties": {
        "$type": {
          "description": "Set to the name of concrete class, such as 'ActivityFinishInfo' (or a class name that inherits from this class)",
          "example": "ActivityFinishInfo",
          "type": "string"
        },
        "Message": {
          "description": "Gets or sets the finish message for the current Activity.",
          "type": "string"
        },
        "NextActivityDueDate": {
          "description": "Gets or sets the due date in UTC to be used for the next Activity Instance.",
          "example": "1970-01-01T00:00:00Z",
          "type": "string",
          "format": "date-time"
        },
        "NextActivityTitle": {
          "description": "Gets or sets the title to be used for the next Activity Instance.",
          "type": "string"
        },
        "NextAssignee": {
          "$ref": "#/definitions/Link",
          "description": "Gets or sets the assignee (override) for the next Activity."
        }
      },
      "discriminator": "$type",
      "xml": {
        "name": "ActivityFinishInfo"
      },
      "type": "object"
    },
    "ActivityFinishRequest": {
      "description": "Represents the data required for finishing an Activity.",
      "properties": {
        "$type": {
          "description": "Set to the name of concrete class, such as 'ActivityFinishRequest' (or a class name that inherits from this class)",
          "example": "ActivityFinishRequest",
          "type": "string"
        },
        "Message": {
          "description": "Gets or sets the finish message for the current Activity.",
          "type": "string"
        },
        "NextActivityDueDate": {
          "description": "Gets or sets the due date in UTC to be used for the next Activity Instance.",
          "example": "1970-01-01T00:00:00Z",
          "type": "string",
          "format": "date-time"
        },
        "NextActivityTitle": {
          "description": "Gets or sets the title to be used for the next Activity Instance.",
          "type": "string"
        },
        "NextAssignee": {
          "$ref": "#/definitions/Link",
          "description": "Gets or sets the assignee (override) for the next Activity."
        }
      },
      "discriminator": "$type",
      "xml": {
        "name": "ActivityFinishRequest"
      },
      "type": "object"
    },
    "ActivityHistory": {
      "description": "Representing data of the Activity History. This is the part of \"ProcessHistory\".",
      "required": [
        "Id"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/Activity"
        },
        {
          "required": [
            "Id"
          ],
          "properties": {
            "ActivityDefinitionTitle": {
              "description": "Gets the Activity Definition Title of the Activity.",
              "type": "string"
            },
            "ActivityType": {
              "$ref": "#/definitions/ActivityType",
              "description": "Gets the Activity Type related to current \"ActivityHistory\"."
            },
            "ApprovalStatus": {
              "$ref": "#/definitions/Link"
            },
            "Description": {
              "description": "Gets the Description of current \"ActivityHistory\".",
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "xml": {
        "name": "ActivityHistory"
      },
      "type": "object"
    },
    "ActivityInstance": {
      "description": "Represents the data of an Activity Instance: a current Activity which is part of a Process Instance.",
      "required": [
        "Id"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/Activity"
        },
        {
          "required": [
            "Id"
          ],
          "properties": {
            "ActivityConstraints": {
              "$ref": "#/definitions/ActivityConstraints",
              "description": "Gets the constraints of this activity."
            },
            "ActivityDefinition": {
              "$ref": "#/definitions/Link"
            },
            "ActivityState": {
              "description": "Gets the state of the Activity Instance.",
              "items": {
                "$ref": "#/definitions/ActivityState"
              },
              "xml": {
                "name": "ActivityState",
                "wrapped": true
              },
              "type": "array"
            },
            "IsExpirationExecution": {
              "description": "Gets or sets value, indicated whether this activity expired or not.",
              "type": "boolean"
            },
            "ResumeBookmark": {
              "description": "Gets the resume bookmark for suspended automated activities.",
              "type": "string"
            },
            "SuspendOrFailReason": {
              "description": "Gets the reason why this Activity was suspended or failed.",
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "xml": {
        "name": "ActivityInstance"
      },
      "type": "object"
    },
    "ActivityState": {
      "description": "Defines a state of an Activity.\r\n\r\nMembers:\r\n* `Assigned` - The Activity is assigned to the User or Group.\r\n* `Started` - The Activity is started by a User.\r\n* `Failed` - The Activity is failed.\r\n* `Finished` - The Activity is finished.\r\n* `Suspended` - The Activity is suspended.\r\n* `WaitingForWorkflowAgent` - The Activity is waiting for execution by Workflow Agent.\r\n",
      "type": "string",
      "enum": [
        "Assigned",
        "Started",
        "Failed",
        "Finished",
        "Suspended",
        "WaitingForWorkflowAgent"
      ]
    },
    "ActivityType": {
      "description": "Defines a type of an Activity.\r\n\r\nMembers:\r\n* `Normal` - Normal activity.\r\n* `Decision` - Decision activity.\r\n",
      "type": "string",
      "enum": [
        "Normal",
        "Decision"
      ]
    },
    "ApiStatus": {
      "description": "Represents the status of the CoreService REST API.",
      "properties": {
        "$type": {
          "description": "Set to the name of concrete class, such as 'ApiStatus' (or a class name that inherits from this class)",
          "example": "ApiStatus",
          "type": "string"
        },
        "ApiVersion": {
          "description": "Gets the current version of the CoreService REST API.",
          "type": "string"
        },
        "ServerTime": {
          "description": "Gets the server time at the request moment.",
          "example": "1970-01-01T00:00:00Z",
          "type": "string",
          "format": "date-time"
        }
      },
      "discriminator": "$type",
      "xml": {
        "name": "ApiStatus"
      },
      "type": "object"
    },
    "ApplicationData": {
      "description": "Represents application-specific data which can be stored system-wide (global) or associated with any identifiable object.",
      "properties": {
        "$type": {
          "description": "Set to the name of concrete class, such as 'ApplicationData' (or a class name that inherits from this class)",
          "example": "ApplicationData",
          "type": "string"
        },
        "ApplicationId": {
          "description": "Gets or sets the application identifier.",
          "type": "string"
        },
        "Data": {
          "description": "Gets or sets the binary data.",
          "type": "string",
          "format": "byte"
        },
        "IsInherited": {
          "description": "Gets the status informing whether this application data is inherited from parent item.",
          "type": "boolean"
        },
        "ManagedLinks": {
          "$ref": "#/definitions/Link",
          "description": "Gets or sets managed links (reserved for future use)."
        },
        "OwningRepositoryId": {
          "description": "Gets the Id of the repository which owns this application data.",
          "type": "string"
        },
        "TypeId": {
          "description": "Gets or sets the type identifier which can be used to deserialize the binary \"Data\" into a structured data type.",
          "type": "string"
        }
      },
      "discriminator": "$type",
      "xml": {
        "name": "ApplicationData"
      },
      "type": "object"
    },
    "ApprovalStatus": {
      "description": "Represents a data of the Approval Status.",
      "required": [
        "Id"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/SystemWideObject"
        },
        {
          "required": [
            "Id"
          ],
          "properties": {
            "IsDeleted": {
              "description": "Gets a value indicating whether the Approval Status is deleted.",
              "type": "boolean"
            },
            "Position": {
              "description": "Gets or sets the position of this Approval Status in the list of the Approval Statuses.",
              "type": "integer",
              "format": "int32"
            }
          },
          "type": "object"
        }
      ],
      "xml": {
        "name": "ApprovalStatus"
      },
      "type": "object"
    },
    "BasicVersionInfo": {
      "description": "Basic version information about any Identifiable Object.",
      "properties": {
        "$type": {
          "description": "Set to the name of concrete class, such as 'BasicVersionInfo' (or a class name that inherits from this class)",
          "example": "BasicVersionInfo",
          "type": "string"
        },
        "CreationDate": {
          "description": "Gets or sets the date and time in UTC at which the item was created.",
          "example": "1970-01-01T00:00:00Z",
          "type": "string",
          "format": "date-time"
        },
        "RevisionDate": {
          "description": "Gets or sets the date and time in UTC at which the item was last modified.",
          "example": "1970-01-01T00:00:00Z",
          "type": "string",
          "format": "date-time"
        }
      },
      "discriminator": "$type",
      "xml": {
        "name": "BasicVersionInfo"
      },
      "type": "object"
    },
    "Batch": {
      "description": "Represents the data of a Batch. Defines batch operations and additional info related to batch invocation.",
      "required": [
        "Id"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/SystemWideObject"
        },
        {
          "required": [
            "Id"
          ],
          "properties": {
            "NumberOfDoneOperations": {
              "description": "Gets the count of done operations.",
              "type": "integer",
              "format": "int32"
            },
            "Operations": {
              "description": "Gets or sets the list of operations of the current batch.",
              "items": {
                "$ref": "#/definitions/BatchOperation"
              },
              "xml": {
                "name": "BatchOperation",
                "wrapped": true
              },
              "type": "array"
            },
            "Performer": {
              "$ref": "#/definitions/Link"
            },
            "StartAt": {
              "description": "Gets or sets the time in UTC, when the batch operation must be started.",
              "example": "1970-01-01T00:00:00Z",
              "type": "string",
              "format": "date-time"
            },
            "TotalNumberOfOperations": {
              "description": "Gets the total number of operations.",
              "type": "integer",
              "format": "int32"
            }
          },
          "type": "object"
        }
      ],
      "xml": {
        "name": "Batch"
      },
      "type": "object"
    },
    "BatchAutoClassifyRequest": {
      "description": "Represents the request for the auto-classify batch operation.",
      "allOf": [
        {
          "$ref": "#/definitions/BatchOperationRequest"
        },
        {
          "properties": {},
          "type": "object"
        }
      ],
      "xml": {
        "name": "BatchAutoClassifyRequest"
      },
      "type": "object"
    },
    "BatchCheckInRequest": {
      "description": "Represents the request for the check-in batch operation.",
      "allOf": [
        {
          "$ref": "#/definitions/BatchOperationRequest"
        },
        {
          "properties": {
            "RemovePermanentLock": {
              "description": "A permanent lock is set when the user performs an explicit checkout action in the UI.\r\nIt is removed when the user performs an explicit checkin action in the UI.\r\nAvailable values:\r\n* True – removes the permanent lock after the check-in action.\r\n* False – does not remove the lock after the check-in action, such as when the item is still being edited.",
              "type": "boolean"
            },
            "UserComment": {
              "description": "Gets or sets the user comment for this item. If null the user comment is not changed.",
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "xml": {
        "name": "BatchCheckInRequest"
      },
      "type": "object"
    },
    "BatchCheckOutRequest": {
      "description": "Represents the request for the check-out batch operation.",
      "allOf": [
        {
          "$ref": "#/definitions/BatchOperationRequest"
        },
        {
          "properties": {
            "SetPermanentLock": {
              "description": "A permanent lock is set when the user performs an explicit checkout action in the UI and removed when the user performs an explicit checkin action in the UI.\r\nCheckout or checkin actions without permanent lock effectively do nothing if item was checked out with permanent lock.\r\nAvailable values:\r\n* True – sets a permanent lock that will be removed only when the user performs an explicit check-in action.\r\n* False – sets no lock, which means the check-in and check-out actions effectively do nothing.",
              "type": "boolean"
            }
          },
          "type": "object"
        }
      ],
      "xml": {
        "name": "BatchCheckOutRequest"
      },
      "type": "object"
    },
    "BatchClassifyOrUnClassifyRequest": {
      "description": "Represents the request for the classify or un-classify batch operation.",
      "allOf": [
        {
          "$ref": "#/definitions/BatchOperationRequest"
        },
        {
          "properties": {
            "KeywordIds": {
              "description": "Gets or sets the collection of Keyword identifiers to classify/un-classify the item.",
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "type": "object"
        }
      ],
      "xml": {
        "name": "BatchClassifyOrUnClassifyRequest"
      },
      "type": "object"
    },
    "BatchCopyOrMoveRequest": {
      "description": "Represents the request for the copy or move batch operation.",
      "allOf": [
        {
          "$ref": "#/definitions/BatchOperationRequest"
        },
        {
          "properties": {
            "DestinationId": {
              "description": "The identifier of the \"ContentManagement.OrganizationalItem\" where the copy should be created.",
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "xml": {
        "name": "BatchCopyOrMoveRequest"
      },
      "type": "object"
    },
    "BatchCopyRequest": {
      "description": "Represents the request for the copy batch operation.",
      "allOf": [
        {
          "$ref": "#/definitions/BatchCopyOrMoveRequest"
        },
        {
          "properties": {
            "MakeUnique": {
              "description": "Specifies whether a unique title should be generated if an item with the same title already exists in the destination.",
              "type": "boolean"
            }
          },
          "type": "object"
        }
      ],
      "xml": {
        "name": "BatchCopyRequest"
      },
      "type": "object"
    },
    "BatchDeleteTaxonomyNodeRequest": {
      "description": "Represents the request for the delete taxonomy node batch operation.",
      "allOf": [
        {
          "$ref": "#/definitions/BatchOperationRequest"
        },
        {
          "properties": {
            "TaxonomyNodeMode": {
              "$ref": "#/definitions/DeleteTaxonomyNodeMode",
              "description": "Specifies how to handle the children of the deleted taxonomy node."
            }
          },
          "type": "object"
        }
      ],
      "xml": {
        "name": "BatchDeleteTaxonomyNodeRequest"
      },
      "type": "object"
    },
    "BatchFinishActivityRequest": {
      "description": "Represents the request for the finish activity batch operations.",
      "allOf": [
        {
          "$ref": "#/definitions/BatchOperationRequest"
        },
        {
          "properties": {
            "ActivityFinishInfo": {
              "$ref": "#/definitions/ActivityFinishInfo"
            }
          },
          "type": "object"
        }
      ],
      "xml": {
        "name": "BatchFinishActivityRequest"
      },
      "type": "object"
    },
    "BatchForceFinishRequest": {
      "description": "Represents the request for the force finish batch operations.",
      "allOf": [
        {
          "$ref": "#/definitions/BatchOperationRequest"
        },
        {
          "properties": {
            "ApprovalStatusId": {
              "description": "Gets or sets the identifier of the Approval Status which will be set to all Subjects of the related Work Items.",
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "xml": {
        "name": "BatchForceFinishRequest"
      },
      "type": "object"
    },
    "BatchOperation": {
      "description": "Provides information about batch operation on the list of subjects.",
      "properties": {
        "$type": {
          "description": "Set to the name of concrete class, such as 'BatchOperation' (or a class name that inherits from this class)",
          "example": "BatchOperation",
          "type": "string"
        },
        "Operation": {
          "description": "Gets or sets the operation name.",
          "type": "string"
        },
        "Parameters": {
          "$ref": "#/definitions/ParametersDictionary",
          "description": "Gets the additional parameters for invoking operation."
        },
        "Statuses": {
          "description": "Gets the collection, which contains information about performing operation on each subject.",
          "items": {
            "$ref": "#/definitions/BatchOperationStatus"
          },
          "xml": {
            "name": "BatchOperationStatus",
            "wrapped": true
          },
          "type": "array"
        },
        "SubjectLinks": {
          "description": "Gets the subjects on which current operation must be performed.",
          "items": {
            "$ref": "#/definitions/Link"
          },
          "xml": {
            "name": "Link",
            "wrapped": true
          },
          "type": "array"
        }
      },
      "discriminator": "$type",
      "xml": {
        "name": "BatchOperation"
      },
      "type": "object"
    },
    "BatchOperationCreationResult": {
      "description": "The result of the creation of the batch operation.",
      "properties": {
        "$type": {
          "description": "Set to the name of concrete class, such as 'BatchOperationCreationResult' (or a class name that inherits from this class)",
          "example": "BatchOperationCreationResult",
          "type": "string"
        },
        "BatchId": {
          "description": "Reference for reading batch operation which has been created.",
          "type": "string"
        }
      },
      "discriminator": "$type",
      "xml": {
        "name": "BatchOperationCreationResult"
      },
      "type": "object"
    },
    "BatchOperationRequest": {
      "description": "Represents the request for the batch operation.",
      "allOf": [
        {
          "$ref": "#/definitions/BatchOperationRequestBase"
        },
        {
          "properties": {},
          "type": "object"
        }
      ],
      "xml": {
        "name": "BatchOperationRequest"
      },
      "type": "object"
    },
    "BatchOperationRequestBase": {
      "description": "Represents the abstract request for the batch operation.",
      "properties": {
        "$type": {
          "description": "Set to the name of concrete class, such as 'BatchOperationRequestBase' (or a class name that inherits from this class)",
          "example": "<Set to a class name inheriting from 'BatchOperationRequestBase'>",
          "type": "string"
        },
        "ItemIds": {
          "description": "Gets or sets the identifier of items on which the current operation must be performed.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "discriminator": "$type",
      "xml": {
        "name": "BatchOperationRequestBase"
      },
      "type": "object"
    },
    "BatchOperationState": {
      "description": "The state of the batch operation.\r\n\r\nMembers:\r\n* `NotStarted` - Batch operation wasn't started yet.\r\n* `Success` - Batch operation was successfully finished.\r\n* `Warning` - Batch operation was finished with warning.\r\n* `Error` - Batch operation wasn't finished due to an error.\r\n",
      "type": "string",
      "enum": [
        "NotStarted",
        "Success",
        "Warning",
        "Error"
      ]
    },
    "BatchOperationStatus": {
      "description": "Contains information about performing batch operation on concrete subject.",
      "properties": {
        "$type": {
          "description": "Set to the name of concrete class, such as 'BatchOperationStatus' (or a class name that inherits from this class)",
          "example": "BatchOperationStatus",
          "type": "string"
        },
        "Id": {
          "description": "Gets the subject id.",
          "type": "integer",
          "format": "int32"
        },
        "CreatedItems": {
          "description": "Gets the list of the Ids of the created items during batch operation.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "ErrorCode": {
          "description": "Gets the error code in case of error during operation (warning, error).",
          "type": "string"
        },
        "Information": {
          "description": "Gets the information about an operation being performed (warning, error).",
          "type": "string"
        },
        "State": {
          "$ref": "#/definitions/BatchOperationState",
          "description": "Gets the state of the current batch operation."
        },
        "SubjectId": {
          "description": "Gets the subject id.",
          "type": "string"
        },
        "ValidationErrors": {
          "description": "Gets the list of \"ValidationError\" which were raised while performing an operation.",
          "items": {
            "$ref": "#/definitions/ValidationError"
          },
          "xml": {
            "name": "ValidationError",
            "wrapped": true
          },
          "type": "array"
        },
        "ValidationWarnings": {
          "description": "Gets the list of \"ValidationWarning\" which were raised while performing an operation.",
          "items": {
            "$ref": "#/definitions/ValidationWarning"
          },
          "xml": {
            "name": "ValidationWarning",
            "wrapped": true
          },
          "type": "array"
        }
      },
      "discriminator": "$type",
      "xml": {
        "name": "BatchOperationStatus"
      },
      "type": "object"
    },
    "BatchPromoteDemoteRequest": {
      "description": "Represents the request for the promote or demote batch operations.",
      "allOf": [
        {
          "$ref": "#/definitions/BatchOperationRequest"
        },
        {
          "properties": {
            "DestinationRepositoryId": {
              "description": "Gets or sets the identifier of the parent/child repository where item should be promoted/demoted to.",
              "type": "string"
            },
            "Instruction": {
              "$ref": "#/definitions/OperationInstruction"
            }
          },
          "type": "object"
        }
      ],
      "xml": {
        "name": "BatchPromoteDemoteRequest"
      },
      "type": "object"
    },
    "BatchPublishRequest": {
      "description": "Represents the request for the publish batch operation.",
      "allOf": [
        {
          "$ref": "#/definitions/AbstractBatchPublishRequest"
        },
        {
          "properties": {
            "PublishInstruction": {
              "$ref": "#/definitions/PublishInstruction"
            }
          },
          "type": "object"
        }
      ],
      "xml": {
        "name": "BatchPublishRequest"
      },
      "type": "object"
    },
    "BatchReAssignActivityRequest": {
      "description": "Represents the request for the re-assign activity batch operation.",
      "allOf": [
        {
          "$ref": "#/definitions/BatchOperationRequest"
        },
        {
          "properties": {
            "AssigneeId": {
              "description": "Gets or sets the identifier of the new Assignee.",
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "xml": {
        "name": "BatchReAssignActivityRequest"
      },
      "type": "object"
    },
    "BatchReClassifyRequest": {
      "description": "Represents the request for the re-classify batch operation.",
      "allOf": [
        {
          "$ref": "#/definitions/BatchOperationRequest"
        },
        {
          "properties": {
            "KeywordIdsToAdd": {
              "description": "Gets or sets the collection of Keyword identifiers to add to the item.",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "KeywordIdsToRemove": {
              "description": "Gets or sets the collection of Keyword identifiers to remove from the item.",
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "type": "object"
        }
      ],
      "xml": {
        "name": "BatchReClassifyRequest"
      },
      "type": "object"
    },
    "BatchSuspendActivityRequest": {
      "description": "Represents the request for the suspend activity batch operation.",
      "allOf": [
        {
          "$ref": "#/definitions/BatchOperationRequest"
        },
        {
          "properties": {
            "Reason": {
              "description": "Gets or sets the reason of the suspending activity.",
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "xml": {
        "name": "BatchSuspendActivityRequest"
      },
      "type": "object"
    },
    "BatchSwitchUserEnabledStateRequest": {
      "description": "Represents the request for the batch operation that changes the enabled state of users.",
      "allOf": [
        {
          "$ref": "#/definitions/BatchOperationRequest"
        },
        {
          "properties": {
            "IsEnabled": {
              "description": "Gets or sets a new value for \"User.IsEnabled\" property.",
              "type": "boolean"
            }
          },
          "type": "object"
        }
      ],
      "xml": {
        "name": "BatchSwitchUserEnabledStateRequest"
      },
      "type": "object"
    },
    "BatchUndoCheckOutRequest": {
      "description": "Represents the request for the undo check-out batch operation.",
      "allOf": [
        {
          "$ref": "#/definitions/BatchOperationRequest"
        },
        {
          "properties": {
            "RemovePermanentLock": {
              "description": "A permanent lock is set when the user performs an explicit checkout action in the UI.\r\nIt is removed when the user performs an explicit undo checkout action in the UI.\r\nAvailable values:\r\n* True – removes the permanent lock after the check-in action.\r\n* False – does not remove the lock after the check-in action, such as when the item is still being edited.",
              "type": "boolean"
            }
          },
          "type": "object"
        }
      ],
      "xml": {
        "name": "BatchUndoCheckOutRequest"
      },
      "type": "object"
    },
    "BatchUnPublishRequest": {
      "description": "Represents the request for the un-publish batch operation.",
      "allOf": [
        {
          "$ref": "#/definitions/AbstractBatchPublishRequest"
        },
        {
          "properties": {
            "UnPublishInstruction": {
              "$ref": "#/definitions/UnPublishInstruction"
            }
          },
          "type": "object"
        }
      ],
      "xml": {
        "name": "BatchUnPublishRequest"
      },
      "type": "object"
    },
    "BinaryContent": {
      "description": "Represents the binary content of a Multimedia Component or a Template.",
      "properties": {
        "$type": {
          "description": "Set to the name of concrete class, such as 'BinaryContent' (or a class name that inherits from this class)",
          "example": "BinaryContent",
          "type": "string"
        },
        "BlobId": {
          "description": "Gets the ID of the binary in the permanent content storage.",
          "type": "string"
        },
        "ExternalBinaryUri": {
          "description": "Gets or sets the URI for the external binary content.",
          "type": "string"
        },
        "Filename": {
          "description": "Gets or sets the file name of the binary content.",
          "type": "string"
        },
        "IsExternal": {
          "description": "Gets or sets whether the binary content is stored internally or externally.",
          "type": "boolean"
        },
        "MimeType": {
          "description": "Gets a value indicating the MimeType of the binary content.",
          "type": "string"
        },
        "MultimediaType": {
          "$ref": "#/definitions/Link",
          "description": "Gets or sets the Multimedia Type of the binary content."
        },
        "Size": {
          "description": "Gets the size of the binary data.",
          "type": "integer",
          "format": "int64"
        },
        "UploadFromFile": {
          "description": "Gets or sets the uploaded filename of the binary content.",
          "type": "string"
        },
        "Url": {
          "description": "Url that can be used to navigate and get a binary.",
          "type": "string"
        }
      },
      "discriminator": "$type",
      "xml": {
        "name": "BinaryContent"
      },
      "type": "object"
    },
    "BinaryUploadResponse": {
      "description": "Represents information about uploaded file.",
      "properties": {
        "$type": {
          "description": "Set to the name of concrete class, such as 'BinaryUploadResponse' (or a class name that inherits from this class)",
          "example": "BinaryUploadResponse",
          "type": "string"
        },
        "FileName": {
          "description": "Uploaded file name.",
          "type": "string"
        },
        "Links": {
          "description": "Hateoas links to uploaded file.",
          "items": {
            "$ref": "#/definitions/HateoasLink"
          },
          "xml": {
            "name": "HateoasLink",
            "wrapped": true
          },
          "type": "array"
        },
        "MultimediaType": {
          "$ref": "#/definitions/Link",
          "description": "Link to MultimediaType for uploaded file."
        },
        "TempFileId": {
          "description": "The identifier of uploaded file.",
          "type": "string"
        }
      },
      "discriminator": "$type",
      "xml": {
        "name": "BinaryUploadResponse"
      },
      "type": "object"
    },
    "BlueprintHierarchyResponse": {
      "description": "Response model for Blueprint Hierarchy request",
      "properties": {
        "$type": {
          "description": "Set to the name of concrete class, such as 'BlueprintHierarchyResponse' (or a class name that inherits from this class)",
          "example": "BlueprintHierarchyResponse",
          "type": "string"
        },
        "Items": {
          "description": "Collection of Items in the blueprint hierarchy",
          "items": {
            "$ref": "#/definitions/BlueprintNode"
          },
          "xml": {
            "name": "BlueprintNode",
            "wrapped": true
          },
          "type": "array"
        }
      },
      "discriminator": "$type",
      "xml": {
        "name": "BlueprintHierarchyResponse"
      },
      "type": "object"
    },
    "BlueprintInfo": {
      "description": "BluePrint info for Repository-Local Objects.",
      "properties": {
        "$type": {
          "description": "Set to the name of concrete class, such as 'BlueprintInfo' (or a class name that inherits from this class)",
          "example": "BlueprintInfo",
          "type": "string"
        },
        "IsLocalized": {
          "description": "Gets or sets whether the item is localized in the current context Publication.",
          "type": "boolean"
        },
        "IsShared": {
          "description": "Gets or sets whether the item is shared in the current context Publication.",
          "type": "boolean"
        },
        "OwningRepository": {
          "$ref": "#/definitions/Link",
          "description": "Gets or sets the Repository in which the item physically resides."
        },
        "PrimaryBluePrintParentItem": {
          "$ref": "#/definitions/Link",
          "description": "Gets or sets the link to a master item (an item in the top of the BluePrint chain, where it was originally created)."
        }
      },
      "discriminator": "$type",
      "xml": {
        "name": "BlueprintInfo"
      },
      "type": "object"
    },
    "BlueprintNode": {
      "description": "Represent blueprint node when retrieving the hierarchy.",
      "properties": {
        "$type": {
          "description": "Set to the name of concrete class, such as 'BlueprintNode' (or a class name that inherits from this class)",
          "example": "BlueprintNode",
          "type": "string"
        },
        "Children": {
          "description": "Links to immediate child context repositories.",
          "items": {
            "$ref": "#/definitions/Link"
          },
          "xml": {
            "name": "Link",
            "wrapped": true
          },
          "type": "array"
        },
        "ContextRepositoryId": {
          "description": "The Id of the context repository.",
          "type": "string"
        },
        "Item": {
          "$ref": "#/definitions/IdentifiableObject",
          "description": "The item in context repository."
        },
        "Parents": {
          "description": "Links to immediate parent context repositories.",
          "items": {
            "$ref": "#/definitions/Link"
          },
          "xml": {
            "name": "Link",
            "wrapped": true
          },
          "type": "array"
        }
      },
      "discriminator": "$type",
      "xml": {
        "name": "BlueprintNode"
      },
      "type": "object"
    },
    "Bundle": {
      "description": "Represents a Bundle which is used to group Repository Local Objects for Release Management purposes.",
      "required": [
        "Id"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/VirtualFolder"
        },
        {
          "required": [
            "Id"
          ],
          "properties": {
            "Items": {
              "description": "Gets or sets the collection of links to items in the Bundle.",
              "items": {
                "$ref": "#/definitions/Link"
              },
              "xml": {
                "name": "Link",
                "wrapped": true
              },
              "type": "array"
            }
          },
          "type": "object"
        }
      ],
      "xml": {
        "name": "Bundle"
      },
      "type": "object"
    },
    "BusinessProcessType": {
      "description": "Represents a Business Process Type: defines a type of (publishing) Business Process, including a set of publishing Target Types and workflows.",
      "required": [
        "Id"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/OrganizationalItem"
        },
        {
          "required": [
            "Id"
          ],
          "properties": {
            "BundleSchemas": {
              "description": "Gets or sets the bundle schemas which are applicable for this Business Process Type.",
              "items": {
                "$ref": "#/definitions/Link"
              },
              "xml": {
                "name": "Link",
                "wrapped": true
              },
              "type": "array"
            },
            "CdTopologyTypeId": {
              "description": "Gets or sets the topology type id of the Business Process Type.",
              "type": "string"
            },
            "Description": {
              "description": "Gets or sets the description of the Business Process Type.",
              "type": "string"
            },
            "TargetTypes": {
              "description": "Gets or sets the associated Target Types of this Business Process Type.",
              "items": {
                "$ref": "#/definitions/TargetType"
              },
              "xml": {
                "name": "TargetType",
                "wrapped": true
              },
              "type": "array"
            }
          },
          "type": "object"
        }
      ],
      "xml": {
        "name": "BusinessProcessType"
      },
      "type": "object"
    },
    "Capabilities": {
      "description": "Represents information about available capabilities and features",
      "properties": {
        "$type": {
          "description": "Set to the name of concrete class, such as 'Capabilities' (or a class name that inherits from this class)",
          "example": "Capabilities",
          "type": "string"
        },
        "EnabledFeatures": {
          "description": "Symbolic names of enabled features.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "Links": {
          "description": "API links.",
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        }
      },
      "discriminator": "$type",
      "xml": {
        "name": "Capabilities"
      },
      "type": "object"
    },
    "Category": {
      "description": "Represents the data of a Category of Keywords.",
      "required": [
        "Id"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/OrganizationalItem"
        },
        {
          "required": [
            "Id"
          ],
          "properties": {
            "AllowedParentCategories": {
              "description": "Get access to the allowed parent Categories.",
              "items": {
                "$ref": "#/definitions/Link"
              },
              "xml": {
                "name": "Link",
                "wrapped": true
              },
              "type": "array"
            },
            "Description": {
              "description": "Gets or sets the description of the Category.",
              "type": "string"
            },
            "IsTaxonomyRoot": {
              "description": "Gets whether the Category is a root Category (i.e. it has no allowed parent Categories other than itself).",
              "type": "boolean"
            },
            "KeywordMetadataSchema": {
              "$ref": "#/definitions/Link"
            },
            "UseForIdentification": {
              "description": "Gets or sets indicating whether the Category can be used for Taxonomy identification.",
              "type": "boolean"
            },
            "UseForNavigation": {
              "description": "Gets or sets a value indicating whether the taxonomy in this Category can be published.",
              "type": "boolean"
            },
            "XmlName": {
              "description": "Gets or sets the XML (type) name of the Category.",
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "xml": {
        "name": "Category"
      },
      "type": "object"
    },
    "CheckInRequest": {
      "description": "Removes permanent lock and creates a new version of the item.",
      "properties": {
        "$type": {
          "description": "Set to the name of concrete class, such as 'CheckInRequest' (or a class name that inherits from this class)",
          "example": "CheckInRequest",
          "type": "string"
        },
        "RemovePermanentLock": {
          "description": "A permanent lock is set when the user performs an explicit checkout action in the UI.\r\nIt is removed when the user performs an explicit checkin action in the UI.\r\nAvailable values:\r\n* True – removes the permanent lock after the check-in action.\r\n* False – does not remove the lock after the check-in action, such as when the item is still being edited.",
          "type": "boolean"
        }
      },
      "discriminator": "$type",
      "xml": {
        "name": "CheckInRequest"
      },
      "type": "object"
    },
    "CheckOutRequest": {
      "description": "Checks out versioned item.",
      "properties": {
        "$type": {
          "description": "Set to the name of concrete class, such as 'CheckOutRequest' (or a class name that inherits from this class)",
          "example": "CheckOutRequest",
          "type": "string"
        },
        "SetPermanentLock": {
          "description": "A permanent lock is set when the user performs an explicit checkout action in the UI and removed when the user performs an explicit checkin action in the UI.\r\nCheckout or checkin actions without permanent lock effectively do nothing if item was checked out with permanent lock.\r\nAvailable values:\r\n* True – sets a permanent lock that will be removed only when the user performs an explicit check-in action.\r\n* False – sets no lock, which means the check-in and check-out actions effectively do nothing.",
          "type": "boolean"
        }
      },
      "discriminator": "$type",
      "xml": {
        "name": "CheckOutRequest"
      },
      "type": "object"
    },
    "ClaimMapping": {
      "description": "Abstract base class representing the data of a mapping between a Claim and a TCM Group.",
      "properties": {
        "$type": {
          "description": "Set to the name of concrete class, such as 'ClaimMapping' (or a class name that inherits from this class)",
          "example": "<Set to a class name inheriting from 'ClaimMapping'>",
          "type": "string"
        },
        "Description": {
          "description": "Gets or sets the description of the mapping.",
          "type": "string"
        },
        "Group": {
          "$ref": "#/definitions/Link",
          "description": "Gets or sets the Group for which the mapping exists."
        }
      },
      "discriminator": "$type",
      "xml": {
        "name": "ClaimMapping"
      },
      "type": "object"
    },
    "ClassificationDetail": {
      "description": "Classsification details for a particular field.",
      "properties": {
        "$type": {
          "description": "Set to the name of concrete class, such as 'ClassificationDetail' (or a class name that inherits from this class)",
          "example": "ClassificationDetail",
          "type": "string"
        },
        "Category": {
          "$ref": "#/definitions/Link",
          "description": "Link to the category that was used for Classification."
        },
        "FieldName": {
          "description": "Name of the field.",
          "type": "string"
        },
        "FieldPath": {
          "description": "Path to the field in the data.",
          "type": "string"
        },
        "IsMetadataField": {
          "description": "Indicates whether the field is a \"metadata\" field.",
          "type": "boolean"
        },
        "Keywords": {
          "description": "The keywords that apply to the field.",
          "items": {
            "$ref": "#/definitions/Link"
          },
          "xml": {
            "name": "Link",
            "wrapped": true
          },
          "type": "array"
        }
      },
      "discriminator": "$type",
      "xml": {
        "name": "ClassificationDetail"
      },
      "type": "object"
    },
    "ClassificationInfo": {
      "description": "Contains classification information for an Item.",
      "properties": {
        "$type": {
          "description": "Set to the name of concrete class, such as 'ClassificationInfo' (or a class name that inherits from this class)",
          "example": "ClassificationInfo",
          "type": "string"
        },
        "Details": {
          "description": "Classification details (per field).",
          "items": {
            "$ref": "#/definitions/ClassificationDetail"
          },
          "xml": {
            "name": "ClassificationDetail",
            "wrapped": true
          },
          "type": "array"
        },
        "Item": {
          "$ref": "#/definitions/RepositoryLocalObject",
          "description": "The item that was Classified."
        }
      },
      "discriminator": "$type",
      "xml": {
        "name": "ClassificationInfo"
      },
      "type": "object"
    },
    "Component": {
      "description": "Represents the data of a Component: a generic holder of content and metadata.",
      "required": [
        "Id"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/VersionedItem"
        },
        {
          "required": [
            "Id"
          ],
          "properties": {
            "ApprovalStatus": {
              "$ref": "#/definitions/Link"
            },
            "BinaryContent": {
              "$ref": "#/definitions/BinaryContent"
            },
            "ComponentType": {
              "$ref": "#/definitions/ComponentType",
              "description": "Gets the type of the Component (Normal or Multimedia)."
            },
            "Content": {
              "$ref": "#/definitions/FieldsValueDictionary"
            },
            "IsBasedOnMandatorySchema": {
              "description": "Gets whether the Component is based on a Mandatory Schema",
              "type": "boolean"
            },
            "IsBasedOnTridionWebSchema": {
              "description": "Gets whether the Component is based on a Tridion Web Schema",
              "type": "boolean"
            },
            "Schema": {
              "$ref": "#/definitions/Link"
            },
            "WorkflowInfo": {
              "$ref": "#/definitions/WorkflowInfo"
            }
          },
          "type": "object"
        }
      ],
      "xml": {
        "name": "Component"
      },
      "type": "object"
    },
    "ComponentLinkFieldDefinition": {
      "description": "Represents a Component link field definition (in a Schema).",
      "required": [
        "Description",
        "MaxOccurs",
        "MinOccurs",
        "Name"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/ItemPublishableFieldDefinition"
        },
        {
          "required": [
            "Description",
            "MaxOccurs",
            "MinOccurs",
            "Name"
          ],
          "properties": {
            "AllowedTargetSchemas": {
              "description": "Gets access to the allowed Schemas for the linked Components.",
              "items": {
                "$ref": "#/definitions/Link"
              },
              "xml": {
                "name": "Link",
                "wrapped": true
              },
              "type": "array"
            },
            "AllowMultimediaLinks": {
              "description": "Gets or sets whether links to Multimedia Components are allowed.",
              "type": "boolean"
            },
            "DefaultValue": {
              "$ref": "#/definitions/Link"
            }
          },
          "type": "object"
        }
      ],
      "xml": {
        "name": "ComponentLinkFieldDefinition"
      },
      "type": "object"
    },
    "ComponentPresentation": {
      "description": "Represents a Component Presentation: essentially a combination of a Component and a Component Template.",
      "properties": {
        "$type": {
          "description": "Set to the name of concrete class, such as 'ComponentPresentation' (or a class name that inherits from this class)",
          "example": "ComponentPresentation",
          "type": "string"
        },
        "Component": {
          "$ref": "#/definitions/Link",
          "description": "Gets or sets the Component."
        },
        "ComponentTemplate": {
          "$ref": "#/definitions/Link",
          "description": "Gets or sets the Component Template."
        },
        "Conditions": {
          "description": "Gets or sets the (Target Group) conditions.",
          "items": {
            "$ref": "#/definitions/TargetGroupCondition"
          },
          "xml": {
            "name": "TargetGroupCondition",
            "wrapped": true
          },
          "type": "array"
        }
      },
      "discriminator": "$type",
      "xml": {
        "name": "ComponentPresentation"
      },
      "type": "object"
    },
    "ComponentPresentationConstraint": {
      "description": "Base class for Component Presentation Constraints (specified in a Region Schema).",
      "properties": {
        "$type": {
          "description": "Set to the name of concrete class, such as 'ComponentPresentationConstraint' (or a class name that inherits from this class)",
          "example": "ComponentPresentationConstraint",
          "type": "string"
        }
      },
      "discriminator": "$type",
      "xml": {
        "name": "ComponentPresentationConstraint"
      },
      "type": "object"
    },
    "ComponentTemplate": {
      "description": "Represents a Component Template: a template used to render a Component into a Component Presentation.",
      "required": [
        "Id"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/Template"
        },
        {
          "required": [
            "Id"
          ],
          "properties": {
            "AllowOnPage": {
              "description": "Gets or sets whether the Component Template may be used on a Page.",
              "type": "boolean"
            },
            "ApprovalStatus": {
              "$ref": "#/definitions/Link"
            },
            "DynamicTemplate": {
              "description": "Gets or sets the \"dynamic\" part of the Component Template: an XSLT which is executed on the Content Delivery system.",
              "type": "string"
            },
            "IsRepositoryPublishable": {
              "description": "Gets or sets whether the Component Template renders \"dynamic\" Component Presentations.",
              "type": "boolean"
            },
            "OutputFormat": {
              "description": "Gets or sets the format of the rendered Component Presentation.",
              "type": "string"
            },
            "Priority": {
              "description": "Gets or sets the priority used for resolving Component links.",
              "type": "integer",
              "format": "int32"
            },
            "RelatedSchemas": {
              "description": "Gets access to the \"related\" Schemas.",
              "items": {
                "$ref": "#/definitions/Link"
              },
              "xml": {
                "name": "Link",
                "wrapped": true
              },
              "type": "array"
            },
            "TrackingCategories": {
              "description": "Gets access to the \"tracking\" Categories.",
              "items": {
                "$ref": "#/definitions/Link"
              },
              "xml": {
                "name": "Link",
                "wrapped": true
              },
              "type": "array"
            },
            "WorkflowInfo": {
              "$ref": "#/definitions/WorkflowInfo"
            }
          },
          "type": "object"
        }
      ],
      "xml": {
        "name": "ComponentTemplate"
      },
      "type": "object"
    },
    "ComponentType": {
      "description": "Defines the subtype of a Component.\r\n\r\nMembers:\r\n* `Normal` - A normal Component containing XML content.\r\n* `Multimedia` - A Multimedia Component containing binary content.\r\n* `Widget` - A widget Component - a dedicated variant of the normal Component.\r\n",
      "type": "string",
      "enum": [
        "Normal",
        "Multimedia",
        "Widget"
      ]
    },
    "Condition": {
      "description": "Abstract base class for Conditions used in a Target Group definition.",
      "properties": {
        "$type": {
          "description": "Set to the name of concrete class, such as 'Condition' (or a class name that inherits from this class)",
          "example": "<Set to a class name inheriting from 'Condition'>",
          "type": "string"
        },
        "Negate": {
          "description": "Gets or sets whether the condition should be negated.",
          "type": "boolean"
        }
      },
      "discriminator": "$type",
      "xml": {
        "name": "Condition"
      },
      "type": "object"
    },
    "ConditionOperator": {
      "description": "Defines an operator used for comparison.\r\n\r\nMembers:\r\n* `Equals` - Compares if a numerical operand is equal to the given condition value.\r\n* `GreaterThan` - Compares if a numerical operand is greater than the given condition value.\r\n* `LessThan` - Compares if a numerical operand is less than the given condition value.\r\n* `NotEqual` - Compares if a numerical operand is not equal to the given condition value.\r\n* `StringEquals` - Compares if a string operand is equal to the given condition value.\r\n* `Contains` - Compares if a string operand contains the given condition value.\r\n* `StartsWith` - Compares if a string operand starts with the given condition value.\r\n* `EndsWith` - Compares if a string operand ends with the given condition value.\r\n",
      "type": "string",
      "enum": [
        "Equals",
        "GreaterThan",
        "LessThan",
        "NotEqual",
        "StringEquals",
        "Contains",
        "StartsWith",
        "EndsWith"
      ]
    },
    "CustomerCharacteristicCondition": {
      "description": "Represents a condition on a Customer Characteristic (a named value in the user profile).",
      "properties": {
        "Name": {
          "description": "Gets or sets the name of the Customer Characteristic.",
          "type": "string"
        },
        "Negate": {
          "description": "Gets or sets whether the condition should be negated.",
          "type": "boolean"
        },
        "Operator": {
          "$ref": "#/definitions/ConditionOperator",
          "description": "Gets or sets the operator used for comparing the Customer Characteristic's value against the \"Value\" specified in the condition."
        },
        "Value": {
          "description": "Gets or sets the value to compare the Customer Characteristic's value against.",
          "type": "string"
        }
      },
      "xml": {
        "name": "CustomerCharacteristicCondition"
      },
      "type": "object"
    },
    "DateFieldDefinition": {
      "description": "Represents a date field definition (in a Schema).",
      "required": [
        "Description",
        "MaxOccurs",
        "MinOccurs",
        "Name"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/ItemPublishableFieldDefinition"
        },
        {
          "required": [
            "Description",
            "MaxOccurs",
            "MinOccurs",
            "Name"
          ],
          "properties": {
            "DefaultValue": {
              "description": "Gets or sets the default value.",
              "example": "1970-01-01T00:00:00Z",
              "type": "string",
              "format": "date-time"
            },
            "IsMaxValueExclusive": {
              "description": "Gets or sets whether the specified maximum value is exclusive or inclusive.",
              "type": "boolean"
            },
            "IsMinValueExclusive": {
              "description": "Gets or sets whether the specified minimum value is exclusive or inclusive.",
              "type": "boolean"
            },
            "List": {
              "$ref": "#/definitions/DateListDefinition"
            },
            "MaxValue": {
              "description": "Gets or sets the maximum value constraint.",
              "example": "1970-01-01T00:00:00Z",
              "type": "string",
              "format": "date-time"
            },
            "MinValue": {
              "description": "Gets or sets the minimum value constraint.",
              "example": "1970-01-01T00:00:00Z",
              "type": "string",
              "format": "date-time"
            },
            "Pattern": {
              "description": "Gets or sets a regular expression pattern to constrain the value.",
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "xml": {
        "name": "DateFieldDefinition"
      },
      "type": "object"
    },
    "DateListDefinition": {
      "description": "Provides information about whether/how to present a list of allowed date field values.",
      "allOf": [
        {
          "$ref": "#/definitions/ListDefinition"
        },
        {
          "properties": {
            "Entries": {
              "description": "Gets access to the allowed values.",
              "items": {
                "type": "string",
                "format": "date-time"
              },
              "type": "array"
            }
          },
          "type": "object"
        }
      ],
      "xml": {
        "name": "DateListDefinition"
      },
      "type": "object"
    },
    "DecisionActivityFinishRequest": {
      "description": "Represents the data required for finishing a decision Activity.",
      "allOf": [
        {
          "$ref": "#/definitions/ActivityFinishRequest"
        },
        {
          "properties": {
            "NextActivity": {
              "$ref": "#/definitions/Link"
            }
          },
          "type": "object"
        }
      ],
      "xml": {
        "name": "DecisionActivityFinishRequest"
      },
      "type": "object"
    },
    "DeleteTaxonomyNodeMode": {
      "description": "Specifies what will happen to the child nodes of a Taxonomy node after that node's deletion.\r\n\r\nMembers:\r\n* `DeleteBranch` - Specifies that the entire branch of descendant nodes will be deleted, excluding nodes in child Publications.\r\n* `DeleteBranchIncludeChildPublications` - Specifies that the entire branch of descendants will be deleted, including nodes in child Publications.\r\n* `RemoveParentFromChildren` - Specifies that the deleted node will be removed from the children's parents.\n            Children will become root if they have no other parents.\n            If the children have other parents, those parents are preserved.\r\n* `AssignChildrenToGrandparents` - Specifies that the parents of the deleted node adopt the deleted node's children.\n            If the children have other parents, those parents are preserved.\r\n",
      "type": "string",
      "enum": [
        "DeleteBranch",
        "DeleteBranchIncludeChildPublications",
        "RemoveParentFromChildren",
        "AssignChildrenToGrandparents"
      ]
    },
    "DeployerAction": {
      "description": "Represents the action the deployer needs to take.\r\n\r\nMembers:\r\n* `Commit` - The deployer should commit the transport package.\r\n* `Wait` - The deployer should wait to commit the transport package.\r\n* `Abort` - The deployer should abort the transport package.\r\n",
      "type": "string",
      "enum": [
        "Commit",
        "Wait",
        "Abort"
      ]
    },
    "DirectoryGroupMapping": {
      "description": "Represents the data of a mapping between a Directory Service Group or Subtree and a TCM Group.",
      "properties": {
        "Description": {
          "description": "Gets or sets the description of the mapping.",
          "type": "string"
        },
        "DirectoryServiceName": {
          "description": "Gets or sets the Directory Service name to match on.",
          "type": "string"
        },
        "Group": {
          "$ref": "#/definitions/Link",
          "description": "Gets or sets the Group for which the mapping exists."
        },
        "SearchDN": {
          "description": "Gets or sets the Distinguished Name (DN) of the Group or Subtree to match on.",
          "type": "string"
        },
        "SearchType": {
          "$ref": "#/definitions/DirectorySearchType",
          "description": "Gets or sets the search type: either Subtree or Group."
        }
      },
      "xml": {
        "name": "DirectoryGroupMapping"
      },
      "type": "object"
    },
    "DirectorySearchType": {
      "description": "Search types for the Directory Group Mapping.\r\n\r\nMembers:\r\n* `Subtree` - Search in the given subtree.\r\n* `Group` - Search in the given group.\r\n",
      "type": "string",
      "enum": [
        "Subtree",
        "Group"
      ]
    },
    "DynamicVersionInfo": {
      "description": "Represents information about the dynamic version of a Versioned Item.",
      "properties": {
        "$type": {
          "description": "Set to the name of concrete class, such as 'DynamicVersionInfo' (or a class name that inherits from this class)",
          "example": "DynamicVersionInfo",
          "type": "string"
        },
        "Revision": {
          "description": "Gets or sets the last revision counter.",
          "type": "integer",
          "format": "int32"
        },
        "RevisionDate": {
          "description": "Gets or sets the date/time at which the item was last modified (saved).",
          "example": "1970-01-01T00:00:00Z",
          "type": "string",
          "format": "date-time"
        },
        "Revisor": {
          "$ref": "#/definitions/Link",
          "description": "Gets or sets link to user who did last revision (last save action)."
        }
      },
      "discriminator": "$type",
      "xml": {
        "name": "DynamicVersionInfo"
      },
      "type": "object"
    },
    "EmbeddedRegion": {
      "description": "Represents the data object of an Embedded Region.",
      "allOf": [
        {
          "$ref": "#/definitions/Region"
        },
        {
          "properties": {
            "ComponentPresentations": {
              "description": "Gets or sets the collection of Component Presentations.",
              "items": {
                "$ref": "#/definitions/ComponentPresentation"
              },
              "xml": {
                "name": "ComponentPresentation",
                "wrapped": true
              },
              "type": "array"
            },
            "Metadata": {
              "$ref": "#/definitions/FieldsValueDictionary"
            },
            "Regions": {
              "description": "Gets or sets the collection of nested Regions.",
              "items": {
                "$ref": "#/definitions/Region"
              },
              "xml": {
                "name": "Region",
                "wrapped": true
              },
              "type": "array"
            },
            "RegionSchema": {
              "$ref": "#/definitions/Link"
            }
          },
          "type": "object"
        }
      ],
      "xml": {
        "name": "EmbeddedRegion"
      },
      "type": "object"
    },
    "EmbeddedSchemaFieldDefinition": {
      "description": "Represents an embedded schema field definition (in a Schema).",
      "required": [
        "Description",
        "MaxOccurs",
        "MinOccurs",
        "Name"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/ItemFieldDefinition"
        },
        {
          "required": [
            "Description",
            "MaxOccurs",
            "MinOccurs",
            "Name"
          ],
          "properties": {
            "EmbeddedFields": {
              "$ref": "#/definitions/FieldsDefinitionDictionary"
            },
            "EmbeddedSchema": {
              "$ref": "#/definitions/Link"
            }
          },
          "type": "object"
        }
      ],
      "xml": {
        "name": "EmbeddedSchemaFieldDefinition"
      },
      "type": "object"
    },
    "ErrorType": {
      "description": "Enum of load error types.\r\n\r\nMembers:\r\n* `None` - No error.\r\n* `Error` - General error.\r\n* `SecurityError` - User has no permissions to read an item.\r\n",
      "type": "string",
      "enum": [
        "None",
        "Error",
        "SecurityError"
      ]
    },
    "ExpandableLink": {
      "description": "Represents a link to an Identifiable Object which may contain the linked data.",
      "required": [
        "IdRef"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/Link"
        },
        {
          "required": [
            "IdRef"
          ],
          "properties": {
            "ExpandedData": {
              "$ref": "#/definitions/IdentifiableObject"
            }
          },
          "type": "object"
        }
      ],
      "xml": {
        "name": "ExpandableLink"
      },
      "type": "object"
    },
    "ExtensionPropertyDictionary": {
      "description": "Represents a collection of Extension Properties.",
      "additionalProperties": {},
      "type": "object"
    },
    "ExternalCategory": {
      "description": "Represents an External Category (mapped to an external Taxonomy Management System).",
      "required": [
        "Id"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/Category"
        },
        {
          "required": [
            "Id"
          ],
          "properties": {
            "DisplayType": {
              "description": "Gets or sets display type of the External Category.",
              "type": "string"
            },
            "StubId": {
              "description": "Gets or sets the Stub Category ID (TCM URI)",
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "xml": {
        "name": "ExternalCategory"
      },
      "type": "object"
    },
    "ExternalComponent": {
      "description": "Represents a External Component: an item provided from external system.",
      "required": [
        "Id"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/Component"
        },
        {
          "required": [
            "Id"
          ],
          "properties": {
            "DirectLinkToPublished": {
              "description": "Gets or sets a direct link to a published rendition of the item.",
              "type": "string"
            },
            "DisplayType": {
              "description": "Gets or sets display type of external container.",
              "type": "string"
            },
            "ExternalMetadata": {
              "$ref": "#/definitions/FieldsValueDictionary"
            },
            "ExternalMetadataSchemaFields": {
              "$ref": "#/definitions/FieldsDefinitionDictionary"
            },
            "StubId": {
              "description": "Gets or sets the Stub Component ID (TCM URI)",
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "xml": {
        "name": "ExternalComponent"
      },
      "type": "object"
    },
    "ExternalContainer": {
      "description": "Represents a External Container: a container provided from external system.",
      "required": [
        "Id"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/Folder"
        },
        {
          "required": [
            "Id"
          ],
          "properties": {
            "DisplayType": {
              "description": "Gets or sets display type of external container.",
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "xml": {
        "name": "ExternalContainer"
      },
      "type": "object"
    },
    "ExternalKeyword": {
      "description": "Represents an External Keyword (mapped to an external Taxonomy Management System).",
      "required": [
        "Id"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/Keyword"
        },
        {
          "required": [
            "Id"
          ],
          "properties": {
            "AlternativeLabels": {
              "description": "Gets or sets the alternative labels (synonyms)",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "DisplayType": {
              "description": "Gets or sets display type of the External Keyword.",
              "type": "string"
            },
            "ExternalMetadata": {
              "$ref": "#/definitions/FieldsValueDictionary"
            },
            "ExternalMetadataSchemaFields": {
              "$ref": "#/definitions/FieldsDefinitionDictionary"
            },
            "HiddenLabels": {
              "description": "Gets or sets the hidden labels",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "StubId": {
              "description": "Gets or sets the Stub Keyword ID (TCM URI)",
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "xml": {
        "name": "ExternalKeyword"
      },
      "type": "object"
    },
    "ExternalLinkFieldDefinition": {
      "description": "Represents an external link field definition (in a Schema).",
      "required": [
        "Description",
        "MaxOccurs",
        "MinOccurs",
        "Name"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/TextFieldDefinition"
        },
        {
          "required": [
            "Description",
            "MaxOccurs",
            "MinOccurs",
            "Name"
          ],
          "properties": {
            "DefaultValue": {
              "description": "Gets or sets the default value.",
              "type": "string"
            },
            "UseForAutoClassification": {
              "readOnly": true,
              "type": "boolean"
            }
          },
          "type": "object"
        }
      ],
      "xml": {
        "name": "ExternalLinkFieldDefinition"
      },
      "type": "object"
    },
    "ExternalVersionInfo": {
      "description": "Version info for External Components.",
      "allOf": [
        {
          "$ref": "#/definitions/FullVersionInfo"
        },
        {
          "properties": {
            "ExternalCreator": {
              "description": "Gets or sets the name of the user who created the item in the external system.",
              "type": "string"
            },
            "ExternalRevisor": {
              "description": "Gets or sets the name of the user who last modified the item in the external system.",
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "xml": {
        "name": "ExternalVersionInfo"
      },
      "type": "object"
    },
    "FavoriteLink": {
      "description": "Represents the link to a favorite item.",
      "properties": {
        "$type": {
          "description": "Set to the name of concrete class, such as 'FavoriteLink' (or a class name that inherits from this class)",
          "example": "FavoriteLink",
          "type": "string"
        },
        "IdRef": {
          "description": "Gets the TCM URI of the referenced item.",
          "type": "string"
        },
        "Title": {
          "description": "Gets the title of the referenced item.",
          "type": "string"
        },
        "Path": {
          "description": "Gets the path to the container where the referenced item is located.",
          "type": "string"
        }
      },
      "discriminator": "$type",
      "xml": {
        "name": "FavoriteLink"
      },
      "type": "object"
    },
    "FieldsDefinitionDictionary": {
      "description": "Represents the set of Item Field Definitions grouped by the field definition name.",
      "additionalProperties": {
        "$ref": "#/definitions/ItemFieldDefinition"
      },
      "type": "object"
    },
    "FieldsValueDictionary": {
      "description": "Represents the set of field values grouped by the field name.",
      "additionalProperties": {},
      "type": "object"
    },
    "Folder": {
      "description": "Represents the data of a Folder: an item used to organize the items in a Repository.",
      "required": [
        "Id"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/OrganizationalItem"
        },
        {
          "required": [
            "Id"
          ],
          "properties": {
            "IsActive": {
              "description": "Gets or sets the active state of the Folder. \r\nIf the active state is set to false, the Folder and the items inside it cannot be published.",
              "type": "boolean"
            },
            "IsActiveResolvedValue": {
              "description": "Gets a value indicating whether this Folder and its items can be published.\r\nReturns true if the active state of this Folder and all of its ancestors is true.\r\nReturns false if the active state of this Folder or any of its ancestors is false.\r\nThe individual active state of each Folder is represented by the property \"IsActive\".",
              "type": "boolean"
            },
            "IsLinkedSchemaMandatory": {
              "description": "Gets or sets whether the linked Schema is mandatory.",
              "type": "boolean"
            },
            "LinkedSchema": {
              "$ref": "#/definitions/Link"
            }
          },
          "type": "object"
        }
      ],
      "xml": {
        "name": "Folder"
      },
      "type": "object"
    },
    "FormattingFeatures": {
      "description": "Represents the formatting options.",
      "properties": {
        "$type": {
          "description": "Set to the name of concrete class, such as 'FormattingFeatures' (or a class name that inherits from this class)",
          "example": "FormattingFeatures",
          "type": "string"
        },
        "AccessibilityLevel": {
          "description": "Gets or sets the Web Content Accessibility Guidelines (WCAG) setting that you choose, shows or hides buttons for the various WCAG levels.",
          "type": "integer",
          "format": "int32"
        },
        "DisallowedActions": {
          "description": "Gets or sets the formatting actions that a user can not perform on text within the format area.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "DisallowedStyles": {
          "description": "Gets or sets the styles that a user can not apply to text within a format area.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "DocType": {
          "description": "Gets or sets the rules that are applied to this format area when Components based on this Schema are validated.\r\nYou have the option of selecting \"Strict\" or \"Transitional\" document types.",
          "type": "string"
        }
      },
      "discriminator": "$type",
      "xml": {
        "name": "FormattingFeatures"
      },
      "type": "object"
    },
    "FullVersionInfo": {
      "description": "Full version info for Versioned Items.",
      "allOf": [
        {
          "$ref": "#/definitions/LimitedVersionInfo"
        },
        {
          "properties": {
            "CheckOutDate": {
              "description": "Gets or sets the date/time at which the item was checked out.",
              "example": "1970-01-01T00:00:00Z",
              "type": "string",
              "format": "date-time"
            },
            "CheckOutUser": {
              "$ref": "#/definitions/Link"
            },
            "IsNew": {
              "description": "Gets or sets the value indicating whether the item is \"new\" (not checked in yet).",
              "type": "boolean"
            },
            "LastVersion": {
              "description": "Gets or sets the last version number of this item.",
              "type": "integer",
              "format": "int32"
            },
            "LockType": {
              "description": "Gets or sets the type of lock on the item (if any).",
              "items": {
                "$ref": "#/definitions/LockType"
              },
              "xml": {
                "name": "LockType",
                "wrapped": true
              },
              "type": "array"
            },
            "Revision": {
              "description": "Gets or sets the revision number of this item.",
              "type": "integer",
              "format": "int32"
            },
            "Revisor": {
              "$ref": "#/definitions/Link"
            },
            "SystemComment": {
              "description": "Gets the system comment.",
              "type": "string"
            },
            "UserComment": {
              "description": "Gets the comment set by the user during check-in of this item.",
              "type": "string"
            },
            "Version": {
              "description": "Gets or sets the version number of this item.",
              "type": "integer",
              "format": "int32"
            }
          },
          "type": "object"
        }
      ],
      "xml": {
        "name": "FullVersionInfo"
      },
      "type": "object"
    },
    "Group": {
      "description": "Represents a data of Group of Users.",
      "required": [
        "Id"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/Trustee"
        },
        {
          "required": [
            "Id"
          ],
          "properties": {
            "ClaimMappings": {
              "description": "Gets or sets access to the Group's Claim Mappings.",
              "items": {
                "$ref": "#/definitions/ClaimMapping"
              },
              "xml": {
                "name": "ClaimMapping",
                "wrapped": true
              },
              "type": "array"
            },
            "DefaultGroupId": {
              "description": "Gets the Default Group Id.",
              "type": "integer",
              "format": "int32"
            },
            "InheritedSystemPrivileges": {
              "$ref": "#/definitions/SystemPrivilegesDictionary"
            },
            "Scope": {
              "description": "Gets or sets access to the Group's scope (also known as \"usage constraints\"): the Repositories in which the Group can be used.",
              "items": {
                "$ref": "#/definitions/LinkWithIsEditable"
              },
              "xml": {
                "name": "LinkWithIsEditable",
                "wrapped": true
              },
              "type": "array"
            },
            "SystemPrivileges": {
              "description": "Gets or sets a collection of \"SystemPrivilege\" assigned for this Group.",
              "items": {
                "$ref": "#/definitions/SystemPrivilege"
              },
              "xml": {
                "name": "SystemPrivilege",
                "wrapped": true
              },
              "type": "array"
            }
          },
          "type": "object"
        }
      ],
      "xml": {
        "name": "Group"
      },
      "type": "object"
    },
    "GroupMembership": {
      "description": "Contains the scope of a Group.",
      "properties": {
        "$type": {
          "description": "Set to the name of concrete class, such as 'GroupMembership' (or a class name that inherits from this class)",
          "example": "GroupMembership",
          "type": "string"
        },
        "Group": {
          "$ref": "#/definitions/Link",
          "description": "Gets or sets the Group."
        },
        "Scope": {
          "description": "Gets or sets the scope for a Group.",
          "items": {
            "$ref": "#/definitions/LinkWithIsEditable"
          },
          "xml": {
            "name": "LinkWithIsEditable",
            "wrapped": true
          },
          "type": "array"
        }
      },
      "discriminator": "$type",
      "xml": {
        "name": "GroupMembership"
      },
      "type": "object"
    },
    "HateoasLink": {
      "description": "Represents the hateoas link.",
      "properties": {
        "$type": {
          "description": "Set to the name of concrete class, such as 'HateoasLink' (or a class name that inherits from this class)",
          "example": "HateoasLink",
          "type": "string"
        },
        "Href": {
          "description": "Gets the target resource URI.",
          "type": "string"
        },
        "Rel": {
          "description": "Gets the link relation type, describes how the current context is related to the target resource.",
          "type": "string"
        },
        "Type": {
          "description": "Gets the expected resource media type.",
          "type": "string"
        }
      },
      "discriminator": "$type",
      "xml": {
        "name": "HateoasLink"
      },
      "type": "object"
    },
    "IdentifiableObject": {
      "description": "Abstract base class for all objects that can be identified using a \"TCM URI\"&gt;.",
      "required": [
        "Id"
      ],
      "properties": {
        "$type": {
          "description": "Set to the name of concrete class, such as 'IdentifiableObject' (or a class name that inherits from this class)",
          "example": "<Set to a class name inheriting from 'IdentifiableObject'>",
          "type": "string"
        },
        "Id": {
          "description": "Gets the identifier (TCM URI) of the object.",
          "type": "string"
        },
        "Title": {
          "description": "Gets or sets the title (display name) of the object.",
          "type": "string"
        },
        "ApplicableActions": {
          "description": "Gets information about the applicable actions which can be performed on the object in its current state.",
          "items": {
            "$ref": "#/definitions/HateoasLink"
          },
          "xml": {
            "name": "HateoasLink",
            "wrapped": true
          },
          "type": "array"
        },
        "ExtensionProperties": {
          "$ref": "#/definitions/ExtensionPropertyDictionary",
          "description": "Gets the extension properties dictionary which may be used by extensions."
        },
        "IsEditable": {
          "description": "Gets a value indicating whether the object is editable.",
          "type": "boolean"
        },
        "ListLinks": {
          "description": "Gets or sets the collection of the hateoas links.",
          "items": {
            "$ref": "#/definitions/HateoasLink"
          },
          "xml": {
            "name": "HateoasLink",
            "wrapped": true
          },
          "type": "array"
        },
        "LoadInfo": {
          "$ref": "#/definitions/LoadInfo",
          "description": "Gets the information about the error that was thrown while loading an item."
        },
        "SecurityDescriptor": {
          "$ref": "#/definitions/SecurityDescriptor",
          "description": "Gets or sets the Security Descriptor which specifies the Rights and Permissions that the current user has on this item.\r\nA SecurityDescriptor is specific to a user and a context (IdentifiableObject)."
        },
        "VersionInfo": {
          "$ref": "#/definitions/BasicVersionInfo",
          "description": "Gets the version information of the object."
        }
      },
      "discriminator": "$type",
      "xml": {
        "name": "IdentifiableObject"
      },
      "type": "object"
    },
    "IdentifiableObjectDictionary": {
      "description": "Represents the set of Identifiable Objects grouped by the Identifiable Object Id.",
      "additionalProperties": {
        "$ref": "#/definitions/IdentifiableObject"
      },
      "type": "object"
    },
    "IdentityProviderGroupMapping": {
      "description": "Represents the data of a mapping from an Identity Provider Group to a TCM Group.",
      "properties": {
        "Description": {
          "description": "Gets or sets the description of the mapping.",
          "type": "string"
        },
        "Group": {
          "$ref": "#/definitions/Link",
          "description": "Gets or sets the Group for which the mapping exists."
        },
        "IdentityProviderName": {
          "description": "Gets or sets the name of the Identity Provider to match on.",
          "type": "string"
        }
      },
      "xml": {
        "name": "IdentityProviderGroupMapping"
      },
      "type": "object"
    },
    "ItemFieldDefinition": {
      "description": "Abstract base class for Item Field Definitions (specified in a Schema)",
      "required": [
        "Description",
        "MaxOccurs",
        "MinOccurs",
        "Name"
      ],
      "properties": {
        "$type": {
          "description": "Set to the name of concrete class, such as 'ItemFieldDefinition' (or a class name that inherits from this class)",
          "example": "<Set to a class name inheriting from 'ItemFieldDefinition'>",
          "type": "string"
        },
        "CustomUrl": {
          "description": "Gets or sets the custom URL of the field.",
          "type": "string"
        },
        "Description": {
          "description": "Gets or sets the description/label of the field.",
          "type": "string"
        },
        "ExtensionXml": {
          "description": "Gets or sets the extension XML element which can contain any custom data.",
          "type": "string"
        },
        "MaxOccurs": {
          "description": "Gets or sets the maximum occurrence of the field.",
          "type": "integer",
          "format": "int32"
        },
        "MinOccurs": {
          "description": "Gets or sets the minimum occurrence of the field.",
          "type": "integer",
          "format": "int32"
        },
        "Name": {
          "description": "Gets or sets the XML name of the field.",
          "type": "string"
        }
      },
      "discriminator": "$type",
      "xml": {
        "name": "ItemFieldDefinition"
      },
      "type": "object"
    },
    "ItemPublishableFieldDefinition": {
      "description": "Abstract base class for Item Field Definitions for the field types that can be published.",
      "required": [
        "Description",
        "MaxOccurs",
        "MinOccurs",
        "Name"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/ItemFieldDefinition"
        },
        {
          "required": [
            "Description",
            "MaxOccurs",
            "MinOccurs",
            "Name"
          ],
          "properties": {
            "IsIndexable": {
              "description": "Gets or sets whether this field can be indexed once published.",
              "type": "boolean"
            },
            "IsPublishable": {
              "description": "Gets or sets whether this field can be published.",
              "type": "boolean"
            }
          },
          "type": "object"
        }
      ],
      "xml": {
        "name": "ItemPublishableFieldDefinition"
      },
      "type": "object"
    },
    "ItemType": {
      "type": "string",
      "enum": [
        "None",
        "Publication",
        "Folder",
        "StructureGroup",
        "Schema",
        "Component",
        "ComponentTemplate",
        "Page",
        "PageTemplate",
        "TargetGroup",
        "Category",
        "Keyword",
        "TemplateBuildingBlock",
        "BusinessProcessType",
        "VirtualFolder",
        "TargetType",
        "MultimediaType",
        "User",
        "Group",
        "DirectoryService",
        "DirectoryGroupMapping",
        "Batch",
        "PublishTransaction",
        "WorkflowType",
        "ApprovalStatus",
        "ProcessDefinition",
        "ProcessInstance",
        "ProcessHistory",
        "ActivityDefinition",
        "ActivityInstance",
        "ActivityHistory",
        "WorkItem"
      ]
    },
    "Keyword": {
      "description": "Represents the data of a Keyword used to classify items.",
      "required": [
        "Id"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/RepositoryLocalObject"
        },
        {
          "required": [
            "Id"
          ],
          "properties": {
            "Description": {
              "description": "Gets or sets a description of the Keyword.",
              "type": "string"
            },
            "IsAbstract": {
              "description": "Gets or sets whether the Keyword is abstract.",
              "type": "boolean"
            },
            "IsRoot": {
              "description": "Gets whether the Keyword is a root Keyword (i.e. it has no parent Keywords).",
              "type": "boolean"
            },
            "Key": {
              "description": "Gets or sets a custom key for the Keyword.",
              "type": "string"
            },
            "ParentKeywords": {
              "description": "Gets or sets access to the parent Keywords of this Keyword.",
              "items": {
                "$ref": "#/definitions/Link"
              },
              "xml": {
                "name": "Link",
                "wrapped": true
              },
              "type": "array"
            },
            "RelatedKeywords": {
              "description": "Gets or sets access to the Keywords related to this Keyword.",
              "items": {
                "$ref": "#/definitions/Link"
              },
              "xml": {
                "name": "Link",
                "wrapped": true
              },
              "type": "array"
            }
          },
          "type": "object"
        }
      ],
      "xml": {
        "name": "Keyword"
      },
      "type": "object"
    },
    "KeywordFieldDefinition": {
      "description": "Represents a Keyword field definition (in a Schema).",
      "required": [
        "Description",
        "MaxOccurs",
        "MinOccurs",
        "Name"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/ItemPublishableFieldDefinition"
        },
        {
          "required": [
            "Description",
            "MaxOccurs",
            "MinOccurs",
            "Name"
          ],
          "properties": {
            "AllowAutoClassification": {
              "description": "Specifies whether the field supports automatic classification.",
              "type": "boolean"
            },
            "Category": {
              "$ref": "#/definitions/Link"
            },
            "DefaultValue": {
              "$ref": "#/definitions/Link"
            },
            "List": {
              "$ref": "#/definitions/ListDefinition"
            }
          },
          "type": "object"
        }
      ],
      "xml": {
        "name": "KeywordFieldDefinition"
      },
      "type": "object"
    },
    "KeywordSuggestion": {
      "description": "Represents a keyword suggestion for a given source.",
      "properties": {
        "$type": {
          "description": "Set to the name of concrete class, such as 'KeywordSuggestion' (or a class name that inherits from this class)",
          "example": "KeywordSuggestion",
          "type": "string"
        },
        "Frequency": {
          "description": "How often the Keyword appears in the source text.",
          "type": "integer",
          "format": "int32"
        },
        "Keyword": {
          "$ref": "#/definitions/Keyword",
          "description": "The suggested Keyword."
        },
        "Score": {
          "description": "The relevancy score for the suggested Keyword. The higher it is, the more confident the system is that the Keyword is relevant to the content.",
          "type": "number",
          "format": "float"
        }
      },
      "discriminator": "$type",
      "xml": {
        "name": "KeywordSuggestion"
      },
      "type": "object"
    },
    "KeywordSuggestions": {
      "description": "List of suggested keywords, grouped by the URI of the category that they belong to.",
      "additionalProperties": {},
      "type": "object"
    },
    "LimitedVersionInfo": {
      "description": "Limited version info for Repository-Local Objects.",
      "allOf": [
        {
          "$ref": "#/definitions/BasicVersionInfo"
        },
        {
          "properties": {
            "Creator": {
              "$ref": "#/definitions/Link"
            }
          },
          "type": "object"
        }
      ],
      "xml": {
        "name": "LimitedVersionInfo"
      },
      "type": "object"
    },
    "Link": {
      "description": "Base class for links to Identifiable Objects.",
      "required": [
        "IdRef"
      ],
      "properties": {
        "$type": {
          "description": "Set to the name of concrete class, such as 'Link' (or a class name that inherits from this class)",
          "example": "Link",
          "type": "string"
        },
        "IdRef": {
          "description": "Gets or sets the TCM URI of the referenced object.",
          "type": "string"
        },
        "Title": {
          "description": "Gets or sets the title of the referenced object.",
          "type": "string"
        },
        "Description": {
          "description": "Gets or sets the description of the referenced object.",
          "type": "string"
        },
        "TargetStatus": {
          "$ref": "#/definitions/LinkTargetStatus",
          "description": "Link's target status."
        }
      },
      "discriminator": "$type",
      "xml": {
        "name": "Link"
      },
      "type": "object"
    },
    "LinkDictionary": {
      "description": "Represents the set of links grouped by the link definition.",
      "additionalProperties": {},
      "type": "object"
    },
    "LinkTargetStatus": {
      "description": "Defines Link's target status\r\n\r\nMembers:\r\n* `NotFound` - Target item not found\r\n* `NotAvailable` - Target provider is not available\r\n* `NoPermission` - Target item is not accessible\r\n",
      "type": "string",
      "enum": [
        "NotFound",
        "NotAvailable",
        "NoPermission"
      ]
    },
    "LinkWithIsEditable": {
      "description": "Represents a link to an Identifiable Object with the option to set if it is allowed to edit the linked Object.",
      "required": [
        "IdRef"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/Link"
        },
        {
          "required": [
            "IdRef"
          ],
          "properties": {
            "IsEditable": {
              "description": "Gets or sets whether the referenced object is editable.",
              "type": "boolean"
            }
          },
          "type": "object"
        }
      ],
      "xml": {
        "name": "LinkWithIsEditable"
      },
      "type": "object"
    },
    "ListDefinition": {
      "description": "Provides information about how a list of values should be represented to the user.",
      "properties": {
        "$type": {
          "description": "Set to the name of concrete class, such as 'ListDefinition' (or a class name that inherits from this class)",
          "example": "ListDefinition",
          "type": "string"
        },
        "Height": {
          "description": "Gets or sets the height of the list (if applicable).",
          "type": "integer",
          "format": "int32"
        },
        "Type": {
          "$ref": "#/definitions/ListType",
          "description": "Gets or sets the list type (drop-down, checkboxes, radio buttons, etc.)"
        }
      },
      "discriminator": "$type",
      "xml": {
        "name": "ListDefinition"
      },
      "type": "object"
    },
    "ListType": {
      "description": "Specifies the type of list used to present allowed field values.\r\n\r\nMembers:\r\n* `None` - Don't present a list of allowed values.\r\n* `Select` - Present a select list (or drop-down list if Height=1)\r\n* `Radio` - Present radio buttons.\r\n* `Checkbox` - Present check boxes.\r\n* `Tree` - Present a tree (Taxonomy).\r\n",
      "type": "string",
      "enum": [
        "None",
        "Select",
        "Radio",
        "Checkbox",
        "Tree"
      ]
    },
    "LoadInfo": {
      "description": "Represents the information about the error that was thrown while loading an item.",
      "properties": {
        "$type": {
          "description": "Set to the name of concrete class, such as 'LoadInfo' (or a class name that inherits from this class)",
          "example": "LoadInfo",
          "type": "string"
        },
        "ErrorMessage": {
          "description": "Error message.",
          "readOnly": true,
          "type": "string"
        },
        "ErrorType": {
          "$ref": "#/definitions/ErrorType",
          "description": "Error type.",
          "readOnly": true
        },
        "State": {
          "$ref": "#/definitions/LoadInfoState",
          "description": "Load state of item.",
          "readOnly": true
        }
      },
      "discriminator": "$type",
      "xml": {
        "name": "LoadInfo"
      },
      "type": "object"
    },
    "LoadInfoState": {
      "description": "Enum of load states.\r\n\r\nMembers:\r\n* `FullyLoaded` - An item is fully loaded.\r\n* `PartiallyLoaded` - An item is partially loaded.\r\n",
      "type": "string",
      "enum": [
        "FullyLoaded",
        "PartiallyLoaded"
      ]
    },
    "LocationInfo": {
      "description": "Location/context info for Repository-Local Objects.",
      "properties": {
        "$type": {
          "description": "Set to the name of concrete class, such as 'LocationInfo' (or a class name that inherits from this class)",
          "example": "LocationInfo",
          "type": "string"
        },
        "ContextRepository": {
          "$ref": "#/definitions/Link",
          "description": "Gets or sets the context Repository from which the container object has been retrieved."
        },
        "OrganizationalItem": {
          "$ref": "#/definitions/Link",
          "description": "Gets or sets the Organizational Item that contains the container object."
        },
        "Path": {
          "description": "Gets or sets the path to the item (that is, excluding the item's own title).",
          "type": "string"
        },
        "WebDavUrl": {
          "description": "Gets or sets the WebDAV URL of the item.",
          "type": "string"
        }
      },
      "discriminator": "$type",
      "xml": {
        "name": "LocationInfo"
      },
      "type": "object"
    },
    "LockInfo": {
      "description": "Lock information about Repository Local Object.",
      "properties": {
        "$type": {
          "description": "Set to the name of concrete class, such as 'LockInfo' (or a class name that inherits from this class)",
          "example": "LockInfo",
          "type": "string"
        },
        "LockDate": {
          "description": "The date and time in UTC at which the item was locked.",
          "example": "1970-01-01T00:00:00Z",
          "type": "string",
          "format": "date-time"
        },
        "LockType": {
          "description": "Type of lock on the item (if any).",
          "items": {
            "$ref": "#/definitions/LockType"
          },
          "xml": {
            "name": "LockType",
            "wrapped": true
          },
          "type": "array"
        },
        "LockUser": {
          "$ref": "#/definitions/Link",
          "description": "A user who locked the item."
        }
      },
      "discriminator": "$type",
      "xml": {
        "name": "LockInfo"
      },
      "type": "object"
    },
    "LockType": {
      "description": "Defines the state (lock) of an item.\r\n\r\nMembers:\r\n* `None` - The item is not locked.\r\n* `CheckedOut` - The item is checked-out. This can mean either a temporary (edit) lock, a permanent lock (explicit check-out performed by user) or a workflow lock.\r\n* `Permanent` - The item is permanently locked, that is using an explicit lock (check-out) action. Can be applied to versioned items (permanent check-out) and to organizational items.\r\n* `NewItem` - The item is a new item, that is it has been created, but not checked-in for the first time yet.\r\n* `InWorkflow` - The item is in a workflow.\r\n* `Reserved` - The item is reserved by the system. This means it is checked-out/locked, but nobody owns the lock.\r\n",
      "type": "string",
      "enum": [
        "None",
        "CheckedOut",
        "Permanent",
        "NewItem",
        "InWorkflow",
        "Reserved"
      ]
    },
    "ModelType": {
      "description": "Specifies the Model types that are supported by the Content Manager.\r\n\r\nMembers:\r\n* `Bundle` - Bundle.\r\n* `SearchFolder` - Search folder.\r\n* `Schema` - Schema.\r\n* `Page` - Page.\r\n* `PageTemplate` - Page template.\r\n* `Component` - Component.\r\n* `ComponentTemplate` - Component template.\r\n* `Folder` - Folder.\r\n* `Keyword` - Keyword.\r\n* `StructureGroup` - Structure group.\r\n* `TemplateBuildingBlock` - Template building block.\r\n* `Publication` - Publication.\r\n* `Category` - Category.\r\n* `Group` - Group.\r\n* `ProcessDefinition` - Process definition.\r\n* `BusinessProcessType` - Business process type.\r\n* `MultimediaType` - Multimedia type.\r\n* `TargetType` - Target type.\r\n* `User` - User.\r\n* `TargetGroup` - Target group.\r\n* `ApprovalStatus` - Approval status.\r\n",
      "type": "string",
      "enum": [
        "Bundle",
        "SearchFolder",
        "Schema",
        "Page",
        "PageTemplate",
        "Component",
        "ComponentTemplate",
        "Folder",
        "Keyword",
        "StructureGroup",
        "TemplateBuildingBlock",
        "Publication",
        "Category",
        "Group",
        "ProcessDefinition",
        "BusinessProcessType",
        "MultimediaType",
        "TargetType",
        "User",
        "TargetGroup",
        "ApprovalStatus"
      ]
    },
    "MultiLineTextFieldDefinition": {
      "description": "Represents a multi-line text field definition (in a Schema).",
      "required": [
        "Description",
        "MaxOccurs",
        "MinOccurs",
        "Name"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/TextFieldDefinition"
        },
        {
          "required": [
            "Description",
            "MaxOccurs",
            "MinOccurs",
            "Name"
          ],
          "properties": {
            "DefaultValue": {
              "description": "Gets or sets the default value.",
              "type": "string"
            },
            "Height": {
              "description": "Gets or sets the height of the text area in the form-based User Interface.",
              "type": "integer",
              "format": "int32"
            }
          },
          "type": "object"
        }
      ],
      "xml": {
        "name": "MultiLineTextFieldDefinition"
      },
      "type": "object"
    },
    "MultimediaLinkFieldDefinition": {
      "description": "Represents a Multimedia link field definition (in a Schema).",
      "required": [
        "Description",
        "MaxOccurs",
        "MinOccurs",
        "Name"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/ItemPublishableFieldDefinition"
        },
        {
          "required": [
            "Description",
            "MaxOccurs",
            "MinOccurs",
            "Name"
          ],
          "properties": {
            "AllowedTargetSchemas": {
              "description": "Gets access to the allowed Schemas for the linked Multimedia Components.",
              "items": {
                "$ref": "#/definitions/Link"
              },
              "xml": {
                "name": "Link",
                "wrapped": true
              },
              "type": "array"
            },
            "DefaultValue": {
              "$ref": "#/definitions/Link"
            }
          },
          "type": "object"
        }
      ],
      "xml": {
        "name": "MultimediaLinkFieldDefinition"
      },
      "type": "object"
    },
    "MultimediaType": {
      "description": "Represents a Multimedia Type: a type of binary content",
      "required": [
        "Id"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/SystemWideObject"
        },
        {
          "required": [
            "Id"
          ],
          "properties": {
            "FileExtensions": {
              "description": "Gets or sets the file extensions associated with this Multimedia type.",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "MimeType": {
              "description": "Gets or sets the MIME type according to IETF RFC 2046.",
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "xml": {
        "name": "MultimediaType"
      },
      "type": "object"
    },
    "NestedRegion": {
      "description": "Represents the nested region definition.",
      "properties": {
        "$type": {
          "description": "Set to the name of concrete class, such as 'NestedRegion' (or a class name that inherits from this class)",
          "example": "NestedRegion",
          "type": "string"
        },
        "IsMandatory": {
          "description": "Gets or sets a value indicating whether this nested schema is mandatory or optional.",
          "type": "boolean"
        },
        "RegionName": {
          "description": "Gets or sets the name of the nested region.",
          "type": "string"
        },
        "RegionSchema": {
          "$ref": "#/definitions/ExpandableLink",
          "description": "Gets or sets the expandable link to region schema that is used to validate nested region."
        }
      },
      "discriminator": "$type",
      "xml": {
        "name": "NestedRegion"
      },
      "type": "object"
    },
    "NumberFieldDefinition": {
      "description": "Represents a number field definition (in a Schema).",
      "required": [
        "Description",
        "MaxOccurs",
        "MinOccurs",
        "Name"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/ItemPublishableFieldDefinition"
        },
        {
          "required": [
            "Description",
            "MaxOccurs",
            "MinOccurs",
            "Name"
          ],
          "properties": {
            "DefaultValue": {
              "description": "Gets or sets the default value.",
              "type": "number",
              "format": "double"
            },
            "FractionDigits": {
              "description": "Gets or sets the constraints on the number of fraction digits.",
              "type": "integer",
              "format": "int32"
            },
            "IsMaxValueExclusive": {
              "description": "Gets or sets whether the specified maximum value is exclusive or inclusive.",
              "type": "boolean"
            },
            "IsMinValueExclusive": {
              "description": "Gets or sets whether the specified minimum value is exclusive or inclusive.",
              "type": "boolean"
            },
            "List": {
              "$ref": "#/definitions/NumberListDefinition"
            },
            "MaxValue": {
              "description": "Gets or sets the maximum value constraint.",
              "type": "number",
              "format": "double"
            },
            "MinValue": {
              "description": "Gets or sets the minimum value constraint.",
              "type": "number",
              "format": "double"
            },
            "Pattern": {
              "description": "Gets or sets a regular expression pattern to constrain the value.",
              "type": "string"
            },
            "TotalDigits": {
              "description": "Gets or sets the constraint on the total number of digits.",
              "type": "integer",
              "format": "int32"
            }
          },
          "type": "object"
        }
      ],
      "xml": {
        "name": "NumberFieldDefinition"
      },
      "type": "object"
    },
    "NumberListDefinition": {
      "description": "Provides information about whether/how to present a list of allowed number field values.",
      "allOf": [
        {
          "$ref": "#/definitions/ListDefinition"
        },
        {
          "properties": {
            "Entries": {
              "description": "Gets access to the list of allowed values.",
              "items": {
                "type": "number",
                "format": "double"
              },
              "type": "array"
            }
          },
          "type": "object"
        }
      ],
      "xml": {
        "name": "NumberListDefinition"
      },
      "type": "object"
    },
    "NumericalConditionOperator": {
      "description": "Defines the operator used for comparison of numerical operands.\r\n\r\nMembers:\r\n* `Equals` - Compares if a numerical operand is equal to the given condition value.\r\n* `GreaterThan` - Compares if a numerical operand is greater than the given condition value.\r\n* `LessThan` - Compares if a numerical operand is less than the given condition value.\r\n* `NotEqual` - Compares if a numerical operand is not equal to the given condition value.\r\n",
      "type": "string",
      "enum": [
        "Equals",
        "GreaterThan",
        "LessThan",
        "NotEqual"
      ]
    },
    "OccurrenceConstraint": {
      "description": "Represents an occurrence constraint for Component Presentation(s) in a Region Schema.",
      "allOf": [
        {
          "$ref": "#/definitions/ComponentPresentationConstraint"
        },
        {
          "properties": {
            "MaxOccurs": {
              "description": "Gets or sets the maximum number of Component Presentation(s) in the Region.",
              "type": "integer",
              "format": "int32"
            },
            "MinOccurs": {
              "description": "Gets or sets the minimum number of Component Presentation(s) in the Region.",
              "type": "integer",
              "format": "int32"
            }
          },
          "type": "object"
        }
      ],
      "xml": {
        "name": "OccurrenceConstraint"
      },
      "type": "object"
    },
    "OperationInstruction": {
      "description": "Optional instructions that control how an operation will be executed.",
      "properties": {
        "$type": {
          "description": "Set to the name of concrete class, such as 'OperationInstruction' (or a class name that inherits from this class)",
          "example": "OperationInstruction",
          "type": "string"
        },
        "Mode": {
          "$ref": "#/definitions/OperationMode",
          "description": "Controls how to react on validation errors and warnings."
        }
      },
      "discriminator": "$type",
      "xml": {
        "name": "OperationInstruction"
      },
      "type": "object"
    },
    "OperationMode": {
      "description": "Specifies the type of behavior when validation errors occur.\r\n\r\nMembers:\r\n* `FailOnError` - Fails the operation in case of any validation error found (warnings are returned in the operation result, but do not break operation).\r\n* `FailOnWarning` - Fails the operation in case of any validation error or warning found.\r\n",
      "type": "string",
      "enum": [
        "FailOnError",
        "FailOnWarning"
      ]
    },
    "OperationResult": {
      "description": "Contains information about performed operation.",
      "properties": {
        "$type": {
          "description": "Set to the name of concrete class, such as 'OperationResult' (or a class name that inherits from this class)",
          "example": "OperationResult",
          "type": "string"
        },
        "Result": {
          "$ref": "#/definitions/IdentifiableObject",
          "description": "Gets the result of the operation execution."
        },
        "ValidationWarnings": {
          "description": "Gets the list of \"ValidationWarning\" which were detected during operation.",
          "items": {
            "$ref": "#/definitions/ValidationWarning"
          },
          "xml": {
            "name": "ValidationWarning",
            "wrapped": true
          },
          "type": "array"
        }
      },
      "discriminator": "$type",
      "xml": {
        "name": "OperationResult"
      },
      "type": "object"
    },
    "OrganizationalItem": {
      "description": "Abstract base class for the data of \"organizational items\": items used to organize the items in a Repository.",
      "required": [
        "Id"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/RepositoryLocalObject"
        },
        {
          "required": [
            "Id"
          ],
          "properties": {
            "AccessControlList": {
              "$ref": "#/definitions/AccessControlList"
            },
            "ContentSecurityDescriptor": {
              "$ref": "#/definitions/SecurityDescriptor"
            },
            "IsPermissionsInheritanceRoot": {
              "description": "Gets or sets a value indicating whether the item inherits permissions from the parent item.",
              "type": "boolean"
            },
            "IsRootOrganizationalItem": {
              "description": "Gets whether the Organizational Item is a root (i.e. its parent is a Publication).",
              "type": "boolean"
            }
          },
          "type": "object"
        }
      ],
      "xml": {
        "name": "OrganizationalItem"
      },
      "type": "object"
    },
    "Page": {
      "description": "Represents the data of a Page: an artifact in the Publication's target structure.",
      "required": [
        "Id"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/VersionedItem"
        },
        {
          "required": [
            "Id"
          ],
          "properties": {
            "ApprovalStatus": {
              "$ref": "#/definitions/Link"
            },
            "ComponentPresentations": {
              "description": "Gets or sets the Component Presentations directly on the Page (excluding Component Presentations inside of Regions).",
              "items": {
                "$ref": "#/definitions/ComponentPresentation"
              },
              "xml": {
                "name": "ComponentPresentation",
                "wrapped": true
              },
              "type": "array"
            },
            "FileName": {
              "description": "Gets or sets the file name.",
              "type": "string"
            },
            "IsPageTemplateInherited": {
              "description": "Gets or sets whether the Page Template is inherited from the containing Structure Group.",
              "type": "boolean"
            },
            "LocationInfo": {
              "$ref": "#/definitions/PublishLocationInfo"
            },
            "PageTemplate": {
              "$ref": "#/definitions/Link"
            },
            "Regions": {
              "description": "Gets or sets the collection of nested Regions on the Page.",
              "items": {
                "$ref": "#/definitions/Region"
              },
              "xml": {
                "name": "Region",
                "wrapped": true
              },
              "type": "array"
            },
            "RegionSchema": {
              "$ref": "#/definitions/Link"
            },
            "WorkflowInfo": {
              "$ref": "#/definitions/WorkflowInfo"
            }
          },
          "type": "object"
        }
      ],
      "xml": {
        "name": "Page"
      },
      "type": "object"
    },
    "PageTemplate": {
      "description": "Represents a Page Template: a template used to render a Page.",
      "required": [
        "Id"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/Template"
        },
        {
          "required": [
            "Id"
          ],
          "properties": {
            "ApprovalStatus": {
              "$ref": "#/definitions/Link"
            },
            "FileExtension": {
              "description": "Gets or sets the file extension used for Pages based on this Page Template.",
              "type": "string"
            },
            "PageSchema": {
              "$ref": "#/definitions/Link"
            },
            "WorkflowInfo": {
              "$ref": "#/definitions/WorkflowInfo"
            }
          },
          "type": "object"
        }
      ],
      "xml": {
        "name": "PageTemplate"
      },
      "type": "object"
    },
    "ParametersDictionary": {
      "description": "Represents multiple sets of the parameters grouped by name.",
      "additionalProperties": {},
      "type": "object"
    },
    "Permissions": {
      "description": "Specifies the Permissions used for security checks.\r\n\r\nMembers:\r\n* `None` - No permission to access the items.\r\n* `Read` - Grants read access to items.\r\n* `Write` - Grants write access to items.\r\n* `Delete` - Grants delete access to items.\r\n* `Localize` - Grants localize and unlocalize access to items.\r\n* `All` - Grants all permissions to access the items.\r\n",
      "type": "string",
      "enum": [
        "None",
        "Read",
        "Write",
        "Delete",
        "Localize",
        "All"
      ]
    },
    "Process": {
      "description": "Abstract base class for the data of Processes.",
      "required": [
        "Id"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/WorkflowObject"
        },
        {
          "required": [
            "Id"
          ],
          "properties": {
            "Activities": {
              "description": "Gets the Activities that occurred within the Process.",
              "items": {
                "$ref": "#/definitions/Activity"
              },
              "xml": {
                "name": "Activity",
                "wrapped": true
              },
              "type": "array"
            },
            "Creator": {
              "$ref": "#/definitions/Link"
            },
            "HasSnapshots": {
              "description": "Gets a value indicating whether this Process has snapshots.",
              "type": "boolean"
            },
            "Subjects": {
              "description": "Gets or sets the items which participate in the Process.",
              "items": {
                "$ref": "#/definitions/Link"
              },
              "xml": {
                "name": "Link",
                "wrapped": true
              },
              "type": "array"
            },
            "WorkflowType": {
              "$ref": "#/definitions/Link"
            }
          },
          "type": "object"
        }
      ],
      "xml": {
        "name": "Process"
      },
      "type": "object"
    },
    "ProcessDefinition": {
      "description": "Abstract base class for the data of Process Definitions.",
      "required": [
        "Id"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/RepositoryLocalObject"
        },
        {
          "required": [
            "Id"
          ],
          "properties": {
            "ActivityDefinitions": {
              "description": "Gets the Activity Definitions.",
              "items": {
                "$ref": "#/definitions/ActivityDefinition"
              },
              "xml": {
                "name": "ActivityDefinition",
                "wrapped": true
              },
              "type": "array"
            },
            "StoreSnapshot": {
              "description": "Gets or sets a value indicating whether Process Instances based on this Process Definition store snapshots.",
              "type": "boolean"
            }
          },
          "type": "object"
        }
      ],
      "xml": {
        "name": "ProcessDefinition"
      },
      "type": "object"
    },
    "ProcessDefinitionAssociation": {
      "description": "Representing data object of the Process Definition Association",
      "required": [
        "Id"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/IdentifiableObject"
        },
        {
          "required": [
            "Id"
          ],
          "properties": {
            "ProcessDefinition": {
              "$ref": "#/definitions/Link"
            }
          },
          "type": "object"
        }
      ],
      "xml": {
        "name": "ProcessDefinitionAssociation"
      },
      "type": "object"
    },
    "ProcessedItem": {
      "description": "Represents the Processed Item data, which contains rendering information for the Resolved Item.",
      "properties": {
        "$type": {
          "description": "Set to the name of concrete class, such as 'ProcessedItem' (or a class name that inherits from this class)",
          "example": "ProcessedItem",
          "type": "string"
        },
        "HasRenderFailure": {
          "description": "Gets a value indicating whether the item failed rendering.",
          "type": "boolean"
        },
        "IsRendered": {
          "description": "Gets a value indicating whether the item has been fully rendered.",
          "type": "boolean"
        },
        "ReasonOfRenderFailure": {
          "description": "Gets the reason of failure of the rendering process.",
          "type": "string"
        },
        "RenderTime": {
          "description": "Gets the duration of the rendering process for the processed item.\r\nThe render time formatted as a string: HH:MM:SS",
          "type": "string"
        },
        "ResolvedItem": {
          "$ref": "#/definitions/ResolvedItem",
          "description": "Gets the \"ResolvedItem\" for which this instance stores additional rendering information."
        }
      },
      "discriminator": "$type",
      "xml": {
        "name": "ProcessedItem"
      },
      "type": "object"
    },
    "ProcessFinishReason": {
      "description": "Defines the reason a Process is going to be finished or has finished already.\r\n\r\nMembers:\r\n* `CompletedNormally` - Identifies if the process has finished normally.\r\n* `ForceFinished` - Identifies if the process was forcefully finished.\r\n* `Terminated` - Identifies if the process was terminated.\r\n",
      "type": "string",
      "enum": [
        "CompletedNormally",
        "ForceFinished",
        "Terminated"
      ]
    },
    "ProcessHistory": {
      "description": "Representing data of a Process History.",
      "required": [
        "Id"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/Process"
        },
        {
          "required": [
            "Id"
          ],
          "properties": {
            "FinishDate": {
              "description": "Gets the Finish date and time in UTC of the Activity.",
              "example": "1970-01-01T00:00:00Z",
              "type": "string",
              "format": "date-time"
            },
            "FinishReason": {
              "$ref": "#/definitions/ProcessFinishReason",
              "description": "Gets the Finish Reason of the Activity."
            },
            "ProcessDefinitionTitle": {
              "description": "Gets the Process Definition Title of the Activity.",
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "xml": {
        "name": "ProcessHistory"
      },
      "type": "object"
    },
    "ProcessInstance": {
      "description": "Represents the data of a Process Instance: a current Process.",
      "required": [
        "Id"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/Process"
        },
        {
          "required": [
            "Id"
          ],
          "properties": {
            "ProcessDefinition": {
              "$ref": "#/definitions/Link"
            },
            "Variables": {
              "$ref": "#/definitions/VariablesDictionary"
            }
          },
          "type": "object"
        }
      ],
      "xml": {
        "name": "ProcessInstance"
      },
      "type": "object"
    },
    "PromoteDemoteRequest": {
      "description": "Represents the data required for promoting and demoting an item.",
      "properties": {
        "$type": {
          "description": "Set to the name of concrete class, such as 'PromoteDemoteRequest' (or a class name that inherits from this class)",
          "example": "PromoteDemoteRequest",
          "type": "string"
        },
        "DestinationRepositoryId": {
          "description": "Gets or sets the identifier of the destination parent Repository where the item should be promoted to.",
          "type": "string"
        },
        "Instruction": {
          "$ref": "#/definitions/OperationInstruction",
          "description": "Gets or sets the instruction how the operation will be executed."
        }
      },
      "discriminator": "$type",
      "xml": {
        "name": "PromoteDemoteRequest"
      },
      "type": "object"
    },
    "Publication": {
      "description": "Represents the data of a Publication: a \"Repository\" used for publishing.",
      "required": [
        "Id"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/Repository"
        },
        {
          "required": [
            "Id"
          ],
          "properties": {
            "ComponentSnapshotTemplate": {
              "$ref": "#/definitions/Link"
            },
            "ComponentTemplateProcess": {
              "$ref": "#/definitions/Link"
            },
            "DefaultComponentTemplate": {
              "$ref": "#/definitions/Link"
            },
            "DefaultPageTemplate": {
              "$ref": "#/definitions/Link"
            },
            "DefaultTemplateBuildingBlock": {
              "$ref": "#/definitions/Link"
            },
            "Locale": {
              "description": "Gets or sets the locale of a publication.",
              "type": "string"
            },
            "MultimediaPath": {
              "description": "Gets or sets the path to the directory containing published binaries.",
              "type": "string"
            },
            "MultimediaUrl": {
              "description": "Gets or sets the URL of the directory containing published binaries.",
              "type": "string"
            },
            "PageSnapshotTemplate": {
              "$ref": "#/definitions/Link"
            },
            "PageTemplateProcess": {
              "$ref": "#/definitions/Link"
            },
            "PublicationPath": {
              "description": "Gets or sets the publication/publish path.",
              "type": "string"
            },
            "PublicationType": {
              "description": "Gets or sets the type of a Publication.",
              "type": "string"
            },
            "PublicationUrl": {
              "description": "Gets or sets the server-relative publication/publish URL.",
              "type": "string"
            },
            "RootStructureGroup": {
              "$ref": "#/definitions/Link"
            },
            "ShareProcessAssociations": {
              "description": "Gets or sets a value indicating whether to share Process Associations of Schemas and Structure Groups from a parent Publication.",
              "type": "boolean"
            },
            "TemplateBundleProcess": {
              "$ref": "#/definitions/Link"
            }
          },
          "type": "object"
        }
      ],
      "xml": {
        "name": "Publication"
      },
      "type": "object"
    },
    "PublicationType": {
      "description": "Represents a PublicationType",
      "properties": {
        "$type": {
          "description": "Set to the name of concrete class, such as 'PublicationType' (or a class name that inherits from this class)",
          "example": "PublicationType",
          "type": "string"
        },
        "Id": {
          "description": "Id of this PublicationType",
          "type": "integer",
          "format": "int32"
        },
        "Title": {
          "description": "Refers to the Localized Title of this PublicationType to show it in GUI(e.g. List)",
          "type": "string"
        },
        "Name": {
          "description": "Refers to the Name of the PublicationType",
          "type": "string"
        }
      },
      "discriminator": "$type",
      "xml": {
        "name": "PublicationType"
      },
      "type": "object"
    },
    "PublishContext": {
      "description": "Represents the data of a Publish Context.",
      "properties": {
        "$type": {
          "description": "Set to the name of concrete class, such as 'PublishContext' (or a class name that inherits from this class)",
          "example": "PublishContext",
          "type": "string"
        },
        "ProcessedItems": {
          "description": "Gets or sets a collection of processed items.",
          "items": {
            "$ref": "#/definitions/ProcessedItem"
          },
          "xml": {
            "name": "ProcessedItem",
            "wrapped": true
          },
          "type": "array"
        },
        "Publication": {
          "$ref": "#/definitions/Link",
          "description": "Gets or sets the Publication which this Publish Context belongs to."
        },
        "ResolvedItems": {
          "description": "Gets or sets a collection of Resolved Items in this Publish Context.",
          "items": {
            "$ref": "#/definitions/ResolvedItem"
          },
          "xml": {
            "name": "ResolvedItem",
            "wrapped": true
          },
          "type": "array"
        },
        "TargetType": {
          "$ref": "#/definitions/Link",
          "description": "Gets or sets the Target Type which this Publish Context belongs to."
        }
      },
      "discriminator": "$type",
      "xml": {
        "name": "PublishContext"
      },
      "type": "object"
    },
    "PublishInfo": {
      "description": "Represents publishing information for Repository local objects.",
      "properties": {
        "$type": {
          "description": "Set to the name of concrete class, such as 'PublishInfo' (or a class name that inherits from this class)",
          "example": "PublishInfo",
          "type": "string"
        },
        "PublishedAt": {
          "description": "Gets or sets the date and time in UTC at which the item was last published.",
          "example": "1970-01-01T00:00:00Z",
          "type": "string",
          "format": "date-time"
        },
        "RenderedWith": {
          "$ref": "#/definitions/Link",
          "description": "Gets or sets a Link to the template with which the item was rendered."
        },
        "Repository": {
          "$ref": "#/definitions/Link",
          "description": "Gets or sets a Link to the Repository in which the container object has publish details."
        },
        "TargetPurpose": {
          "description": "Gets or sets the Purpose of \"TargetType\".",
          "type": "string"
        },
        "TargetType": {
          "$ref": "#/definitions/Link",
          "description": "Gets or sets a Link to the Target Type for publishing to."
        },
        "User": {
          "$ref": "#/definitions/Link",
          "description": "Gets or sets a Link to the User that published or un-published the container."
        }
      },
      "discriminator": "$type",
      "xml": {
        "name": "PublishInfo"
      },
      "type": "object"
    },
    "PublishingTarget": {
      "description": "Abstract base class for classes that represent a target for publishing: Target Type and Publication Target.",
      "required": [
        "Id"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/SystemWideObject"
        },
        {
          "required": [
            "Id"
          ],
          "properties": {
            "Description": {
              "description": "Gets or sets a description of the Publishing Target.",
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "xml": {
        "name": "PublishingTarget"
      },
      "type": "object"
    },
    "PublishInstruction": {
      "description": "Represents the instructions needed for publishing an item.",
      "required": [
        "ResolveInstruction"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/PublishInstructionBase"
        },
        {
          "required": [
            "ResolveInstruction"
          ],
          "properties": {
            "DeployAt": {
              "description": "Gets or sets the date and time when the content should be deployed at the content delivery side. Should be specified in UTC format.\r\nThe value will be converted to UTC time if specified with time zone shift, e.g. \"2020-01-24T17:24:50+02:00\" will be converted to \"2020-01-24T15:24:50Z\"\r\nConversion is not happening if time zone shift is not specified.",
              "example": "1970-01-01T00:00:00Z",
              "type": "string",
              "format": "date-time"
            },
            "ResolveInstruction": {
              "$ref": "#/definitions/ResolveInstruction"
            }
          },
          "type": "object"
        }
      ],
      "xml": {
        "name": "PublishInstruction"
      },
      "type": "object"
    },
    "PublishInstructionBase": {
      "description": "Represents the instructions needed for (un)publishing an item.",
      "properties": {
        "$type": {
          "description": "Set to the name of concrete class, such as 'PublishInstructionBase' (or a class name that inherits from this class)",
          "example": "<Set to a class name inheriting from 'PublishInstructionBase'>",
          "type": "string"
        }
      },
      "discriminator": "$type",
      "xml": {
        "name": "PublishInstructionBase"
      },
      "type": "object"
    },
    "PublishLocationInfo": {
      "description": "Represents a publishing location information for the objects that reside in Structure Groups.",
      "allOf": [
        {
          "$ref": "#/definitions/LocationInfo"
        },
        {
          "properties": {
            "PublishLocationPath": {
              "description": "Gets or sets the publish path of the container object, including its own directory/file name and extension.",
              "type": "string"
            },
            "PublishLocationUrl": {
              "description": "Gets or sets the publish URL of the container object.",
              "type": "string"
            },
            "PublishPath": {
              "description": "Gets or sets the publish path of the container object.",
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "xml": {
        "name": "PublishLocationInfo"
      },
      "type": "object"
    },
    "PublishPriority": {
      "description": "Identifies the priority of the publish action.\r\n\r\nMembers:\r\n* `Low` - Low priority.\r\n* `Normal` - Normal priority.\r\n* `High` - High priority.\r\n",
      "type": "string",
      "enum": [
        "Low",
        "Normal",
        "High"
      ]
    },
    "PublishRequest": {
      "description": "Represents the request during the publishing process.",
      "required": [
        "PublishInstruction"
      ],
      "properties": {
        "$type": {
          "description": "Set to the name of concrete class, such as 'PublishRequest' (or a class name that inherits from this class)",
          "example": "PublishRequest",
          "type": "string"
        },
        "Ids": {
          "description": "The identifiers of the items that will be send for publishing.",
          "items": {
            "type": "string"
          },
          "type": "array",
          "minLength": 1
        },
        "Priority": {
          "$ref": "#/definitions/PublishPriority",
          "description": "The priority of the publish action."
        },
        "PublishInstruction": {
          "$ref": "#/definitions/PublishInstruction",
          "description": "Represents the instructions needed for publishing an item."
        },
        "TargetIdsOrPurposes": {
          "description": "A collection of Publishing Target instances (Target Types or Purposes) where the items are published to.",
          "items": {
            "type": "string"
          },
          "type": "array",
          "minLength": 1
        }
      },
      "discriminator": "$type",
      "xml": {
        "name": "PublishRequest"
      },
      "type": "object"
    },
    "PublishSource": {
      "description": "Represents information about the source from which the content was published.",
      "properties": {
        "$type": {
          "description": "Set to the name of concrete class, such as 'PublishSource' (or a class name that inherits from this class)",
          "example": "PublishSource",
          "type": "string"
        },
        "ContextPublication": {
          "$ref": "#/definitions/Link",
          "description": "Gets or sets a Link to the Publication from which the content was published."
        },
        "TargetType": {
          "$ref": "#/definitions/Link",
          "description": "Gets or sets a Link to the Target Type to which the content was published."
        }
      },
      "discriminator": "$type",
      "xml": {
        "name": "PublishSource"
      },
      "type": "object"
    },
    "PublishTransaction": {
      "description": "Represents the data object of a PublishTransaction.",
      "required": [
        "Id"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/SystemWideObject"
        },
        {
          "required": [
            "Id"
          ],
          "properties": {
            "Creator": {
              "$ref": "#/definitions/Link"
            },
            "DeployerAction": {
              "$ref": "#/definitions/DeployerAction",
              "description": "Gets the action the deployer should take."
            },
            "HasRenderFailures": {
              "description": "Gets a value indicating whether one of the \"PublishContext.ProcessedItems\" in this instance has render failures.",
              "type": "boolean"
            },
            "Information": {
              "description": "Gets the information about this publish transaction.",
              "type": "string"
            },
            "Instruction": {
              "$ref": "#/definitions/PublishInstructionBase"
            },
            "IsCompleted": {
              "description": "Gets the value whether the publishing of the \"PublishTransaction\" is finished.",
              "type": "boolean"
            },
            "Items": {
              "description": "Gets the collection of items that need to be published or unpublished.",
              "items": {
                "$ref": "#/definitions/Link"
              },
              "xml": {
                "name": "Link",
                "wrapped": true
              },
              "type": "array"
            },
            "Priority": {
              "$ref": "#/definitions/PublishPriority",
              "description": "Gets the priority of this instance. It can be one of three values: low, normal or high. Transactions are executed according to this priority."
            },
            "PublishContexts": {
              "description": "Gets the collection of publish contexts that indicates where to publish/unpublish to.",
              "items": {
                "$ref": "#/definitions/PublishContext"
              },
              "xml": {
                "name": "PublishContext",
                "wrapped": true
              },
              "type": "array"
            },
            "PublisherHost": {
              "description": "Gets the name of the server with Publisher service that handles current \"PublishTransaction\".",
              "type": "string"
            },
            "RenderingTime": {
              "description": "Gets the time span which was spent to render \"PublishTransaction\".",
              "type": "string"
            },
            "ResolvingTime": {
              "description": "Gets the time span which was spent to resolve items for \"PublishTransaction\".",
              "type": "string"
            },
            "State": {
              "$ref": "#/definitions/PublishTransactionState",
              "description": "Gets the state of this instance."
            },
            "StateChangeDateTime": {
              "description": "Gets the date and time in UTC when the last state change occurred.",
              "example": "1970-01-01T00:00:00Z",
              "type": "string",
              "format": "date-time"
            },
            "TargetType": {
              "$ref": "#/definitions/Link"
            },
            "TotalExecutionTime": {
              "description": "Gets the time span which was spent for publishing \"PublishTransaction\".",
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "xml": {
        "name": "PublishTransaction"
      },
      "type": "object"
    },
    "PublishTransactionsCreationResult": {
      "description": "The result of the publish\\un-publish operation",
      "properties": {
        "$type": {
          "description": "Set to the name of concrete class, such as 'PublishTransactionsCreationResult' (or a class name that inherits from this class)",
          "example": "PublishTransactionsCreationResult",
          "type": "string"
        },
        "PublishTransactionIds": {
          "description": "The list of the ids of the created publish\\un-publish transactions.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "discriminator": "$type",
      "xml": {
        "name": "PublishTransactionsCreationResult"
      },
      "type": "object"
    },
    "PublishTransactionState": {
      "description": "Represents the states a Publish Transaction can have.\r\n\r\nMembers:\r\n* `ScheduledForPublish` - The PublishTransaction is scheduled to start at the specified date time.\r\n* `WaitingForPublish` - The PublishTransaction is waiting to be processed.\r\n* `InProgress` - The PublishTransaction is currently in progress.\r\n* `ScheduledForDeployment` - The PublishTransaction is scheduled to be deployed at the specified date time.\r\n* `WaitingForDeployment` - The PublishTransaction is waiting to be deployed at the specified date time.\r\n* `Failed` - The PublishTransaction failed.\r\n* `Success` - The PublishTransaction succeeded.\r\n* `Warning` - The PublishTransaction succeeded but contains warnings.\r\n* `Resolving` - The PublishTransaction is currently being resolved.\r\n* `Rendering` - The PublishTransaction is currently being rendered.\r\n* `Throttled` - The PublishTransaction is currently being throttled by the TransportService.\r\n* `ReadyForTransport` - The PublishTransaction is currently ready for transport.\r\n* `Transporting` - The PublishTransaction is currently being transported to the destinations.\r\n* `Deploying` - The PublishTransaction is currently being deployed.\r\n* `PreparingDeployment` - The PublishTransaction is currently being prepared for deployment.\r\n* `PreCommittingDeployment` - The PublishTransaction is in the pre-committing deployment phase.\r\n* `CommittingDeployment` - The PublishTransaction is being committed for the deployment.\r\n* `WaitingForCdEnvironment` - The PublishTransaction is waiting for Content Delivery Environment to be online.\r\n",
      "type": "string",
      "enum": [
        "ScheduledForPublish",
        "WaitingForPublish",
        "InProgress",
        "ScheduledForDeployment",
        "WaitingForDeployment",
        "Failed",
        "Success",
        "Warning",
        "Resolving",
        "Rendering",
        "Throttled",
        "ReadyForTransport",
        "Transporting",
        "Deploying",
        "PreparingDeployment",
        "PreCommittingDeployment",
        "CommittingDeployment",
        "WaitingForCdEnvironment"
      ]
    },
    "PublishUrlInfo": {
      "description": "Represents information about publish url for specific publish purpose.",
      "properties": {
        "$type": {
          "description": "Set to the name of concrete class, such as 'PublishUrlInfo' (or a class name that inherits from this class)",
          "example": "PublishUrlInfo",
          "type": "string"
        },
        "TargetType": {
          "description": "Gets or sets Publish Target Type.",
          "type": "string"
        },
        "Uri": {
          "description": "Gets or sets Publish Uri.",
          "type": "string"
        }
      },
      "discriminator": "$type",
      "xml": {
        "name": "PublishUrlInfo"
      },
      "type": "object"
    },
    "Region": {
      "description": "Abstract base class for Regions.",
      "properties": {
        "$type": {
          "description": "Set to the name of concrete class, such as 'Region' (or a class name that inherits from this class)",
          "example": "EmbeddedRegion",
          "type": "string"
        },
        "RegionName": {
          "description": "Gets the region name.",
          "type": "string"
        }
      },
      "discriminator": "$type",
      "xml": {
        "name": "Region"
      },
      "type": "object"
    },
    "RegionDefinition": {
      "description": "Represents the data of a Region Definition in a Region Schema.",
      "properties": {
        "$type": {
          "description": "Set to the name of concrete class, such as 'RegionDefinition' (or a class name that inherits from this class)",
          "example": "RegionDefinition",
          "type": "string"
        },
        "ComponentPresentationConstraints": {
          "description": "Gets or sets the Component Presentation constraints for a Region using this Region Schema.",
          "items": {
            "$ref": "#/definitions/ComponentPresentationConstraint"
          },
          "xml": {
            "name": "ComponentPresentationConstraint",
            "wrapped": true
          },
          "type": "array"
        },
        "DefaultComponentPresentations": {
          "description": "Gets or sets the default Component Presentations for a Region using this Region Schema.",
          "items": {
            "$ref": "#/definitions/ComponentPresentation"
          },
          "xml": {
            "name": "ComponentPresentation",
            "wrapped": true
          },
          "type": "array"
        },
        "NestedRegions": {
          "description": "Gets or sets the nested Regions for the Region Schema.",
          "items": {
            "$ref": "#/definitions/NestedRegion"
          },
          "xml": {
            "name": "NestedRegion",
            "wrapped": true
          },
          "type": "array"
        }
      },
      "discriminator": "$type",
      "xml": {
        "name": "RegionDefinition"
      },
      "type": "object"
    },
    "RegisteredType": {
      "description": "Represents a base data class for types registered in the system",
      "required": [
        "Id"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/SystemWideObject"
        },
        {
          "required": [
            "Id"
          ],
          "properties": {
            "Name": {
              "description": "Gets the non-translatable name of the registered type that can be used to identify it",
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "xml": {
        "name": "RegisteredType"
      },
      "type": "object"
    },
    "Repository": {
      "description": "Represents a Repository: a context for BluePrinting.",
      "required": [
        "Id"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/SystemWideObject"
        },
        {
          "required": [
            "Id"
          ],
          "properties": {
            "AccessControlList": {
              "$ref": "#/definitions/AccessControlList"
            },
            "BusinessProcessType": {
              "$ref": "#/definitions/Link"
            },
            "ContentSecurityDescriptor": {
              "$ref": "#/definitions/SecurityDescriptor"
            },
            "DefaultMultimediaSchema": {
              "$ref": "#/definitions/Link"
            },
            "HasChildren": {
              "description": "Gets a value indicating whether this Repository has child Repositories in a BluePrint hierarchy.",
              "type": "boolean"
            },
            "Key": {
              "description": "Gets or sets the Key value.",
              "type": "string"
            },
            "LocationInfo": {
              "$ref": "#/definitions/LocationInfo"
            },
            "Metadata": {
              "$ref": "#/definitions/FieldsValueDictionary"
            },
            "MetadataSchema": {
              "$ref": "#/definitions/Link"
            },
            "MinimalLocalizeApprovalStatus": {
              "$ref": "#/definitions/Link"
            },
            "Parents": {
              "description": "Gets or sets access to the parent Repositories.",
              "items": {
                "$ref": "#/definitions/Link"
              },
              "xml": {
                "name": "Link",
                "wrapped": true
              },
              "type": "array"
            },
            "RootFolder": {
              "$ref": "#/definitions/Link"
            },
            "TaskProcess": {
              "$ref": "#/definitions/Link"
            },
            "VersionInfo": {
              "$ref": "#/definitions/LimitedVersionInfo"
            }
          },
          "type": "object"
        }
      ],
      "xml": {
        "name": "Repository"
      },
      "type": "object"
    },
    "RepositoryLocalObject": {
      "description": "Abstract base class for the data of repository-local data objects: data objects that reside in a \"Repository\".",
      "required": [
        "Id"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/IdentifiableObject"
        },
        {
          "required": [
            "Id"
          ],
          "properties": {
            "BluePrintInfo": {
              "$ref": "#/definitions/BlueprintInfo"
            },
            "IsPublishedInContext": {
              "description": "Gets whether the object is published in the context Publication.",
              "type": "boolean"
            },
            "Locale": {
              "description": "Gets the locale for this item from owning Publication.",
              "type": "string"
            },
            "LocationInfo": {
              "$ref": "#/definitions/LocationInfo"
            },
            "LockInfo": {
              "$ref": "#/definitions/LockInfo"
            },
            "Metadata": {
              "$ref": "#/definitions/FieldsValueDictionary"
            },
            "MetadataSchema": {
              "$ref": "#/definitions/Link"
            },
            "VersionInfo": {
              "$ref": "#/definitions/LimitedVersionInfo"
            }
          },
          "type": "object"
        }
      ],
      "xml": {
        "name": "RepositoryLocalObject"
      },
      "type": "object"
    },
    "ResolvedBundle": {
      "description": "Represents a resolved Bundle: the actual Bundle and the subset of given items which are contained in it.",
      "required": [
        "Id"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/VirtualFolder"
        },
        {
          "required": [
            "Id"
          ],
          "properties": {},
          "type": "object"
        }
      ],
      "xml": {
        "name": "ResolvedBundle"
      },
      "type": "object"
    },
    "ResolvedItem": {
      "description": "Represents the data object of a Resolved Item.",
      "properties": {
        "$type": {
          "description": "Set to the name of concrete class, such as 'ResolvedItem' (or a class name that inherits from this class)",
          "example": "ResolvedItem",
          "type": "string"
        },
        "Item": {
          "$ref": "#/definitions/Link",
          "description": "Gets a link to the resolved \"IdentifiableObject\"."
        },
        "ItemPath": {
          "description": "Gets the resolved item's path. The value is set only after successful resolving.",
          "type": "string"
        },
        "Publication": {
          "$ref": "#/definitions/Link",
          "description": "Gets the Publication for which this item was resolved."
        },
        "TargetType": {
          "$ref": "#/definitions/Link",
          "description": "Gets the Target Type for which this item was resolved."
        },
        "Template": {
          "$ref": "#/definitions/Link",
          "description": "Gets the template to render the item with."
        }
      },
      "discriminator": "$type",
      "xml": {
        "name": "ResolvedItem"
      },
      "type": "object"
    },
    "ResolveInstruction": {
      "description": "Represents the instructions needed for resolving.",
      "allOf": [
        {
          "$ref": "#/definitions/ResolveInstructionBase"
        },
        {
          "properties": {
            "IncludeComponentLinks": {
              "description": "Gets or sets a value indicating whether component links should also be resolved.",
              "type": "boolean"
            },
            "IncludeDynamicVersion": {
              "description": "Gets or sets a value indicating whether dynamic version of the item will be resolved.",
              "type": "boolean"
            },
            "IncludeWorkflow": {
              "description": "Gets or sets a value indicating whether the item is published from the user's work list.",
              "type": "boolean"
            },
            "PublishNewContent": {
              "description": "Gets or sets a value indicating whether already published items should be published.",
              "type": "boolean"
            }
          },
          "type": "object"
        }
      ],
      "xml": {
        "name": "ResolveInstruction"
      },
      "type": "object"
    },
    "ResolveInstructionBase": {
      "description": "Represents the base instructions needed for resolving.",
      "properties": {
        "$type": {
          "description": "Set to the name of concrete class, such as 'ResolveInstructionBase' (or a class name that inherits from this class)",
          "example": "<Set to a class name inheriting from 'ResolveInstructionBase'>",
          "type": "string"
        },
        "IncludeChildPublications": {
          "description": "Gets or sets a value indicating whether to resolve items also from all child Publications where user has PublishManagement rights.",
          "type": "boolean"
        },
        "IncludeCurrentPublication": {
          "description": "Gets or sets a value indicating whether items will be (un)published inside the current Publication.",
          "type": "boolean"
        },
        "PublishInChildPublications": {
          "description": "Gets or sets a collection of TCM URIs of child Publications where items will be unpublished.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "StructureResolveOption": {
          "$ref": "#/definitions/StructureResolveOption",
          "description": "Gets or sets a value indicating the option to include the resolved items and/or structure."
        }
      },
      "discriminator": "$type",
      "xml": {
        "name": "ResolveInstructionBase"
      },
      "type": "object"
    },
    "Rights": {
      "description": "Specifies the Rights used for security checks.\r\n\r\nMembers:\r\n* `None` - No rights.\r\n* `PublicationAccess` - Grants access to a publication.\r\n* `PublicationManagement` - Grants publication properties update.\r\n* `FolderManagement` - Grants create, update, delete rights on Folder.\r\n* `StructureGroupManagement` - Grants create, update, delete rights on StructureGroup.\r\n* `SchemaManagement` - Grants create, update, delete rights on Schema.\r\n* `ComponentManagement` - Grants create, update, delete rights on Components.\r\n* `ComponentTemplateManagement` - Grants create, update, delete rights on ComponentTemplates.\r\n* `PageManagement` - Grants create, update, delete rights on Pages.\r\n* `PageTemplateManagement` - Grants create, update, delete rights on PageTemplates.\r\n* `ProfileManagement` - Grants create, update, delete rights on TargetGroups.\r\n* `PublishManagement` - Grants rights to publish.\r\n* `PermissionManagement` - Grants rights to change rights on Repository and permissions on Organizational Items.\r\n* `WorkflowManagement` - Grants create, update, delete rights to manage Workflow.\n            To grant workflow management rights to a trustee, the WorkflowManager privilege must be used.\r\n* `CategoryManagement` - Grants create, update, delete rights on Categories.\r\n* `TemplateBuildingBlockManagement` - Grants create, update, delete rights on TemplateBuildingBlocks.\r\n* `VirtualFolderManagement` - Grants create, update, delete rights on VirtualFolders.\r\n* `BundleManagement` - Grants create, update, delete rights on Bundles.\r\n* `BusinessProcessTypeManagement` - Grants create, update, delete rights on Business Process Type.\r\n* `PublicationAdministration` - Grants repository-local administration rights.\r\n* `All` - All rights.\r\n",
      "type": "string",
      "enum": [
        "None",
        "PublicationAccess",
        "PublicationManagement",
        "FolderManagement",
        "StructureGroupManagement",
        "SchemaManagement",
        "ComponentManagement",
        "ComponentTemplateManagement",
        "PageManagement",
        "PageTemplateManagement",
        "ProfileManagement",
        "PublishManagement",
        "PermissionManagement",
        "WorkflowManagement",
        "CategoryManagement",
        "TemplateBuildingBlockManagement",
        "VirtualFolderManagement",
        "BundleManagement",
        "BusinessProcessTypeManagement",
        "PublicationAdministration",
        "All"
      ]
    },
    "RLOItemType": {
      "description": "Specifies the subset of the Item types which are the Repository Local Object model.\r\n\r\nMembers:\r\n* `Folder` - Folder.\r\n* `StructureGroup` - Structure group.\r\n* `Schema` - Schema.\r\n* `Component` - Component.\r\n* `ComponentTemplate` - Component template.\r\n* `Page` - Page.\r\n* `PageTemplate` - Page template.\r\n* `TargetGroup` - Target group.\r\n* `Category` - Category.\r\n* `Keyword` - Keyword.\r\n* `TemplateBuildingBlock` - Template building block.\r\n* `VirtualFolder` - Virtual folder.\r\n",
      "type": "string",
      "enum": [
        "Folder",
        "StructureGroup",
        "Schema",
        "Component",
        "ComponentTemplate",
        "Page",
        "PageTemplate",
        "TargetGroup",
        "Category",
        "Keyword",
        "TemplateBuildingBlock",
        "VirtualFolder"
      ]
    },
    "RollBackRequest": {
      "description": "Rolls back item version.",
      "properties": {
        "$type": {
          "description": "Set to the name of concrete class, such as 'RollBackRequest' (or a class name that inherits from this class)",
          "example": "RollBackRequest",
          "type": "string"
        },
        "DeleteNewerVersions": {
          "description": "If set to true, deletes all versions newer than the specified version. Otherwise keeps all versions and creates a new instance and version based on the specified version.",
          "type": "boolean"
        }
      },
      "discriminator": "$type",
      "xml": {
        "name": "RollBackRequest"
      },
      "type": "object"
    },
    "Schema": {
      "description": "Represents the data of a Schema defining the structure of content and/or metadata.",
      "required": [
        "Id"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/VersionedItem"
        },
        {
          "required": [
            "Id"
          ],
          "properties": {
            "AllowedMultimediaTypes": {
              "description": "Gets or sets access to the allowed Multimedia Types.",
              "items": {
                "$ref": "#/definitions/Link"
              },
              "xml": {
                "name": "Link",
                "wrapped": true
              },
              "type": "array"
            },
            "BundleProcess": {
              "$ref": "#/definitions/Link"
            },
            "ComponentProcess": {
              "$ref": "#/definitions/Link"
            },
            "DeleteBundleOnProcessFinished": {
              "description": "Gets or sets a value indicating whether the Bundles based on this Schema should be deleted when a workflow process they are part of finishes.",
              "type": "boolean"
            },
            "Description": {
              "description": "Gets or sets a description for the Schema.",
              "type": "string"
            },
            "Fields": {
              "$ref": "#/definitions/FieldsDefinitionDictionary"
            },
            "IsIndexable": {
              "description": "Gets or sets whether components based on this schema will be indexed during data publishing.",
              "type": "boolean"
            },
            "IsPublishable": {
              "description": "Gets or sets whether components based on this schema can be resolved for data publishing.",
              "type": "boolean"
            },
            "IsTridionWebSchema": {
              "description": "Gets whether the Schema qualifies as \"Tridion Web Schema\".",
              "type": "boolean"
            },
            "MetadataFields": {
              "$ref": "#/definitions/FieldsDefinitionDictionary"
            },
            "NamespaceUri": {
              "description": "Gets the namespace URI (target namespace) of the Schema.",
              "type": "string"
            },
            "Purpose": {
              "$ref": "#/definitions/SchemaPurpose",
              "description": "Gets or sets the purpose for the Schema."
            },
            "RegionDefinition": {
              "$ref": "#/definitions/RegionDefinition"
            },
            "RootElementName": {
              "description": "Gets or sets the name of the root element.",
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "xml": {
        "name": "Schema"
      },
      "type": "object"
    },
    "SchemaInstance": {
      "description": "Represents the instance data of a schema.",
      "properties": {
        "$type": {
          "description": "Set to the name of concrete class, such as 'SchemaInstance' (or a class name that inherits from this class)",
          "example": "SchemaInstance",
          "type": "string"
        },
        "Content": {
          "$ref": "#/definitions/FieldsValueDictionary",
          "description": "Gets or sets the content."
        },
        "Metadata": {
          "$ref": "#/definitions/FieldsValueDictionary",
          "description": "Gets or sets the metadata."
        },
        "Region": {
          "$ref": "#/definitions/EmbeddedRegion",
          "description": "Gets or sets the root Region."
        },
        "RegionXml": {
          "description": "Gets or sets the Regions as XML.",
          "type": "string"
        },
        "Schema": {
          "$ref": "#/definitions/Link",
          "description": "Gets the link to associated schema for this Instance Data."
        }
      },
      "discriminator": "$type",
      "xml": {
        "name": "SchemaInstance"
      },
      "type": "object"
    },
    "SchemaPurpose": {
      "description": "Defines a purpose of a Schema, that is in which items the Schema can be used.\r\n\r\nMembers:\r\n* `Component` - Schema defines the content and metadata of Components with XML content.\r\n* `Multimedia` - Schema defines the content and metadata of Multimedia Components.\r\n* `Embedded` - Schema is included into other Schemas.\r\n* `Metadata` - Schema defines the metadata of items (except for Components).\r\n* `Protocol` - Schema defines the protocol fields of a Publication Target.\r\n* `VirtualFolderType` - Schema defines the configuration data of a Virtual Folder.\r\n* `TemplateParameters` - Schema defines the parameters of a Template.\r\n* `Bundle` - Schema defines the metadata and process definition of a Bundle.\r\n* `Region` - Schema defines the Region definition and metadata.\r\n",
      "type": "string",
      "enum": [
        "Component",
        "Multimedia",
        "Embedded",
        "Metadata",
        "Protocol",
        "VirtualFolderType",
        "TemplateParameters",
        "Bundle",
        "Region"
      ]
    },
    "SearchFolder": {
      "description": "Represents a Search Folder.",
      "required": [
        "Id"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/VirtualFolder"
        },
        {
          "required": [
            "Id"
          ],
          "properties": {
            "Configuration": {
              "description": "Get or set the configuration data.",
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "xml": {
        "name": "SearchFolder"
      },
      "type": "object"
    },
    "SecurityDescriptor": {
      "description": "The SecurityDescriptorData is a grouping of all the Rights and Permissions (allow and denies) for the trustees.\r\nA SecurityDescriptorData is specific to a user and a context (IdentifiableObject).",
      "properties": {
        "$type": {
          "description": "Set to the name of concrete class, such as 'SecurityDescriptor' (or a class name that inherits from this class)",
          "example": "SecurityDescriptor",
          "type": "string"
        },
        "Permissions": {
          "description": "Gets the Permissions of an Identifiable object for a trustee.",
          "items": {
            "$ref": "#/definitions/Permissions"
          },
          "xml": {
            "name": "Permissions",
            "wrapped": true
          },
          "type": "array"
        },
        "Rights": {
          "description": "Gets the Rights of an Identifiable object for a trustee.",
          "items": {
            "$ref": "#/definitions/Rights"
          },
          "xml": {
            "name": "Rights",
            "wrapped": true
          },
          "type": "array"
        }
      },
      "discriminator": "$type",
      "xml": {
        "name": "SecurityDescriptor"
      },
      "type": "object"
    },
    "SingleLineTextFieldDefinition": {
      "description": "Represents a single-line text field definition (in a Schema).",
      "required": [
        "Description",
        "MaxOccurs",
        "MinOccurs",
        "Name"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/TextFieldDefinition"
        },
        {
          "required": [
            "Description",
            "MaxOccurs",
            "MinOccurs",
            "Name"
          ],
          "properties": {
            "DefaultValue": {
              "description": "Gets or sets the default value.",
              "type": "string"
            },
            "List": {
              "$ref": "#/definitions/SingleLineTextListDefinition"
            },
            "MaxLength": {
              "description": "Gets or sets the maximum length constraint.",
              "type": "integer",
              "format": "int32"
            },
            "MinLength": {
              "description": "Gets or sets the minimum length constraint.",
              "type": "integer",
              "format": "int32"
            },
            "Pattern": {
              "description": "Gets or sets a regular expression pattern to constrain the value.",
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "xml": {
        "name": "SingleLineTextFieldDefinition"
      },
      "type": "object"
    },
    "SingleLineTextListDefinition": {
      "description": "Provides information about whether/how to present a list of allowed single-line text field values.",
      "allOf": [
        {
          "$ref": "#/definitions/ListDefinition"
        },
        {
          "properties": {
            "Entries": {
              "description": "Gets access to the allowed values.",
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "type": "object"
        }
      ],
      "xml": {
        "name": "SingleLineTextListDefinition"
      },
      "type": "object"
    },
    "StartWorkflowInstruction": {
      "description": "Represents the data for a StartWorkflowInstruction.",
      "properties": {
        "$type": {
          "description": "Set to the name of concrete class, such as 'StartWorkflowInstruction' (or a class name that inherits from this class)",
          "example": "StartWorkflowInstruction",
          "type": "string"
        },
        "ActivityTitle": {
          "description": "Gets or sets the initial value for title of the first Activity.",
          "type": "string"
        },
        "Assignee": {
          "$ref": "#/definitions/Link",
          "description": "Gets or sets the initial value for assignee of the first Activity."
        },
        "DueDate": {
          "description": "Gets or sets the initial value for \"Activity.DueDate\" property of the first Activity.",
          "example": "1970-01-01T00:00:00Z",
          "type": "string",
          "format": "date-time"
        },
        "ProcessDefinition": {
          "$ref": "#/definitions/Link",
          "description": "Gets or sets the Process Definition for creating Process Instance."
        },
        "ProcessInstanceTitle": {
          "description": "Gets or sets the initial value for title of Process instance.",
          "type": "string"
        },
        "Subjects": {
          "description": "Gets or sets the items which participate in the Process.",
          "items": {
            "$ref": "#/definitions/Link"
          },
          "xml": {
            "name": "Link",
            "wrapped": true
          },
          "type": "array"
        },
        "WorkflowType": {
          "$ref": "#/definitions/Link",
          "description": "Gets or sets the workflow type of the Process."
        }
      },
      "discriminator": "$type",
      "xml": {
        "name": "StartWorkflowInstruction"
      },
      "type": "object"
    },
    "StructureGroup": {
      "description": "Represents the data of a Structure Group: an Organizational Item used to build the Publication's target structure.",
      "required": [
        "Id"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/OrganizationalItem"
        },
        {
          "required": [
            "Id"
          ],
          "properties": {
            "DefaultPageTemplate": {
              "$ref": "#/definitions/Link"
            },
            "Directory": {
              "description": "Gets or sets the directory name.",
              "type": "string"
            },
            "IsActive": {
              "description": "Gets or sets the active state of the Structure Group. \r\nIf the active state is set to false, the Structure Group and the items inside it cannot be published.",
              "type": "boolean"
            },
            "IsActiveResolvedValue": {
              "description": "Gets a value indicating whether this Structure Group and its items can be published.\r\nReturns true if the active state of this Structure Group and all of its ancestors is true.\r\nReturns false if the active state of this Structure Group or any of its ancestors is false.\r\nThe individual active state of each Structure Group is represented by the property \"IsActive\".",
              "type": "boolean"
            },
            "IsDefaultPageTemplateInherited": {
              "description": "Gets or sets whether the default Page Template is inherited from the Structure Group's parent.",
              "type": "boolean"
            },
            "LocationInfo": {
              "$ref": "#/definitions/PublishLocationInfo"
            },
            "PageBundleProcess": {
              "$ref": "#/definitions/Link"
            },
            "PageProcess": {
              "$ref": "#/definitions/Link"
            }
          },
          "type": "object"
        }
      ],
      "xml": {
        "name": "StructureGroup"
      },
      "type": "object"
    },
    "StructureResolveOption": {
      "description": "Represents the option to include the resolved items and/or structure.\r\n\r\nMembers:\r\n* `OnlyItems` - Only item(s) will be resolved. This is the default value.\r\n* `OnlyStructure` - Only Structure Group(s) will be resolved.\r\n* `ItemsAndStructure` - Structure Group(s) along with item(s) will be resolved.\r\n",
      "type": "string",
      "enum": [
        "OnlyItems",
        "OnlyStructure",
        "ItemsAndStructure"
      ]
    },
    "SynchronizationAction": {
      "description": "Represents the data of a synchronization action of a Repository Local Object against its Schema.",
      "properties": {
        "$type": {
          "description": "Set to the name of concrete class, such as 'SynchronizationAction' (or a class name that inherits from this class)",
          "example": "SynchronizationAction",
          "type": "string"
        },
        "FieldDescription": {
          "description": "Gets the description/label of the field on which the synchronization operation was applied.",
          "type": "string"
        },
        "FieldIndex": {
          "description": "Gets the index of a multivalued field in which the synchronization operation was applied.",
          "type": "integer",
          "format": "int32"
        },
        "FieldName": {
          "description": "Gets the XML name of the field on which the synchronization operation was applied.",
          "type": "string"
        },
        "SynchronizationActionApplied": {
          "description": "Gets the synchronization operation applied.",
          "items": {
            "$ref": "#/definitions/SynchronizeFlags"
          },
          "xml": {
            "name": "SynchronizeFlags",
            "wrapped": true
          },
          "type": "array"
        }
      },
      "discriminator": "$type",
      "xml": {
        "name": "SynchronizationAction"
      },
      "type": "object"
    },
    "SynchronizationResult": {
      "description": "Represents the data of synchronization of item content and/or metadata with the current schema.",
      "properties": {
        "$type": {
          "description": "Set to the name of concrete class, such as 'SynchronizationResult' (or a class name that inherits from this class)",
          "example": "SynchronizationResult",
          "type": "string"
        },
        "SynchronizationActions": {
          "description": "Gets the collection of \"SynchronizationAction\" objects containing all applied changes.",
          "items": {
            "$ref": "#/definitions/SynchronizationAction"
          },
          "xml": {
            "name": "SynchronizationAction",
            "wrapped": true
          },
          "type": "array"
        },
        "SynchronizedItem": {
          "$ref": "#/definitions/IdentifiableObject",
          "description": "Gets the \"IdentifiableObject\" with synchronized content and/or metadata."
        }
      },
      "discriminator": "$type",
      "xml": {
        "name": "SynchronizationResult"
      },
      "type": "object"
    },
    "SynchronizeFlags": {
      "description": "Specifies how the Repository Local Object should/can be synchronized with its Schema.\r\n\r\nMembers:\r\n* `Basic` - Use only basic option, which includes re-ordering fields.\r\n* `FixNamespace` - Fix the namespace of content and metadata element as per the schema.\r\n* `RemoveUnknownFields` - Remove any fields which do not exist in the schema.\r\n* `RemoveAdditionalValues` - Remove fields which occur more than allowed in MaxOccurs.\r\n* `ApplyDefaultValuesForMissingMandatoryFields` - Apply default values to mandatory fields which are missing.\r\n* `ApplyDefaultValuesForMissingNonMandatoryFields` - Apply default values to non-mandatory fields which are missing.\r\n* `ApplyFilterXsltToXhtmlFields` - Apply Xslt transformation to Xhtml fields.\r\n* `ConvertFieldType` - Convert field types as specified in schema.\r\n* `UpdateRegions` - Update nested regions structure of the page.\r\n* `All` - Apply all possible transformations.\r\n",
      "type": "string",
      "enum": [
        "Basic",
        "FixNamespace",
        "RemoveUnknownFields",
        "RemoveAdditionalValues",
        "ApplyDefaultValuesForMissingMandatoryFields",
        "ApplyDefaultValuesForMissingNonMandatoryFields",
        "ApplyFilterXsltToXhtmlFields",
        "ConvertFieldType",
        "UpdateRegions",
        "All"
      ]
    },
    "SystemPrivilege": {
      "description": "Represents a system-wide privilege.",
      "properties": {
        "$type": {
          "description": "Set to the name of concrete class, such as 'SystemPrivilege' (or a class name that inherits from this class)",
          "example": "SystemPrivilege",
          "type": "string"
        },
        "Title": {
          "description": "Localized title of a system-wide privilege.",
          "type": "string"
        },
        "Description": {
          "description": "Localized description of a system-wide privilege.",
          "type": "string"
        },
        "Key": {
          "description": "Key of a system-wide privilege.",
          "type": "string"
        }
      },
      "discriminator": "$type",
      "xml": {
        "name": "SystemPrivilege"
      },
      "type": "object"
    },
    "SystemPrivilegesDictionary": {
      "description": "Represents a dictionary of the system-wide privilege keys associations with a collection of the Group's link.",
      "additionalProperties": {},
      "type": "object"
    },
    "SystemWideObject": {
      "description": "Abstract base class for the data of all system-wide objects.",
      "required": [
        "Id"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/IdentifiableObject"
        },
        {
          "required": [
            "Id"
          ],
          "properties": {},
          "type": "object"
        }
      ],
      "xml": {
        "name": "SystemWideObject"
      },
      "type": "object"
    },
    "TargetGroup": {
      "description": "Represents the data of a Target Group: used to target an audience based on certain conditions.",
      "required": [
        "Id"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/RepositoryLocalObject"
        },
        {
          "required": [
            "Id"
          ],
          "properties": {
            "Conditions": {
              "description": "Gets or sets access to the conditions that define the Target Group",
              "items": {
                "$ref": "#/definitions/Condition"
              },
              "xml": {
                "name": "Condition",
                "wrapped": true
              },
              "type": "array"
            },
            "Description": {
              "description": "Gets or sets the description of the Target Group.",
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "xml": {
        "name": "TargetGroup"
      },
      "type": "object"
    },
    "TargetGroupCondition": {
      "description": "Represents a condition on \"membership\" of a Target Group.",
      "properties": {
        "Negate": {
          "description": "Gets or sets whether the condition should be negated.",
          "type": "boolean"
        },
        "TargetGroup": {
          "$ref": "#/definitions/Link",
          "description": "Gets or sets the Target Group to check \"membership\" against."
        }
      },
      "xml": {
        "name": "TargetGroupCondition"
      },
      "type": "object"
    },
    "TargetType": {
      "description": "Represents the data of a Target Type used as a target for publishing.",
      "required": [
        "Id"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/PublishingTarget"
        },
        {
          "required": [
            "Id"
          ],
          "properties": {
            "AccessControlList": {
              "$ref": "#/definitions/AccessControlList"
            },
            "BusinessProcessType": {
              "$ref": "#/definitions/Link"
            },
            "ContentSecurityDescriptor": {
              "$ref": "#/definitions/SecurityDescriptor"
            },
            "MinimalApprovalStatus": {
              "$ref": "#/definitions/Link"
            },
            "Priority": {
              "$ref": "#/definitions/PublishPriority",
              "description": "Gets or sets the Priority for this Target Type."
            },
            "Purpose": {
              "description": "Gets or sets the Purpose of this Target Type in context of a Business Process Type.",
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "xml": {
        "name": "TargetType"
      },
      "type": "object"
    },
    "TaxonomyNode": {
      "description": "Represents a Taxonomy node, including its child nodes.",
      "properties": {
        "$type": {
          "description": "Set to the name of concrete class, such as 'TaxonomyNode' (or a class name that inherits from this class)",
          "example": "TaxonomyNode",
          "type": "string"
        },
        "Id": {
          "description": "Gets or sets the identifier of the Taxonomy node.",
          "type": "string"
        },
        "Title": {
          "description": "Gets or sets the title of the Taxonomy node.",
          "type": "string"
        },
        "AlternativeLabels": {
          "description": "Gets or sets alternative labels for the Taxonomy node.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "ChildNodes": {
          "description": "Gets or sets the child nodes of the Taxonomy node.",
          "items": {
            "$ref": "#/definitions/TaxonomyNode"
          },
          "xml": {
            "name": "TaxonomyNode",
            "wrapped": true
          },
          "type": "array"
        },
        "Descendants": {
          "description": "Gets the number of descendant nodes.",
          "readOnly": true,
          "type": "integer",
          "format": "int32"
        },
        "IsAbstract": {
          "description": "Gets or sets a value indicating if the Taxonomy node is abstract.",
          "type": "boolean"
        }
      },
      "discriminator": "$type",
      "xml": {
        "name": "TaxonomyNode"
      },
      "type": "object"
    },
    "Template": {
      "description": "Abstract base class for the data of Templates.",
      "required": [
        "Id"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/VersionedItem"
        },
        {
          "required": [
            "Id"
          ],
          "properties": {
            "BinaryContent": {
              "$ref": "#/definitions/BinaryContent"
            },
            "Content": {
              "description": "Gets or sets the Template's (text) content.",
              "type": "string"
            },
            "ParameterSchema": {
              "$ref": "#/definitions/Link"
            },
            "TemplateType": {
              "description": "Gets or sets the Template Type.",
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "xml": {
        "name": "Template"
      },
      "type": "object"
    },
    "TemplateBuildingBlock": {
      "description": "Represents the data of a Template Building Block: a re-usable template module.",
      "required": [
        "Id"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/Template"
        },
        {
          "required": [
            "Id"
          ],
          "properties": {
            "ApprovalStatus": {
              "$ref": "#/definitions/Link"
            },
            "WorkflowInfo": {
              "$ref": "#/definitions/WorkflowInfo"
            }
          },
          "type": "object"
        }
      ],
      "xml": {
        "name": "TemplateBuildingBlock"
      },
      "type": "object"
    },
    "TextFieldDefinition": {
      "description": "Abstract base class for Text Field Definitions (specified in a Schema)",
      "required": [
        "Description",
        "MaxOccurs",
        "MinOccurs",
        "Name"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/ItemPublishableFieldDefinition"
        },
        {
          "required": [
            "Description",
            "MaxOccurs",
            "MinOccurs",
            "Name"
          ],
          "properties": {
            "UseForAutoClassification": {
              "description": "Specifies whether the text field is used as input for automatic classification or not.",
              "type": "boolean"
            }
          },
          "type": "object"
        }
      ],
      "xml": {
        "name": "TextFieldDefinition"
      },
      "type": "object"
    },
    "TrackingKeyCondition": {
      "description": "Represents a condition on the value of a Tracking Key.",
      "properties": {
        "Keyword": {
          "$ref": "#/definitions/Link",
          "description": "Gets or sets the Keyword on which the Tracking Key is based."
        },
        "Negate": {
          "description": "Gets or sets whether the condition should be negated.",
          "type": "boolean"
        },
        "Operator": {
          "$ref": "#/definitions/NumericalConditionOperator",
          "description": "Gets or sets the operator used for comparing the Tracking Key's value against the \"Value\" specified in the condition."
        },
        "Value": {
          "description": "Gets or sets the value to compare the Tracking Key's value against.",
          "type": "number",
          "format": "double"
        }
      },
      "xml": {
        "name": "TrackingKeyCondition"
      },
      "type": "object"
    },
    "TreeNode": {
      "properties": {
        "$type": {
          "description": "Set to the name of concrete class, such as 'TreeNode' (or a class name that inherits from this class)",
          "example": "TreeNode",
          "type": "string"
        },
        "IdRef": {
          "type": "string"
        },
        "DisplayName": {
          "type": "string"
        },
        "Children": {
          "items": {
            "$ref": "#/definitions/TreeNode"
          },
          "xml": {
            "name": "TreeNode",
            "wrapped": true
          },
          "type": "array"
        },
        "Data": {
          "$ref": "#/definitions/IdentifiableObject"
        },
        "DataType": {
          "type": "string"
        },
        "Parent": {
          "$ref": "#/definitions/TreeNode"
        }
      },
      "discriminator": "$type",
      "xml": {
        "name": "TreeNode"
      },
      "type": "object"
    },
    "TridionActivityDefinition": {
      "description": "Represents the data of a Tridion proprietary Activity Definition.",
      "required": [
        "Id"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/ActivityDefinition"
        },
        {
          "required": [
            "Id"
          ],
          "properties": {
            "ActivityType": {
              "$ref": "#/definitions/ActivityType",
              "description": "Gets or sets a value indicating whether this instance represents a decision or not."
            },
            "AllowOverrideDueDate": {
              "description": "Gets or sets a value indicating whether \"Activity.DueDate\" can be changed manually, or not.",
              "type": "boolean"
            },
            "ExpirationScript": {
              "description": "Gets or sets the script for Activity Expiration.",
              "type": "string"
            },
            "ExpirationScriptType": {
              "description": "Gets or sets the script type of \"ExpirationScript\" of an Activity.",
              "type": "string"
            },
            "FinishApprovalStatus": {
              "$ref": "#/definitions/Link"
            },
            "NextActivityDefinitions": {
              "description": "Gets or sets the potential next activities in the Workflow.",
              "items": {
                "$ref": "#/definitions/Link"
              },
              "xml": {
                "name": "Link",
                "wrapped": true
              },
              "type": "array"
            },
            "PerformingTimeout": {
              "description": "Gets or sets the timeout for performing current activity, in minutes.",
              "type": "integer",
              "format": "int32"
            },
            "Script": {
              "description": "Gets or sets the script of an automated Activity.",
              "type": "string"
            },
            "ScriptType": {
              "description": "Gets or sets the script type of \"Script\" of an automated Activity.",
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "xml": {
        "name": "TridionActivityDefinition"
      },
      "type": "object"
    },
    "TridionProcessDefinition": {
      "description": "Represents the data of a Tridion proprietary Process Definition.",
      "required": [
        "Id"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/ProcessDefinition"
        },
        {
          "required": [
            "Id"
          ],
          "properties": {
            "Diagram": {
              "type": "string",
              "format": "byte"
            }
          },
          "type": "object"
        }
      ],
      "xml": {
        "name": "TridionProcessDefinition"
      },
      "type": "object"
    },
    "Trustee": {
      "description": "Abstract base class for the data of \"Trustees\": the data of Users or Groups.",
      "required": [
        "Id"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/SystemWideObject"
        },
        {
          "required": [
            "Id"
          ],
          "properties": {
            "Description": {
              "description": "Gets or sets the description (full name) of the Trustee",
              "type": "string"
            },
            "GroupMemberships": {
              "description": "Gets or sets access to the Trustee's Group memberships.",
              "items": {
                "$ref": "#/definitions/GroupMembership"
              },
              "xml": {
                "name": "GroupMembership",
                "wrapped": true
              },
              "type": "array"
            },
            "IsPredefined": {
              "description": "Gets whether the trustee is predefined by the system.",
              "type": "boolean"
            }
          },
          "type": "object"
        }
      ],
      "xml": {
        "name": "Trustee"
      },
      "type": "object"
    },
    "TypeConstraint": {
      "description": "Represents a type constraint for Component Presentation(s) in Region Schema.",
      "allOf": [
        {
          "$ref": "#/definitions/ComponentPresentationConstraint"
        },
        {
          "properties": {
            "BasedOnComponentTemplate": {
              "$ref": "#/definitions/Link"
            },
            "BasedOnSchema": {
              "$ref": "#/definitions/Link"
            }
          },
          "type": "object"
        }
      ],
      "xml": {
        "name": "TypeConstraint"
      },
      "type": "object"
    },
    "UndoCheckOutRequest": {
      "description": "Removes permanent lock and reverts to last major version of the versioned item.",
      "properties": {
        "$type": {
          "description": "Set to the name of concrete class, such as 'UndoCheckOutRequest' (or a class name that inherits from this class)",
          "example": "UndoCheckOutRequest",
          "type": "string"
        },
        "RemovePermanentLock": {
          "description": "A permanent lock is set when the user performs an explicit checkout action in the UI.\r\nIt is removed when the user performs an explicit undo checkout action in the UI.\r\nAvailable values:\r\n* True – removes the permanent lock after the check-in action.\r\n* False – does not remove the lock after the check-in action, such as when the item is still being edited.",
          "type": "boolean"
        }
      },
      "discriminator": "$type",
      "xml": {
        "name": "UndoCheckOutRequest"
      },
      "type": "object"
    },
    "UnPublishInstruction": {
      "description": "Represents the instructions needed for un-publishing an item.",
      "required": [
        "ResolveInstruction"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/PublishInstructionBase"
        },
        {
          "required": [
            "ResolveInstruction"
          ],
          "properties": {
            "ResolveInstruction": {
              "$ref": "#/definitions/UnPublishResolveInstruction"
            },
            "StartAt": {
              "description": "Gets or sets the date and time when the un-publishing should be started. Should be specified in UTC format.\r\nThe value will be converted to UTC time if specified with time zone shift, e.g. \"2020-01-24T17:24:50+02:00\" will be converted to \"2020-01-24T15:24:50Z\"\r\nConversion is not happening if time zone shift is not specified.",
              "example": "1970-01-01T00:00:00Z",
              "type": "string",
              "format": "date-time"
            }
          },
          "type": "object"
        }
      ],
      "xml": {
        "name": "UnPublishInstruction"
      },
      "type": "object"
    },
    "UnPublishRequest": {
      "description": "Represents the request during the un-publishing process.",
      "required": [
        "UnPublishInstruction"
      ],
      "properties": {
        "$type": {
          "description": "Set to the name of concrete class, such as 'UnPublishRequest' (or a class name that inherits from this class)",
          "example": "UnPublishRequest",
          "type": "string"
        },
        "Ids": {
          "description": "The identifiers of the items that will be send for publishing.",
          "items": {
            "type": "string"
          },
          "type": "array",
          "minLength": 1
        },
        "Priority": {
          "$ref": "#/definitions/PublishPriority",
          "description": "The priority of the un-publish action."
        },
        "TargetIdsOrPurposes": {
          "description": "A collection of Publishing Target instances (Target Types or Purposes) where the items are unpublished from.",
          "items": {
            "type": "string"
          },
          "type": "array",
          "minLength": 1
        },
        "UnPublishInstruction": {
          "$ref": "#/definitions/UnPublishInstruction",
          "description": "Represents the instructions needed for un-publishing an item."
        }
      },
      "discriminator": "$type",
      "xml": {
        "name": "UnPublishRequest"
      },
      "type": "object"
    },
    "UnPublishResolveInstruction": {
      "description": "Represents the instructions needed for resolving.",
      "allOf": [
        {
          "$ref": "#/definitions/ResolveInstructionBase"
        },
        {
          "properties": {},
          "type": "object"
        }
      ],
      "xml": {
        "name": "UnPublishResolveInstruction"
      },
      "type": "object"
    },
    "User": {
      "description": "Represents the data of a User.",
      "required": [
        "Id"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/Trustee"
        },
        {
          "required": [
            "Id"
          ],
          "properties": {
            "IsEnabled": {
              "description": "Gets or sets whether the User is enabled.",
              "type": "boolean"
            },
            "IsEnabledEditable": {
              "description": "Gets whether the enabled state can be modified.",
              "type": "boolean"
            },
            "IsPrivilegesEditable": {
              "description": "Gets whether the privileges can be modified.",
              "type": "boolean"
            },
            "LanguageId": {
              "description": "Gets or sets the language ID (LCID) of the User",
              "type": "integer",
              "format": "int32"
            },
            "LocaleId": {
              "description": "Gets or sets the locale ID (LCID) of the User",
              "type": "integer",
              "format": "int32"
            },
            "Privileges": {
              "description": "Gets or sets the User's system-wide privileges",
              "type": "integer",
              "format": "int32"
            }
          },
          "type": "object"
        }
      ],
      "xml": {
        "name": "User"
      },
      "type": "object"
    },
    "UserLocaleInfo": {
      "description": "Represents the information about User locale.",
      "properties": {
        "$type": {
          "description": "Set to the name of concrete class, such as 'UserLocaleInfo' (or a class name that inherits from this class)",
          "example": "UserLocaleInfo",
          "type": "string"
        },
        "AmDesignator": {
          "description": "Gets the string designator for hours that are \"ante meridiem\" (before noon).",
          "type": "string"
        },
        "DayNames": {
          "description": "Gets the string array that contains the culture-specific full names of the days of the week.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "FirstDayOfWeek": {
          "description": "Gets the first day of the week.",
          "type": "string"
        },
        "FullDateTimeFormat": {
          "description": "Gets the custom format string for a long date and long time value.",
          "type": "string"
        },
        "LanguageCode": {
          "description": "Gets the ISO 639-1 two-letter code for the current language.",
          "type": "string"
        },
        "LanguageId": {
          "description": "Gets the language identifier.",
          "type": "string"
        },
        "LocaleId": {
          "description": "Gets the culture identifier.",
          "type": "string"
        },
        "LongDateFormat": {
          "description": "Gets the custom format string for a long date value.",
          "type": "string"
        },
        "LongTimeFormat": {
          "description": "Gets the custom format string for a long time value.",
          "type": "string"
        },
        "MonthNames": {
          "description": "Gets the string array that contains the culture-specific full names of the months.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "PmDesignator": {
          "description": "Gets the string designator for hours that are \"post meridiem\" (after noon).",
          "type": "string"
        },
        "ShortDateFormat": {
          "description": "Gets the custom format string for a short date value.",
          "type": "string"
        },
        "ShortDateTimeFormat": {
          "description": "Gets the custom format string for a short date and short time value.",
          "type": "string"
        },
        "ShortDayNames": {
          "description": "Gets the string array that contains the culture-specific abbreviated names of the days of the week.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "ShortestDayNames": {
          "description": "Gets the string array of the shortest unique abbreviated day names.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "ShortMonthNames": {
          "description": "Gets the string array that contains the culture-specific abbreviated names of the months.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "ShortTimeFormat": {
          "description": "Gets the custom format string for a short time value.",
          "type": "string"
        }
      },
      "discriminator": "$type",
      "xml": {
        "name": "UserLocaleInfo"
      },
      "type": "object"
    },
    "UserPreferences": {
      "description": "Represents the User preferences data.",
      "properties": {
        "$type": {
          "description": "Set to the name of concrete class, such as 'UserPreferences' (or a class name that inherits from this class)",
          "example": "UserPreferences",
          "type": "string"
        },
        "Favorites": {
          "description": "Gets the collection of the User favorite links.",
          "items": {
            "$ref": "#/definitions/FavoriteLink"
          },
          "xml": {
            "name": "FavoriteLink",
            "wrapped": true
          },
          "type": "array"
        }
      },
      "discriminator": "$type",
      "xml": {
        "name": "UserPreferences"
      },
      "type": "object"
    },
    "UserProfile": {
      "description": "DTO for user profile.",
      "properties": {
        "$type": {
          "description": "Set to the name of concrete class, such as 'UserProfile' (or a class name that inherits from this class)",
          "example": "UserProfile",
          "type": "string"
        },
        "DisplayName": {
          "description": "User display name.",
          "type": "string"
        },
        "AvatarUri": {
          "description": "User avatar uri.",
          "type": "string"
        },
        "Preferences": {
          "$ref": "#/definitions/UserPreferences",
          "description": "User preferences."
        },
        "Runtime": {
          "$ref": "#/definitions/UserRuntimeInfo",
          "description": "User runtime information."
        },
        "User": {
          "$ref": "#/definitions/User",
          "description": "Full user information."
        }
      },
      "discriminator": "$type",
      "xml": {
        "name": "UserProfile"
      },
      "type": "object"
    },
    "UserRuntimeInfo": {
      "description": "Represents the runtime information of the User.",
      "properties": {
        "$type": {
          "description": "Set to the name of concrete class, such as 'UserRuntimeInfo' (or a class name that inherits from this class)",
          "example": "UserRuntimeInfo",
          "type": "string"
        },
        "HasPublishRights": {
          "description": "Gets whether the User has the publish rights.",
          "type": "boolean"
        },
        "IsAdministrator": {
          "description": "Gets whether the User is a system administrator.",
          "type": "boolean"
        },
        "IsPublicationAdministrator": {
          "description": "Gets whether the current User has the repository-local administration rights.",
          "type": "boolean"
        },
        "Locale": {
          "$ref": "#/definitions/UserLocaleInfo",
          "description": "Gets the information about User locale."
        }
      },
      "discriminator": "$type",
      "xml": {
        "name": "UserRuntimeInfo"
      },
      "type": "object"
    },
    "ValidationError": {
      "description": "Represents a validation error which is returned when validating an item.",
      "properties": {
        "ErrorCode": {
          "description": "Gets the error code of the validation error or of the exception if any.",
          "type": "string"
        },
        "ExceptionName": {
          "description": "Gets the name of the exception if any.",
          "type": "string"
        },
        "Location": {
          "description": "Gets the location where the validation error occurred.",
          "type": "string"
        },
        "Message": {
          "description": "Gets the detailed message about the validation result.",
          "type": "string"
        },
        "Source": {
          "description": "Gets the name of the component/subsystem that generated the message.",
          "type": "string"
        }
      },
      "xml": {
        "name": "ValidationError"
      },
      "type": "object"
    },
    "ValidationResult": {
      "description": "Represents the data of a validation result which is returned when validating an item.",
      "properties": {
        "$type": {
          "description": "Set to the name of concrete class, such as 'ValidationResult' (or a class name that inherits from this class)",
          "example": "ValidationResult",
          "type": "string"
        },
        "Location": {
          "description": "Gets the location where the validation error occurred.",
          "type": "string"
        },
        "Message": {
          "description": "Gets the detailed message about the validation result.",
          "type": "string"
        },
        "Source": {
          "description": "Gets the name of the component/subsystem that generated the message.",
          "type": "string"
        }
      },
      "discriminator": "$type",
      "xml": {
        "name": "ValidationResult"
      },
      "type": "object"
    },
    "ValidationWarning": {
      "description": "Represents the data of a validation warning which is returned when validating an item.",
      "properties": {
        "Location": {
          "description": "Gets the location where the validation error occurred.",
          "type": "string"
        },
        "Message": {
          "description": "Gets the detailed message about the validation result.",
          "type": "string"
        },
        "Source": {
          "description": "Gets the name of the component/subsystem that generated the message.",
          "type": "string"
        }
      },
      "xml": {
        "name": "ValidationWarning"
      },
      "type": "object"
    },
    "VariablesDictionary": {
      "description": "Represents multiple sets of variables grouped by name.",
      "additionalProperties": {},
      "type": "object"
    },
    "VersionedItem": {
      "description": "Abstract base class for Versioned Items.",
      "required": [
        "Id"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/RepositoryLocalObject"
        },
        {
          "required": [
            "Id"
          ],
          "properties": {
            "DynamicVersionInfo": {
              "$ref": "#/definitions/DynamicVersionInfo"
            },
            "VersionInfo": {
              "$ref": "#/definitions/FullVersionInfo"
            }
          },
          "type": "object"
        }
      ],
      "xml": {
        "name": "VersionedItem"
      },
      "type": "object"
    },
    "VirtualFolder": {
      "description": "Represents the data of a Virtual Folder: an Organizational Item that dynamically collects its contents.",
      "required": [
        "Id"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/OrganizationalItem"
        },
        {
          "required": [
            "Id"
          ],
          "properties": {
            "ApprovalStatus": {
              "$ref": "#/definitions/Link"
            },
            "Description": {
              "description": "Gets or sets the description of the Virtual Folder.",
              "type": "string"
            },
            "TypeSchema": {
              "$ref": "#/definitions/Link"
            },
            "WorkflowInfo": {
              "$ref": "#/definitions/WorkflowInfo"
            }
          },
          "type": "object"
        }
      ],
      "xml": {
        "name": "VirtualFolder"
      },
      "type": "object"
    },
    "WorkflowInfo": {
      "description": "Represents workflow-related information for items that can participate in a workflow process.",
      "properties": {
        "$type": {
          "description": "Set to the name of concrete class, such as 'WorkflowInfo' (or a class name that inherits from this class)",
          "example": "WorkflowInfo",
          "type": "string"
        },
        "ActivityConstraints": {
          "$ref": "#/definitions/ActivityConstraints",
          "description": "Gets or sets the constraints of the current activity."
        },
        "ActivityDefinitionDescription": {
          "description": "Gets or sets the Activity Definition Description of the current Activity Instance.",
          "type": "string"
        },
        "ActivityInstance": {
          "$ref": "#/definitions/Link",
          "description": "Gets or sets the Activity Instance in which the item is currently participating (if any)."
        },
        "ActivityState": {
          "description": "Gets or sets the state of the current Activity Instance.",
          "items": {
            "$ref": "#/definitions/ActivityState"
          },
          "xml": {
            "name": "ActivityState",
            "wrapped": true
          },
          "type": "array"
        },
        "Assignee": {
          "$ref": "#/definitions/Link",
          "description": "Gets or sets the Assignee of the current Activity Instance."
        },
        "AssignmentDate": {
          "description": "Gets the most recent assigned/re-assigned date and time in UTC of the current Activity Instance.",
          "example": "1970-01-01T00:00:00Z",
          "type": "string",
          "format": "date-time"
        },
        "CreationDate": {
          "description": "Gets or sets the creation date and time in UTC of the current Activity Instance.",
          "example": "1970-01-01T00:00:00Z",
          "type": "string",
          "format": "date-time"
        },
        "DueDate": {
          "description": "Gets or sets the due date and time in UTC of the current Activity Instance if any.",
          "example": "1970-01-01T00:00:00Z",
          "type": "string",
          "format": "date-time"
        },
        "FinishDate": {
          "description": "Gets or sets the finish date and time in UTC of the last Activity Instance.",
          "example": "1970-01-01T00:00:00Z",
          "type": "string",
          "format": "date-time"
        },
        "Performer": {
          "$ref": "#/definitions/Link",
          "description": "Gets or sets the Performer of the current Activity Instance."
        },
        "PreviousMessage": {
          "description": "Gets or sets the finish message of the last Activity Instance.",
          "type": "string"
        },
        "ProcessInstance": {
          "$ref": "#/definitions/Link",
          "description": "Gets or sets the Process Instance in which the item is currently participating (if any)."
        },
        "StartDate": {
          "description": "Gets or sets the start date and time in UTC of the current Activity Instance.",
          "example": "1970-01-01T00:00:00Z",
          "type": "string",
          "format": "date-time"
        }
      },
      "discriminator": "$type",
      "xml": {
        "name": "WorkflowInfo"
      },
      "type": "object"
    },
    "WorkflowObject": {
      "description": "Abstract Base class for the data of workflow items except for \"ProcessDefinition\" and \"ApprovalStatus\".",
      "required": [
        "Id"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/IdentifiableObject"
        },
        {
          "required": [
            "Id"
          ],
          "properties": {
            "ContextRepository": {
              "$ref": "#/definitions/Link"
            }
          },
          "type": "object"
        }
      ],
      "xml": {
        "name": "WorkflowObject"
      },
      "type": "object"
    },
    "WorkflowType": {
      "description": "Represents a data of Workflow Type.",
      "required": [
        "Id"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/RegisteredType"
        },
        {
          "required": [
            "Id"
          ],
          "properties": {},
          "type": "object"
        }
      ],
      "xml": {
        "name": "WorkflowType"
      },
      "type": "object"
    },
    "WorkItem": {
      "description": "Represents the data of a Work Item: the association between an item participating in workflow and an Activity.",
      "required": [
        "Id"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/WorkflowObject"
        },
        {
          "required": [
            "Id"
          ],
          "properties": {
            "Activity": {
              "$ref": "#/definitions/Link"
            },
            "Comment": {
              "description": "Gets or sets a comment on the Work Item.",
              "type": "string"
            },
            "Owner": {
              "$ref": "#/definitions/Link"
            },
            "Process": {
              "$ref": "#/definitions/Link"
            },
            "Subject": {
              "$ref": "#/definitions/Link"
            },
            "SubjectOwningRepository": {
              "$ref": "#/definitions/Link"
            }
          },
          "type": "object"
        }
      ],
      "xml": {
        "name": "WorkItem"
      },
      "type": "object"
    },
    "XhtmlFieldDefinition": {
      "description": "Represents an XHTML field (a.k.a. Format Area) definition (in a Schema).",
      "required": [
        "Description",
        "MaxOccurs",
        "MinOccurs",
        "Name"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/TextFieldDefinition"
        },
        {
          "required": [
            "Description",
            "MaxOccurs",
            "MinOccurs",
            "Name"
          ],
          "properties": {
            "DefaultValue": {
              "description": "Gets or sets the default value.",
              "type": "string"
            },
            "FormattingFeatures": {
              "$ref": "#/definitions/FormattingFeatures"
            },
            "Height": {
              "description": "Gets or sets the height of the text area in the form-based User Interface.",
              "type": "integer",
              "format": "int32"
            }
          },
          "type": "object"
        }
      ],
      "xml": {
        "name": "XhtmlFieldDefinition"
      },
      "type": "object"
    }
  },
  "tags": [
    {
      "name": "ApplicationData",
      "description": "Provides operations to Create, Read, Update and Delete application data."
    },
    {
      "name": "BatchOperations",
      "description": "Provides operations to perform various actions on batches of items."
    },
    {
      "name": "Binaries",
      "description": "Provides operations for uploading binaries."
    },
    {
      "name": "BluePrinting",
      "description": "Provides operations related to BluePrinting."
    },
    {
      "name": "Classification",
      "description": "Provides operations for classifying items according to a taxonomy (both internal and external)."
    },
    {
      "name": "Item",
      "description": "Provides a variety of operations for items management, such as Create, Read, Update and Delete."
    },
    {
      "name": "Lists",
      "description": "Provides operations to get lists of certain items."
    },
    {
      "name": "OrganizationalItems",
      "description": "Provides operations related to organizational items."
    },
    {
      "name": "Publication",
      "description": "Provides operations related to Publications."
    },
    {
      "name": "Publishing",
      "description": "Provides operations related to publishing."
    },
    {
      "name": "Schemas",
      "description": "Provides operations related to Schemas."
    },
    {
      "name": "System",
      "description": "Provides general system-related operations."
    },
    {
      "name": "UserProfile",
      "description": "Provides operations for managing user profiles."
    },
    {
      "name": "Versioning",
      "description": "Provides operations for versioned items."
    },
    {
      "name": "Workflow",
      "description": "Provides operations to control Workflow."
    }
  ]
}
